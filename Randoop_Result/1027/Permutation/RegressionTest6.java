package Permutation;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test3001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3001");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass6 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strComparableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test3002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3002");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][] classArray4 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.lang.Class[][][][][][][][][][] classArray9 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray10 = (java.lang.Class<?>[][][][][][][][][][]) classArray9;
        java.lang.Class[][][][][][][][][][][] classArray12 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray13 = (java.lang.Class<?>[][][][][][][][][][][]) classArray12;
        wildcardClassArray13[0] = wildcardClassArray10;
        java.lang.Class[][][][][][][][][][] classArray17 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][][][][][][]) classArray17;
        java.lang.Class[][][][][][][][][][][] classArray20 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray18;
        java.lang.Class[][][][][][][][][][][][] classArray25 = new java.lang.Class[3][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray26 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray25;
        wildcardClassArray26[0] = wildcardClassArray5;
        wildcardClassArray26[1] = wildcardClassArray13;
        wildcardClassArray26[2] = wildcardClassArray21;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][]) wildcardClassArray26);
        java.lang.Class<?> wildcardClass35 = wildcardClassArray26.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClassArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClassArray13);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClassArray26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList33);
        org.junit.Assert.assertNotNull(typeArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test3003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3003");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass25 = wildcardClassOfFieldArrayList24.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test3004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3004");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = genericDeclarationArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(serializableArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3005");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4, permutationArray5 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
    }

    @Test
    public void test3006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3006");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList61 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass64 = collectionArrayList63.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(collectionArrayList60);
        org.junit.Assert.assertNotNull(strArrayListArrayList61);
        org.junit.Assert.assertNotNull(strArrayListArrayList62);
        org.junit.Assert.assertNotNull(collectionArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test3007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3007");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(annotatedElementArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(serializableArrayList6);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList7);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
    }

    @Test
    public void test3008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3008");
        java.util.List[][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3009");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.util.List<java.lang.String[][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass8 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3010");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
    }

    @Test
    public void test3011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3011");
        java.lang.String[][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4 };
        java.lang.String[][][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][][] { strArray5 };
        java.lang.String[][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][][] { strArray7, strArray8, strArray9, strArray10, strArray11 };
        java.lang.String[][][][][][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][][][][][] { strArray12 };
        java.lang.String[][][][][][][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][][][][][][] { strArray6, strArray13 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray14);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArrayList15);
    }

    @Test
    public void test3012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3012");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray2 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] { strArray0, strArray1, strArray2 };
        java.util.List<java.lang.String[][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.lang.Class<?> wildcardClass6 = strArrayList5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test3013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3013");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
    }

    @Test
    public void test3014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3014");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList21 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList22 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList21);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList22);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
    }

    @Test
    public void test3015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3015");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
    }

    @Test
    public void test3016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3016");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = typeDescriptorArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3017");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Object[]> objArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassArrayList30);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList31);
        org.junit.Assert.assertNotNull(objArrayList32);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList33);
    }

    @Test
    public void test3018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3018");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass33 = typeArrayList32.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList31);
        org.junit.Assert.assertNotNull(typeArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test3019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3019");
        java.util.List[][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass9 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3020");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray7;
        wildcardClassOfFieldArray8[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray8[1] = wildcardClassOfFieldArray5;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.util.List<java.io.Serializable[][]> serializableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) wildcardClassOfFieldArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(serializableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
    }

    @Test
    public void test3021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3021");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList7);
        org.junit.Assert.assertNotNull(annotatedElementArrayList8);
    }

    @Test
    public void test3022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3022");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.Object[]> objArrayList46 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass48 = wildcardClassOfFieldArray34.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList44);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList45);
        org.junit.Assert.assertNotNull(objArrayList46);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test3023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3023");
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4, typeArray5 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
    }

    @Test
    public void test3024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3024");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = wildcardClassArrayList30.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test3025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3025");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray1 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][] { typeArray0, typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.io.Serializable[][]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass9 = typeArrayList8.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(serializableArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3026");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass61 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(collectionArrayList60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test3027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3027");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = wildcardClassArrayList28.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3028");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass35 = wildcardClassOfFieldArrayList34.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test3029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3029");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = annotatedElementArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(annotatedElementArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(serializableArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(annotatedElementArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3030");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3031");
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass3 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test3032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3032");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3033");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
    }

    @Test
    public void test3034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3034");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(charSequenceArrayList9);
    }

    @Test
    public void test3035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3035");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3036");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
    }

    @Test
    public void test3037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3037");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3038");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass8 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3039");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(objArrayList16);
        org.junit.Assert.assertNotNull(typeArrayList17);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
    }

    @Test
    public void test3040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3040");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(annotatedElementArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
    }

    @Test
    public void test3041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3041");
        java.lang.String[][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.lang.String[][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][] { strArray4 };
        java.lang.String[][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][] { strArray6, strArray7, strArray8, strArray9 };
        java.lang.String[][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][] { strArray10 };
        java.lang.String[][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray16 = new java.lang.String[][][][][][][][][][][] { strArray12, strArray13, strArray14, strArray15 };
        java.lang.String[][][][][][][][][][][][] strArray17 = new java.lang.String[][][][][][][][][][][][] { strArray16 };
        java.lang.String[][][][][][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][][][][][] { strArray5, strArray11, strArray17 };
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArray18);
        java.lang.Class<?> wildcardClass20 = strArrayList19.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArrayList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test3042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3042");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3043");
        java.lang.String[][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
    }

    @Test
    public void test3044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3044");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
    }

    @Test
    public void test3045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3045");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][] classArray4 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.lang.Class[][][][][][][][][][] classArray9 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray10 = (java.lang.Class<?>[][][][][][][][][][]) classArray9;
        java.lang.Class[][][][][][][][][][][] classArray12 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray13 = (java.lang.Class<?>[][][][][][][][][][][]) classArray12;
        wildcardClassArray13[0] = wildcardClassArray10;
        java.lang.Class[][][][][][][][][][] classArray17 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][][][][][][]) classArray17;
        java.lang.Class[][][][][][][][][][][] classArray20 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray18;
        java.lang.Class[][][][][][][][][][][][] classArray25 = new java.lang.Class[3][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray26 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray25;
        wildcardClassArray26[0] = wildcardClassArray5;
        wildcardClassArray26[1] = wildcardClassArray13;
        wildcardClassArray26[2] = wildcardClassArray21;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) wildcardClassArray26);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) wildcardClassArray26);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList36 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) wildcardClassArray26);
        java.lang.Class<?> wildcardClass37 = wildcardClassOfFieldArrayList36.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClassArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClassArray13);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClassArray26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test3046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3046");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][] classArray4 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.lang.Class[][][][][][][][][][] classArray9 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray10 = (java.lang.Class<?>[][][][][][][][][][]) classArray9;
        java.lang.Class[][][][][][][][][][][] classArray12 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray13 = (java.lang.Class<?>[][][][][][][][][][][]) classArray12;
        wildcardClassArray13[0] = wildcardClassArray10;
        java.lang.Class[][][][][][][][][][] classArray17 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][][][][][][]) classArray17;
        java.lang.Class[][][][][][][][][][][] classArray20 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray18;
        java.lang.Class[][][][][][][][][][][][] classArray25 = new java.lang.Class[3][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray26 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray25;
        wildcardClassArray26[0] = wildcardClassArray5;
        wildcardClassArray26[1] = wildcardClassArray13;
        wildcardClassArray26[2] = wildcardClassArray21;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) wildcardClassArray26);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList36 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList39 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClassArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClassArray13);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClassArray26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
        org.junit.Assert.assertNotNull(wildcardClassArrayList36);
        org.junit.Assert.assertNotNull(wildcardClassArrayList37);
        org.junit.Assert.assertNotNull(wildcardClassArrayList38);
        org.junit.Assert.assertNotNull(wildcardClassArrayList39);
    }

    @Test
    public void test3047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3047");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
        org.junit.Assert.assertNotNull(permutationArrayList9);
    }

    @Test
    public void test3048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3048");
        java.lang.reflect.Type[][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][] { typeArray0, typeArray1, typeArray2 };
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test3049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3049");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass7 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3050");
        java.lang.String[][][][][][][][] strArray0 = new java.lang.String[][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass11 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3051");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass33 = wildcardClassOfFieldArray17.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList31);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test3052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3052");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList22 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.lang.Class<?> wildcardClass24 = wildcardClassOfFieldArrayList23.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList22);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test3053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3053");
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
    }

    @Test
    public void test3054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3054");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.io.Serializable[][]> serializableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(serializableArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
    }

    @Test
    public void test3055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3055");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4, permutationArray5 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray6);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
    }

    @Test
    public void test3056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3056");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass10 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3057");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
    }

    @Test
    public void test3058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3058");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
    }

    @Test
    public void test3059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3059");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3060");
        java.lang.String[][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] { strArray0 };
        java.lang.String[][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][] { strArray2 };
        java.lang.String[][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][] { strArray4 };
        java.lang.String[][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][] { strArray6 };
        java.lang.String[][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][] { strArray8 };
        java.lang.String[][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][] { strArray10 };
        java.lang.String[][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][] { strArray1, strArray3, strArray5, strArray7, strArray9, strArray11 };
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass17 = strArray12.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(strArrayList15);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3061");
        java.util.List[][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][] listArray4 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray4;
        java.util.List[][][][][][][][][][][] listArray7 = new java.util.List[2][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray7;
        strArrayListArray8[0] = strArrayListArray2;
        strArrayListArray8[1] = strArrayListArray5;
        java.util.List[][][][][][][][][][] listArray14 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray15 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray14;
        java.util.List[][][][][][][][][][] listArray17 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray17;
        java.util.List[][][][][][][][][][][] listArray20 = new java.util.List[2][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray15;
        strArrayListArray21[1] = strArrayListArray18;
        java.util.List[][][][][][][][][][] listArray27 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray28 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray27;
        java.util.List[][][][][][][][][][] listArray30 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray31 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray30;
        java.util.List[][][][][][][][][][][] listArray33 = new java.util.List[2][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray34 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray33;
        strArrayListArray34[0] = strArrayListArray28;
        strArrayListArray34[1] = strArrayListArray31;
        java.util.List[][][][][][][][][][] listArray40 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray40;
        java.util.List[][][][][][][][][][] listArray43 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray43;
        java.util.List[][][][][][][][][][][] listArray46 = new java.util.List[2][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray46;
        strArrayListArray47[0] = strArrayListArray41;
        strArrayListArray47[1] = strArrayListArray44;
        java.util.List[][][][][][][][][][] listArray53 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray54 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray53;
        java.util.List[][][][][][][][][][] listArray56 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray57 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray56;
        java.util.List[][][][][][][][][][][] listArray59 = new java.util.List[2][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray60 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray59;
        strArrayListArray60[0] = strArrayListArray54;
        strArrayListArray60[1] = strArrayListArray57;
        java.util.List[][][][][][][][][][] listArray66 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray67 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray66;
        java.util.List[][][][][][][][][][] listArray69 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray70 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray69;
        java.util.List[][][][][][][][][][][] listArray72 = new java.util.List[2][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray73 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray72;
        strArrayListArray73[0] = strArrayListArray67;
        strArrayListArray73[1] = strArrayListArray70;
        java.util.List[][][][][][][][][][][][] listArray79 = new java.util.List[6][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray80 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray79;
        strArrayListArray80[0] = strArrayListArray8;
        strArrayListArray80[1] = strArrayListArray21;
        strArrayListArray80[2] = strArrayListArray34;
        strArrayListArray80[3] = strArrayListArray47;
        strArrayListArray80[4] = strArrayListArray60;
        strArrayListArray80[5] = strArrayListArray73;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList93 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray80);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList94 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray80);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList95 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray80);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList96 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray80);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList97 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray80);
        java.lang.Class<?> wildcardClass98 = strArrayListArrayList97.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strArrayListArray15);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray27);
        org.junit.Assert.assertNotNull(strArrayListArray28);
        org.junit.Assert.assertNotNull(listArray30);
        org.junit.Assert.assertNotNull(strArrayListArray31);
        org.junit.Assert.assertNotNull(listArray33);
        org.junit.Assert.assertNotNull(strArrayListArray34);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(listArray53);
        org.junit.Assert.assertNotNull(strArrayListArray54);
        org.junit.Assert.assertNotNull(listArray56);
        org.junit.Assert.assertNotNull(strArrayListArray57);
        org.junit.Assert.assertNotNull(listArray59);
        org.junit.Assert.assertNotNull(strArrayListArray60);
        org.junit.Assert.assertNotNull(listArray66);
        org.junit.Assert.assertNotNull(strArrayListArray67);
        org.junit.Assert.assertNotNull(listArray69);
        org.junit.Assert.assertNotNull(strArrayListArray70);
        org.junit.Assert.assertNotNull(listArray72);
        org.junit.Assert.assertNotNull(strArrayListArray73);
        org.junit.Assert.assertNotNull(listArray79);
        org.junit.Assert.assertNotNull(strArrayListArray80);
        org.junit.Assert.assertNotNull(strArrayListArrayList93);
        org.junit.Assert.assertNotNull(strArrayListArrayList94);
        org.junit.Assert.assertNotNull(strArrayListArrayList95);
        org.junit.Assert.assertNotNull(strArrayListArrayList96);
        org.junit.Assert.assertNotNull(strArrayListArrayList97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test3062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3062");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass11 = constantDescArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(constantDescArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3063");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass15 = strArrayCollectionArrayList14.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3064");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray5);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray5);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray5);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray5);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
        org.junit.Assert.assertNotNull(permutationArrayList9);
        org.junit.Assert.assertNotNull(permutationArrayList10);
    }

    @Test
    public void test3065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3065");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(annotatedElementArrayList8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
    }

    @Test
    public void test3066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3066");
        java.lang.Class[][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass25 = typeArrayList24.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test3067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3067");
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.lang.Class<?> wildcardClass6 = strArray3.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test3068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3068");
        java.util.List[][][][][][][][] listArray1 = new java.util.List[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray1;
        java.util.List[][][][][][][][] listArray4 = new java.util.List[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray4;
        java.util.List[][][][][][][][] listArray7 = new java.util.List[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray7;
        java.util.List[][][][][][][][][] listArray10 = new java.util.List[3][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(strArrayListArrayList19);
        org.junit.Assert.assertNotNull(strArrayListArrayList20);
        org.junit.Assert.assertNotNull(strArrayListArrayList21);
    }

    @Test
    public void test3069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3069");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList59 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass60 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test3070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3070");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = typeDescriptorArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3071");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
    }

    @Test
    public void test3072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3072");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3073");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass15 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(strArrayListArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3074");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.lang.Class<?> wildcardClass14 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(charSequenceArrayList11);
        org.junit.Assert.assertNotNull(strComparableArrayList12);
        org.junit.Assert.assertNotNull(objArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3075");
        java.util.List[][][][][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][][][][][][] listArray4 = new java.util.List[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][]) listArray4;
        java.util.List[][][][][][][][][][][][][][][] listArray7 = new java.util.List[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][]) listArray7;
        java.util.List[][][][][][][][][][][][][][][] listArray10 = new java.util.List[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][]) listArray10;
        java.util.List[][][][][][][][][][][][][][][] listArray13 = new java.util.List[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][]) listArray13;
        java.util.List[][][][][][][][][][][][][][][][] listArray16 = new java.util.List[5][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]) listArray16;
        strArrayListArray17[0] = strArrayListArray2;
        strArrayListArray17[1] = strArrayListArray5;
        strArrayListArray17[2] = strArrayListArray8;
        strArrayListArray17[3] = strArrayListArray11;
        strArrayListArray17[4] = strArrayListArray14;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]> strArrayListArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray17);
        java.lang.Class<?> wildcardClass29 = strArrayListArray17.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(strArrayListArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3076");
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] { strArray6 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
    }

    @Test
    public void test3077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3077");
        java.lang.String[][][] strArray0 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray1 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray2 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray4 = new java.lang.String[][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] { strArray4 };
        java.util.List<java.lang.String[][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray5);
        java.util.List<java.lang.String[][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
    }

    @Test
    public void test3078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3078");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] { strArray0 };
        java.util.List<java.lang.String[][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray1);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
    }

    @Test
    public void test3079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3079");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = wildcardClassArrayList28.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3080");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
    }

    @Test
    public void test3081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3081");
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
    }

    @Test
    public void test3082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3082");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList67 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList68 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList69 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(typeArrayList67);
        org.junit.Assert.assertNotNull(wildcardClassArrayList68);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList69);
    }

    @Test
    public void test3083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3083");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
    }

    @Test
    public void test3084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3084");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] { permutation0 };
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray3 = new com.thealgorithms.backtracking.Permutation[] { permutation2 };
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] { permutation4 };
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray7 = new com.thealgorithms.backtracking.Permutation[] { permutation6 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray1, permutationArray3, permutationArray5, permutationArray7 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray8 };
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray11 = new com.thealgorithms.backtracking.Permutation[] { permutation10 };
        com.thealgorithms.backtracking.Permutation permutation12 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray13 = new com.thealgorithms.backtracking.Permutation[] { permutation12 };
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray17 = new com.thealgorithms.backtracking.Permutation[] { permutation16 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray11, permutationArray13, permutationArray15, permutationArray17 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray18 };
        com.thealgorithms.backtracking.Permutation permutation20 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray21 = new com.thealgorithms.backtracking.Permutation[] { permutation20 };
        com.thealgorithms.backtracking.Permutation permutation22 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray23 = new com.thealgorithms.backtracking.Permutation[] { permutation22 };
        com.thealgorithms.backtracking.Permutation permutation24 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] { permutation24 };
        com.thealgorithms.backtracking.Permutation permutation26 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray27 = new com.thealgorithms.backtracking.Permutation[] { permutation26 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray21, permutationArray23, permutationArray25, permutationArray27 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray28 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray30 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray9, permutationArray19, permutationArray29 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.lang.Class<?> wildcardClass34 = permutationArrayList33.getClass();
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArrayList31);
        org.junit.Assert.assertNotNull(permutationArrayList32);
        org.junit.Assert.assertNotNull(permutationArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test3085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3085");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.lang.Object[]> objArrayList36 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList37 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList38 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList39 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray23);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList34);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList35);
        org.junit.Assert.assertNotNull(objArrayList36);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList37);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList38);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList39);
    }

    @Test
    public void test3086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3086");
        java.lang.Class[][][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass5 = typeArrayList4.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test3087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3087");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass19 = strArrayListArrayList18.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList15);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList16);
        org.junit.Assert.assertNotNull(strArrayListArrayList17);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3088");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass34 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(typeArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test3089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3089");
        java.lang.Class[][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
    }

    @Test
    public void test3090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3090");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass7 = typeArrayList6.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3091");
        java.util.List[][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][][] listArray4 = new java.util.List[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        java.lang.Class<?> wildcardClass12 = strArrayListArrayList11.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayListArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3092");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
    }

    @Test
    public void test3093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3093");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
    }

    @Test
    public void test3094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3094");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray3, permutationArray7, permutationArray11 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray13, permutationArray14, permutationArray15 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray17, permutationArray18, permutationArray19 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray21, permutationArray22, permutationArray23 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray16, permutationArray20, permutationArray24 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray26 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray27 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray26, permutationArray27, permutationArray28 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray30 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray31 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray33 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray30, permutationArray31, permutationArray32 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray34 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray35 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray36 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray37 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray34, permutationArray35, permutationArray36 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray38 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray29, permutationArray33, permutationArray37 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][] permutationArray39 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][] { permutationArray12, permutationArray25, permutationArray38 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][]> permutationArrayList40 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray33);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArrayList40);
    }

    @Test
    public void test3095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3095");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList18 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList17);
        org.junit.Assert.assertNotNull(objArrayList18);
    }

    @Test
    public void test3096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3096");
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass8 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3097");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[3][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray25;
        wildcardClassOfFieldArray26[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray26[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray26[2] = wildcardClassOfFieldArray21;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray26);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray26);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray26);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList36 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList36);
    }

    @Test
    public void test3098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3098");
        java.util.List[][][][][][][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][][][][][][][][] listArray4 = new java.util.List[0][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][]) listArray4;
        java.util.List[][][][][][][][][][][][][][][][][] listArray7 = new java.util.List[0][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][]) listArray7;
        java.util.List[][][][][][][][][][][][][][][][][] listArray10 = new java.util.List[0][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][]) listArray10;
        java.util.List[][][][][][][][][][][][][][][][][][] listArray13 = new java.util.List[4][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
    }

    @Test
    public void test3099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3099");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassOfFieldArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3100");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray1 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray2 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray3 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray4 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray5 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4, typeArray5 };
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
    }

    @Test
    public void test3101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3101");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass12 = strArrayListArrayList11.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3102");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3103");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass35 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test3104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3104");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
    }

    @Test
    public void test3105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3105");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList15);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList16);
    }

    @Test
    public void test3106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3106");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass34 = wildcardClassArrayList33.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassArrayList30);
        org.junit.Assert.assertNotNull(constableArrayList31);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList32);
        org.junit.Assert.assertNotNull(wildcardClassArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test3107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3107");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(annotatedElementArrayList11);
    }

    @Test
    public void test3108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3108");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass16 = strArrayCollectionArrayList15.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(strArrayListArrayList13);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList14);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3109");
        java.lang.Class[][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
    }

    @Test
    public void test3110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3110");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
    }

    @Test
    public void test3111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3111");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3112");
        java.lang.Class[][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.lang.Class<?> wildcardClass17 = wildcardClassArray8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3113");
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass4 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test3114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3114");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(constableArrayList31);
        org.junit.Assert.assertNotNull(wildcardClassArrayList32);
        org.junit.Assert.assertNotNull(wildcardClassArrayList33);
    }

    @Test
    public void test3115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3115");
        java.util.List[][][][][][][][] listArray1 = new java.util.List[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass4 = strArrayListArrayList3.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test3116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3116");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.io.Serializable[][]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
    }

    @Test
    public void test3117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3117");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3118");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
    }

    @Test
    public void test3119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3119");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3120");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3121");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3122");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
    }

    @Test
    public void test3123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3123");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = annotatedElementArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList5);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList6);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList7);
        org.junit.Assert.assertNotNull(annotatedElementArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3124");
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
    }

    @Test
    public void test3125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3125");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = strArrayListArrayList7.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3126");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray1 = new java.lang.constant.Constable[][] { constableArray0 };
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray3 = new java.lang.constant.Constable[][] { constableArray2 };
        java.lang.constant.Constable[] constableArray4 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray5 = new java.lang.constant.Constable[][] { constableArray4 };
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray7 = new java.lang.constant.Constable[][] { constableArray6 };
        java.lang.constant.Constable[][][] constableArray8 = new java.lang.constant.Constable[][][] { constableArray1, constableArray3, constableArray5, constableArray7 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.lang.Class<?> wildcardClass11 = constableArrayList10.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3127");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
    }

    @Test
    public void test3128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3128");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
    }

    @Test
    public void test3129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3129");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(typeArrayList31);
        org.junit.Assert.assertNotNull(wildcardClassArrayList32);
        org.junit.Assert.assertNotNull(constableArrayList33);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
    }

    @Test
    public void test3130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3130");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(annotatedElementArrayList10);
    }

    @Test
    public void test3131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3131");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassOfFieldArrayList29.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test3132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3132");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(annotatedElementArrayList9);
        org.junit.Assert.assertNotNull(annotatedElementArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3133");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.Object[]> objArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.lang.Class<?> wildcardClass27 = wildcardClassOfFieldArrayList26.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(objArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3134");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3135");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "", "", "", "hi!" };
        java.lang.String[] strArray11 = new java.lang.String[] { "", "", "", "", "hi!" };
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "", "", "hi!" };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "", "hi!" };
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "", "hi!" };
        java.lang.String[][] strArray30 = new java.lang.String[][] { strArray5, strArray11, strArray17, strArray23, strArray29 };
        java.util.List<java.lang.String[][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray30);
        java.util.List<java.lang.String[][]> strArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(strArray30);
        java.util.List<java.lang.String[][]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray30);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(strArrayList32);
        org.junit.Assert.assertNotNull(strArrayList33);
    }

    @Test
    public void test3136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3136");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.io.Serializable[]> serializableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(serializableArrayList15);
        org.junit.Assert.assertNotNull(objArrayList16);
    }

    @Test
    public void test3137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3137");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
    }

    @Test
    public void test3138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3138");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
        org.junit.Assert.assertNotNull(constableArrayList17);
    }

    @Test
    public void test3139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3139");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test3140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3140");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(annotatedElementArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3141");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation3 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation5 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray6 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1, permutation2, permutation3, permutation4, permutation5 };
        com.thealgorithms.backtracking.Permutation permutation7 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation8 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation9 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation11 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation12 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray13 = new com.thealgorithms.backtracking.Permutation[] { permutation7, permutation8, permutation9, permutation10, permutation11, permutation12 };
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation15 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation18 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation19 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray20 = new com.thealgorithms.backtracking.Permutation[] { permutation14, permutation15, permutation16, permutation17, permutation18, permutation19 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray6, permutationArray13, permutationArray20 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray21);
        java.lang.Class<?> wildcardClass23 = permutationArray21.getClass();
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test3142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3142");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation3 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1, permutation2, permutation3, permutation4 };
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation7 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation8 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation9 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray11 = new com.thealgorithms.backtracking.Permutation[] { permutation6, permutation7, permutation8, permutation9, permutation10 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray5, permutationArray11 };
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation15 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] { permutation13, permutation14, permutation15, permutation16, permutation17 };
        com.thealgorithms.backtracking.Permutation permutation19 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation20 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation21 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation22 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation23 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray24 = new com.thealgorithms.backtracking.Permutation[] { permutation19, permutation20, permutation21, permutation22, permutation23 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray18, permutationArray24 };
        com.thealgorithms.backtracking.Permutation permutation26 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation27 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation28 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation29 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation30 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray31 = new com.thealgorithms.backtracking.Permutation[] { permutation26, permutation27, permutation28, permutation29, permutation30 };
        com.thealgorithms.backtracking.Permutation permutation32 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation33 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation34 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation35 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation36 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray37 = new com.thealgorithms.backtracking.Permutation[] { permutation32, permutation33, permutation34, permutation35, permutation36 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray38 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray31, permutationArray37 };
        com.thealgorithms.backtracking.Permutation permutation39 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation40 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation41 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation42 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation43 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray44 = new com.thealgorithms.backtracking.Permutation[] { permutation39, permutation40, permutation41, permutation42, permutation43 };
        com.thealgorithms.backtracking.Permutation permutation45 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation46 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation47 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation48 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation49 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray50 = new com.thealgorithms.backtracking.Permutation[] { permutation45, permutation46, permutation47, permutation48, permutation49 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray51 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray44, permutationArray50 };
        com.thealgorithms.backtracking.Permutation permutation52 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation53 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation54 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation55 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation56 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray57 = new com.thealgorithms.backtracking.Permutation[] { permutation52, permutation53, permutation54, permutation55, permutation56 };
        com.thealgorithms.backtracking.Permutation permutation58 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation59 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation60 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation61 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation62 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray63 = new com.thealgorithms.backtracking.Permutation[] { permutation58, permutation59, permutation60, permutation61, permutation62 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray64 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray57, permutationArray63 };
        com.thealgorithms.backtracking.Permutation permutation65 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation66 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation67 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation68 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation69 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray70 = new com.thealgorithms.backtracking.Permutation[] { permutation65, permutation66, permutation67, permutation68, permutation69 };
        com.thealgorithms.backtracking.Permutation permutation71 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation72 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation73 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation74 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation75 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray76 = new com.thealgorithms.backtracking.Permutation[] { permutation71, permutation72, permutation73, permutation74, permutation75 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray77 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray70, permutationArray76 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray78 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray12, permutationArray25, permutationArray38, permutationArray51, permutationArray64, permutationArray77 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList79 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray78);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList80 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray78);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray44);
        org.junit.Assert.assertNotNull(permutationArray50);
        org.junit.Assert.assertNotNull(permutationArray51);
        org.junit.Assert.assertNotNull(permutationArray57);
        org.junit.Assert.assertNotNull(permutationArray63);
        org.junit.Assert.assertNotNull(permutationArray64);
        org.junit.Assert.assertNotNull(permutationArray70);
        org.junit.Assert.assertNotNull(permutationArray76);
        org.junit.Assert.assertNotNull(permutationArray77);
        org.junit.Assert.assertNotNull(permutationArray78);
        org.junit.Assert.assertNotNull(permutationArrayList79);
        org.junit.Assert.assertNotNull(permutationArrayList80);
    }

    @Test
    public void test3143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3143");
        java.lang.String[][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass4 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test3144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3144");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass28 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test3145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3145");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
    }

    @Test
    public void test3146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3146");
        java.lang.String[][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] { strArray0 };
        java.lang.String[][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][] { strArray2 };
        java.lang.String[][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][] { strArray4 };
        java.lang.String[][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][] { strArray6 };
        java.lang.String[][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][] { strArray8 };
        java.lang.String[][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][] { strArray10 };
        java.lang.String[][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][] { strArray1, strArray3, strArray5, strArray7, strArray9, strArray11 };
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.io.Serializable[][]> serializableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) strArray12);
        java.lang.Class<?> wildcardClass15 = serializableArrayList14.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(serializableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3147");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass14 = strComparableArrayList13.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(charSequenceArrayList12);
        org.junit.Assert.assertNotNull(strComparableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3148");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass7 = typeArray0.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3149");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass17 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3150");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = genericDeclarationArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3151");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
    }

    @Test
    public void test3152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3152");
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
    }

    @Test
    public void test3153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3153");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.lang.Class<?> wildcardClass35 = strArrayListArray23.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayListArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test3154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3154");
        java.lang.String[][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArrayList1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test3155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3155");
        java.util.List[][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = strArrayListArrayList5.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test3156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3156");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][]) listArray1;
        java.util.List[][] listArray4 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][]) listArray7;
        java.util.List[][] listArray10 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][]) listArray10;
        java.util.List[][] listArray13 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        java.util.List[][][] listArray19 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray2;
        strArrayListArray20[1] = strArrayListArray5;
        strArrayListArray20[2] = strArrayListArray8;
        strArrayListArray20[3] = strArrayListArray11;
        strArrayListArray20[4] = strArrayListArray14;
        strArrayListArray20[5] = strArrayListArray17;
        java.util.List[][] listArray34 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray35 = (java.util.List<java.lang.String[]>[][]) listArray34;
        java.util.List[][] listArray37 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray38 = (java.util.List<java.lang.String[]>[][]) listArray37;
        java.util.List[][] listArray40 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][]) listArray40;
        java.util.List[][] listArray43 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][]) listArray43;
        java.util.List[][] listArray46 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        java.util.List[][] listArray49 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray50 = (java.util.List<java.lang.String[]>[][]) listArray49;
        java.util.List[][][] listArray52 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray53 = (java.util.List<java.lang.String[]>[][][]) listArray52;
        strArrayListArray53[0] = strArrayListArray35;
        strArrayListArray53[1] = strArrayListArray38;
        strArrayListArray53[2] = strArrayListArray41;
        strArrayListArray53[3] = strArrayListArray44;
        strArrayListArray53[4] = strArrayListArray47;
        strArrayListArray53[5] = strArrayListArray50;
        java.util.List[][][][] listArray67 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray68 = (java.util.List<java.lang.String[]>[][][][]) listArray67;
        strArrayListArray68[0] = strArrayListArray20;
        strArrayListArray68[1] = strArrayListArray53;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList73 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList74 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList75 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList76 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList77 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList78 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.lang.Class<?> wildcardClass79 = strArrayListArrayList78.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray34);
        org.junit.Assert.assertNotNull(strArrayListArray35);
        org.junit.Assert.assertNotNull(listArray37);
        org.junit.Assert.assertNotNull(strArrayListArray38);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(listArray49);
        org.junit.Assert.assertNotNull(strArrayListArray50);
        org.junit.Assert.assertNotNull(listArray52);
        org.junit.Assert.assertNotNull(strArrayListArray53);
        org.junit.Assert.assertNotNull(listArray67);
        org.junit.Assert.assertNotNull(strArrayListArray68);
        org.junit.Assert.assertNotNull(strArrayListArrayList73);
        org.junit.Assert.assertNotNull(strArrayListArrayList74);
        org.junit.Assert.assertNotNull(strArrayListArrayList75);
        org.junit.Assert.assertNotNull(strArrayListArrayList76);
        org.junit.Assert.assertNotNull(strArrayListArrayList77);
        org.junit.Assert.assertNotNull(strArrayListArrayList78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3157");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.lang.Class<?> wildcardClass7 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3158");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
    }

    @Test
    public void test3159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3159");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = typeArrayList26.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3160");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass29 = strArrayListArray14.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(serializableArrayList25);
        org.junit.Assert.assertNotNull(strArrayListArrayList26);
        org.junit.Assert.assertNotNull(strArrayListArrayList27);
        org.junit.Assert.assertNotNull(strArrayListArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3161");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation3 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray4 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1, permutation2, permutation3 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
        org.junit.Assert.assertNotNull(permutationArrayList9);
    }

    @Test
    public void test3162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3162");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = typeDescriptorArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3163");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.util.List<java.lang.String[][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass7 = strArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3164");
        java.util.List[][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][] listArray4 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][][][][][][] listArray9 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray9;
        java.util.List[][][][][][][][][][] listArray12 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray13 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray12;
        strArrayListArray13[0] = strArrayListArray10;
        java.util.List[][][][][][][][][] listArray17 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray17;
        java.util.List[][][][][][][][][][] listArray20 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray18;
        java.util.List[][][][][][][][][] listArray25 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray25;
        java.util.List[][][][][][][][][][] listArray28 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray29 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray28;
        strArrayListArray29[0] = strArrayListArray26;
        java.util.List[][][][][][][][][] listArray33 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray34 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray33;
        java.util.List[][][][][][][][][][] listArray36 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray37 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray36;
        strArrayListArray37[0] = strArrayListArray34;
        java.util.List[][][][][][][][][][][] listArray41 = new java.util.List[5][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray42 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray41;
        strArrayListArray42[0] = strArrayListArray5;
        strArrayListArray42[1] = strArrayListArray13;
        strArrayListArray42[2] = strArrayListArray21;
        strArrayListArray42[3] = strArrayListArray29;
        strArrayListArray42[4] = strArrayListArray37;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.lang.Class<?> wildcardClass55 = strArrayListArray42.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray12);
        org.junit.Assert.assertNotNull(strArrayListArray13);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray28);
        org.junit.Assert.assertNotNull(strArrayListArray29);
        org.junit.Assert.assertNotNull(listArray33);
        org.junit.Assert.assertNotNull(strArrayListArray34);
        org.junit.Assert.assertNotNull(listArray36);
        org.junit.Assert.assertNotNull(strArrayListArray37);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(strArrayListArrayList53);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test3165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3165");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3166");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List[][][][][][] listArray4 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][]) listArray4;
        java.util.List[][][][][][] listArray7 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][]) listArray7;
        java.util.List[][][][][][] listArray10 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][][]) listArray10;
        java.util.List[][][][][][][] listArray13 = new java.util.List[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List[][][][][][][][] listArray24 = new java.util.List[1][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray25 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray24;
        strArrayListArray25[0] = strArrayListArray14;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray25);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray25);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArrayListArrayList28);
        org.junit.Assert.assertNotNull(strArrayListArrayList29);
    }

    @Test
    public void test3167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3167");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList8);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList9);
        org.junit.Assert.assertNotNull(strArrayListArrayList10);
    }

    @Test
    public void test3168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3168");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[3][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.lang.Object[]> objArrayList21 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(strArrayListArrayList19);
        org.junit.Assert.assertNotNull(strArrayListArrayList20);
        org.junit.Assert.assertNotNull(objArrayList21);
        org.junit.Assert.assertNotNull(strArrayListArrayList22);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
    }

    @Test
    public void test3169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3169");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
    }

    @Test
    public void test3170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3170");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3171");
        java.lang.String[][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(strArrayList11);
        org.junit.Assert.assertNotNull(strArrayList12);
        org.junit.Assert.assertNotNull(strArrayList13);
    }

    @Test
    public void test3172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3172");
        java.lang.reflect.Type[][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4, typeArray5 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArrayList7.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3173");
        java.util.List[][][][][][][][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
    }

    @Test
    public void test3174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3174");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray2 = (java.util.List<java.lang.String[]>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray5 = (java.util.List<java.lang.String[]>[]) listArray4;
        java.util.List[] listArray7 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        java.util.List[] listArray10 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray11 = (java.util.List<java.lang.String[]>[]) listArray10;
        java.util.List[] listArray13 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray14 = (java.util.List<java.lang.String[]>[]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        strArrayListArray17[0] = listArray1;
        strArrayListArray17[1] = strArrayListArray5;
        strArrayListArray17[2] = listArray7;
        strArrayListArray17[3] = strArrayListArray11;
        strArrayListArray17[4] = strArrayListArray14;
        java.util.List[] listArray29 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray30 = (java.util.List<java.lang.String[]>[]) listArray29;
        java.util.List[] listArray32 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray33 = (java.util.List<java.lang.String[]>[]) listArray32;
        java.util.List[] listArray35 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray36 = (java.util.List<java.lang.String[]>[]) listArray35;
        java.util.List[] listArray38 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray39 = (java.util.List<java.lang.String[]>[]) listArray38;
        java.util.List[] listArray41 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray42 = (java.util.List<java.lang.String[]>[]) listArray41;
        java.util.List[][] listArray44 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray45 = (java.util.List<java.lang.String[]>[][]) listArray44;
        strArrayListArray45[0] = listArray29;
        strArrayListArray45[1] = strArrayListArray33;
        strArrayListArray45[2] = listArray35;
        strArrayListArray45[3] = strArrayListArray39;
        strArrayListArray45[4] = strArrayListArray42;
        java.util.List[] listArray57 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray58 = (java.util.List<java.lang.String[]>[]) listArray57;
        java.util.List[] listArray60 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray61 = (java.util.List<java.lang.String[]>[]) listArray60;
        java.util.List[] listArray63 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray64 = (java.util.List<java.lang.String[]>[]) listArray63;
        java.util.List[] listArray66 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray67 = (java.util.List<java.lang.String[]>[]) listArray66;
        java.util.List[] listArray69 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray70 = (java.util.List<java.lang.String[]>[]) listArray69;
        java.util.List[][] listArray72 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray73 = (java.util.List<java.lang.String[]>[][]) listArray72;
        strArrayListArray73[0] = listArray57;
        strArrayListArray73[1] = strArrayListArray61;
        strArrayListArray73[2] = listArray63;
        strArrayListArray73[3] = strArrayListArray67;
        strArrayListArray73[4] = strArrayListArray70;
        java.util.List[][][] listArray85 = new java.util.List[3][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray86 = (java.util.List<java.lang.String[]>[][][]) listArray85;
        strArrayListArray86[0] = strArrayListArray17;
        strArrayListArray86[1] = strArrayListArray45;
        strArrayListArray86[2] = strArrayListArray73;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList93 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.util.Collection[][][]> collectionArrayList94 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray86);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList95 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray86);
        java.util.List<java.io.Serializable[]> serializableArrayList96 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray86);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList97 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.lang.Class<?> wildcardClass98 = strArrayListArray86.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(listArray32);
        org.junit.Assert.assertNotNull(strArrayListArray33);
        org.junit.Assert.assertNotNull(listArray35);
        org.junit.Assert.assertNotNull(strArrayListArray36);
        org.junit.Assert.assertNotNull(listArray38);
        org.junit.Assert.assertNotNull(strArrayListArray39);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(listArray44);
        org.junit.Assert.assertNotNull(strArrayListArray45);
        org.junit.Assert.assertNotNull(listArray57);
        org.junit.Assert.assertNotNull(strArrayListArray58);
        org.junit.Assert.assertNotNull(listArray60);
        org.junit.Assert.assertNotNull(strArrayListArray61);
        org.junit.Assert.assertNotNull(listArray63);
        org.junit.Assert.assertNotNull(strArrayListArray64);
        org.junit.Assert.assertNotNull(listArray66);
        org.junit.Assert.assertNotNull(strArrayListArray67);
        org.junit.Assert.assertNotNull(listArray69);
        org.junit.Assert.assertNotNull(strArrayListArray70);
        org.junit.Assert.assertNotNull(listArray72);
        org.junit.Assert.assertNotNull(strArrayListArray73);
        org.junit.Assert.assertNotNull(listArray85);
        org.junit.Assert.assertNotNull(strArrayListArray86);
        org.junit.Assert.assertNotNull(strArrayListArrayList93);
        org.junit.Assert.assertNotNull(collectionArrayList94);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList95);
        org.junit.Assert.assertNotNull(serializableArrayList96);
        org.junit.Assert.assertNotNull(strArrayListArrayList97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test3175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3175");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass33 = constableArrayList32.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test3176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3176");
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.lang.Class<?> wildcardClass6 = strArray4.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test3177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3177");
        java.lang.Class[][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][][][] classArray4 = new java.lang.Class[1][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.lang.Class[][][][][][][][][][][][][][][][] classArray9 = new java.lang.Class[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][] wildcardClassArray10 = (java.lang.Class<?>[][][][][][][][][][][][][][][][]) classArray9;
        wildcardClassArray10[0] = wildcardClassArray5;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray10);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClassArray10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
    }

    @Test
    public void test3178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3178");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass7 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3179");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test3180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3180");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
    }

    @Test
    public void test3181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3181");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList36 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.lang.Class<?> wildcardClass37 = strArrayCollectionArrayList36.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList34);
        org.junit.Assert.assertNotNull(strArrayListArrayList35);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test3182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3182");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = constableArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3183");
        com.thealgorithms.backtracking.Permutation[][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray0 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray4 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray1, permutationArray3, permutationArray5, permutationArray7 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray9 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray11 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray15 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray10, permutationArray12, permutationArray14, permutationArray16 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray8, permutationArray17 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArrayList19);
    }

    @Test
    public void test3184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3184");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass9 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3185");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
    }

    @Test
    public void test3186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3186");
        java.lang.String[][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][] { strArray2 };
        java.lang.String[][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][] { strArray4, strArray5 };
        java.lang.String[][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][] { strArray6 };
        java.lang.String[][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][] { strArray8, strArray9 };
        java.lang.String[][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][] { strArray10 };
        java.lang.String[][][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][][] { strArray3, strArray7, strArray11 };
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(strArrayList15);
    }

    @Test
    public void test3187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3187");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList22 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList22);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
    }

    @Test
    public void test3188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3188");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] { strArray0 };
        java.lang.String[][][][] strArray2 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray3 = new java.lang.String[][][][][] { strArray2 };
        java.lang.String[][][][] strArray4 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] { strArray4 };
        java.lang.String[][][][] strArray6 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray7 = new java.lang.String[][][][][] { strArray6 };
        java.lang.String[][][][][][] strArray8 = new java.lang.String[][][][][][] { strArray1, strArray3, strArray5, strArray7 };
        java.lang.String[][][][] strArray9 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray10 = new java.lang.String[][][][][] { strArray9 };
        java.lang.String[][][][] strArray11 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray12 = new java.lang.String[][][][][] { strArray11 };
        java.lang.String[][][][] strArray13 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray14 = new java.lang.String[][][][][] { strArray13 };
        java.lang.String[][][][] strArray15 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray16 = new java.lang.String[][][][][] { strArray15 };
        java.lang.String[][][][][][] strArray17 = new java.lang.String[][][][][][] { strArray10, strArray12, strArray14, strArray16 };
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] { strArray8, strArray17 };
        java.lang.String[][][][] strArray19 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray20 = new java.lang.String[][][][][] { strArray19 };
        java.lang.String[][][][] strArray21 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray22 = new java.lang.String[][][][][] { strArray21 };
        java.lang.String[][][][] strArray23 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray24 = new java.lang.String[][][][][] { strArray23 };
        java.lang.String[][][][] strArray25 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray26 = new java.lang.String[][][][][] { strArray25 };
        java.lang.String[][][][][][] strArray27 = new java.lang.String[][][][][][] { strArray20, strArray22, strArray24, strArray26 };
        java.lang.String[][][][] strArray28 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray29 = new java.lang.String[][][][][] { strArray28 };
        java.lang.String[][][][] strArray30 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray31 = new java.lang.String[][][][][] { strArray30 };
        java.lang.String[][][][] strArray32 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray33 = new java.lang.String[][][][][] { strArray32 };
        java.lang.String[][][][] strArray34 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray35 = new java.lang.String[][][][][] { strArray34 };
        java.lang.String[][][][][][] strArray36 = new java.lang.String[][][][][][] { strArray29, strArray31, strArray33, strArray35 };
        java.lang.String[][][][][][][] strArray37 = new java.lang.String[][][][][][][] { strArray27, strArray36 };
        java.lang.String[][][][] strArray38 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray39 = new java.lang.String[][][][][] { strArray38 };
        java.lang.String[][][][] strArray40 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray41 = new java.lang.String[][][][][] { strArray40 };
        java.lang.String[][][][] strArray42 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray43 = new java.lang.String[][][][][] { strArray42 };
        java.lang.String[][][][] strArray44 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray45 = new java.lang.String[][][][][] { strArray44 };
        java.lang.String[][][][][][] strArray46 = new java.lang.String[][][][][][] { strArray39, strArray41, strArray43, strArray45 };
        java.lang.String[][][][] strArray47 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray48 = new java.lang.String[][][][][] { strArray47 };
        java.lang.String[][][][] strArray49 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray50 = new java.lang.String[][][][][] { strArray49 };
        java.lang.String[][][][] strArray51 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray52 = new java.lang.String[][][][][] { strArray51 };
        java.lang.String[][][][] strArray53 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray54 = new java.lang.String[][][][][] { strArray53 };
        java.lang.String[][][][][][] strArray55 = new java.lang.String[][][][][][] { strArray48, strArray50, strArray52, strArray54 };
        java.lang.String[][][][][][][] strArray56 = new java.lang.String[][][][][][][] { strArray46, strArray55 };
        java.lang.String[][][][] strArray57 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray58 = new java.lang.String[][][][][] { strArray57 };
        java.lang.String[][][][] strArray59 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray60 = new java.lang.String[][][][][] { strArray59 };
        java.lang.String[][][][] strArray61 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray62 = new java.lang.String[][][][][] { strArray61 };
        java.lang.String[][][][] strArray63 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray64 = new java.lang.String[][][][][] { strArray63 };
        java.lang.String[][][][][][] strArray65 = new java.lang.String[][][][][][] { strArray58, strArray60, strArray62, strArray64 };
        java.lang.String[][][][] strArray66 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray67 = new java.lang.String[][][][][] { strArray66 };
        java.lang.String[][][][] strArray68 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray69 = new java.lang.String[][][][][] { strArray68 };
        java.lang.String[][][][] strArray70 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray71 = new java.lang.String[][][][][] { strArray70 };
        java.lang.String[][][][] strArray72 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray73 = new java.lang.String[][][][][] { strArray72 };
        java.lang.String[][][][][][] strArray74 = new java.lang.String[][][][][][] { strArray67, strArray69, strArray71, strArray73 };
        java.lang.String[][][][][][][] strArray75 = new java.lang.String[][][][][][][] { strArray65, strArray74 };
        java.lang.String[][][][][][][][] strArray76 = new java.lang.String[][][][][][][][] { strArray18, strArray37, strArray56, strArray75 };
        java.lang.String[][][][][][][][][] strArray77 = new java.lang.String[][][][][][][][][] { strArray76 };
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList78 = com.thealgorithms.backtracking.Permutation.permutation(strArray77);
        java.lang.Class<?> wildcardClass79 = strArray77.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArrayList78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3189");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = ofFieldArray7;
        wildcardClassOfFieldArray14[3] = ofFieldArray10;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
    }

    @Test
    public void test3190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3190");
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][] { strArray6 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] { strArray7 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray9, strArray10, strArray11, strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][] strArray16 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][] { strArray15 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] strArray17 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] { strArray16 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray19 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray21 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray22 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray23 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray18, strArray19, strArray20, strArray21, strArray22, strArray23 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][] strArray25 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][] { strArray24 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] strArray26 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] { strArray25 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] strArray27 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] { strArray8, strArray17, strArray26 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArray27);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArrayList28);
    }

    @Test
    public void test3191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3191");
        java.lang.Class[][][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test3192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3192");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass28 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test3193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3193");
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray0 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
    }

    @Test
    public void test3194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3194");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(objArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3195");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayIterableArrayList13.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3196");
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(typeArray5);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArrayList6);
    }

    @Test
    public void test3197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3197");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3198");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList36 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass37 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test3199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3199");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test3200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3200");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][] classArray4 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.lang.Class[][][][][][][][][][] classArray9 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray10 = (java.lang.Class<?>[][][][][][][][][][]) classArray9;
        java.lang.Class[][][][][][][][][][][] classArray12 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray13 = (java.lang.Class<?>[][][][][][][][][][][]) classArray12;
        wildcardClassArray13[0] = wildcardClassArray10;
        java.lang.Class[][][][][][][][][][] classArray17 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][][][][][][]) classArray17;
        java.lang.Class[][][][][][][][][][][] classArray20 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray18;
        java.lang.Class[][][][][][][][][][][][] classArray25 = new java.lang.Class[3][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray26 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray25;
        wildcardClassArray26[0] = wildcardClassArray5;
        wildcardClassArray26[1] = wildcardClassArray13;
        wildcardClassArray26[2] = wildcardClassArray21;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) wildcardClassArray26);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][]) wildcardClassArray26);
        java.lang.Class<?> wildcardClass36 = typeArrayList35.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClassArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClassArray13);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClassArray26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(typeArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test3201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3201");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassOfFieldArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3202");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] { permutationArray3, permutationArray7 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][]> permutationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray8);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][]> permutationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray8);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][]> permutationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray8);
        java.lang.Class<?> wildcardClass12 = permutationArray8.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArrayList9);
        org.junit.Assert.assertNotNull(permutationArrayList10);
        org.junit.Assert.assertNotNull(permutationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3203");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation3 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation5 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray6 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1, permutation2, permutation3, permutation4, permutation5 };
        com.thealgorithms.backtracking.Permutation permutation7 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation8 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation9 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation11 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation12 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray13 = new com.thealgorithms.backtracking.Permutation[] { permutation7, permutation8, permutation9, permutation10, permutation11, permutation12 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray6, permutationArray13 };
        com.thealgorithms.backtracking.Permutation permutation15 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation18 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation19 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation20 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray21 = new com.thealgorithms.backtracking.Permutation[] { permutation15, permutation16, permutation17, permutation18, permutation19, permutation20 };
        com.thealgorithms.backtracking.Permutation permutation22 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation23 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation24 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation25 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation26 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation27 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray28 = new com.thealgorithms.backtracking.Permutation[] { permutation22, permutation23, permutation24, permutation25, permutation26, permutation27 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray21, permutationArray28 };
        com.thealgorithms.backtracking.Permutation permutation30 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation31 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation32 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation33 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation34 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation35 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray36 = new com.thealgorithms.backtracking.Permutation[] { permutation30, permutation31, permutation32, permutation33, permutation34, permutation35 };
        com.thealgorithms.backtracking.Permutation permutation37 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation38 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation39 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation40 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation41 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation42 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray43 = new com.thealgorithms.backtracking.Permutation[] { permutation37, permutation38, permutation39, permutation40, permutation41, permutation42 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray44 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray36, permutationArray43 };
        com.thealgorithms.backtracking.Permutation permutation45 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation46 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation47 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation48 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation49 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation50 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray51 = new com.thealgorithms.backtracking.Permutation[] { permutation45, permutation46, permutation47, permutation48, permutation49, permutation50 };
        com.thealgorithms.backtracking.Permutation permutation52 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation53 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation54 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation55 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation56 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation57 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray58 = new com.thealgorithms.backtracking.Permutation[] { permutation52, permutation53, permutation54, permutation55, permutation56, permutation57 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray59 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray51, permutationArray58 };
        com.thealgorithms.backtracking.Permutation permutation60 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation61 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation62 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation63 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation64 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation65 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray66 = new com.thealgorithms.backtracking.Permutation[] { permutation60, permutation61, permutation62, permutation63, permutation64, permutation65 };
        com.thealgorithms.backtracking.Permutation permutation67 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation68 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation69 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation70 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation71 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation72 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray73 = new com.thealgorithms.backtracking.Permutation[] { permutation67, permutation68, permutation69, permutation70, permutation71, permutation72 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray74 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray66, permutationArray73 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray75 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray14, permutationArray29, permutationArray44, permutationArray59, permutationArray74 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList76 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray75);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList77 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray75);
        java.lang.Class<?> wildcardClass78 = permutationArray75.getClass();
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray43);
        org.junit.Assert.assertNotNull(permutationArray44);
        org.junit.Assert.assertNotNull(permutationArray51);
        org.junit.Assert.assertNotNull(permutationArray58);
        org.junit.Assert.assertNotNull(permutationArray59);
        org.junit.Assert.assertNotNull(permutationArray66);
        org.junit.Assert.assertNotNull(permutationArray73);
        org.junit.Assert.assertNotNull(permutationArray74);
        org.junit.Assert.assertNotNull(permutationArray75);
        org.junit.Assert.assertNotNull(permutationArrayList76);
        org.junit.Assert.assertNotNull(permutationArrayList77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test3204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3204");
        java.util.List[][][][][][][][] listArray1 = new java.util.List[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray1;
        java.util.List[][][][][][][][] listArray4 = new java.util.List[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray4;
        java.util.List[][][][][][][][] listArray7 = new java.util.List[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray7;
        java.util.List[][][][][][][][][] listArray10 = new java.util.List[3][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.lang.Class<?> wildcardClass19 = strArrayListArray11.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3205");
        java.lang.Class[][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3206");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList59 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList60 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(collectionArrayList59);
        org.junit.Assert.assertNotNull(strArrayListArrayList60);
    }

    @Test
    public void test3207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3207");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3208");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test3209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3209");
        com.thealgorithms.backtracking.Permutation[][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
    }

    @Test
    public void test3210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3210");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3211");
        java.lang.Class[][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][][][][] classArray4 = new java.lang.Class[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.lang.Class[][][][][][][][][][][][][][][] classArray9 = new java.lang.Class[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray10 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray9;
        java.lang.Class[][][][][][][][][][][][][][][][] classArray12 = new java.lang.Class[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][] wildcardClassArray13 = (java.lang.Class<?>[][][][][][][][][][][][][][][][]) classArray12;
        wildcardClassArray13[0] = wildcardClassArray10;
        java.lang.Class[][][][][][][][][][][][][][][] classArray17 = new java.lang.Class[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray17;
        java.lang.Class[][][][][][][][][][][][][][][][] classArray20 = new java.lang.Class[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][][][][][][][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray18;
        java.lang.Class[][][][][][][][][][][][][][][] classArray25 = new java.lang.Class[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray26 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray25;
        java.lang.Class[][][][][][][][][][][][][][][][] classArray28 = new java.lang.Class[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][] wildcardClassArray29 = (java.lang.Class<?>[][][][][][][][][][][][][][][][]) classArray28;
        wildcardClassArray29[0] = wildcardClassArray26;
        java.lang.Class[][][][][][][][][][][][][][][][][] classArray33 = new java.lang.Class[4][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][][][][][][][][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray5;
        wildcardClassArray34[1] = wildcardClassArray13;
        wildcardClassArray34[2] = wildcardClassArray21;
        wildcardClassArray34[3] = wildcardClassArray29;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][][]> wildcardClassArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray34);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][][]> wildcardClassArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray34);
        java.lang.Class<?> wildcardClass45 = wildcardClassArray34.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClassArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClassArray13);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClassArray26);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClassArray29);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(wildcardClassArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassArrayList44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test3212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3212");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass31 = strArrayListArrayList30.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(serializableArrayList25);
        org.junit.Assert.assertNotNull(strArrayListArrayList26);
        org.junit.Assert.assertNotNull(strArrayListArrayList27);
        org.junit.Assert.assertNotNull(serializableArrayList28);
        org.junit.Assert.assertNotNull(strArrayListArrayList29);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test3213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3213");
        java.lang.Class[][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3214");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
    }

    @Test
    public void test3215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3215");
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass30 = wildcardClassOfFieldArrayList29.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test3216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3216");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassOfFieldArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3217");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3218");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray5);
        java.lang.Class<?> wildcardClass10 = wildcardClassOfFieldArray5.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3219");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
    }

    @Test
    public void test3220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3220");
        java.lang.String[][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.lang.String[][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][] { strArray4 };
        java.lang.String[][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][][][][] { strArray6, strArray7, strArray8, strArray9 };
        java.lang.String[][][][][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][][][][] { strArray10 };
        java.lang.String[][][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray16 = new java.lang.String[][][][][][][][][][][][][][] { strArray12, strArray13, strArray14, strArray15 };
        java.lang.String[][][][][][][][][][][][][][][] strArray17 = new java.lang.String[][][][][][][][][][][][][][][] { strArray16 };
        java.lang.String[][][][][][][][][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray5, strArray11, strArray17 };
        java.lang.String[][][][][][][][][][][][][] strArray19 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray21 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray22 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray23 = new java.lang.String[][][][][][][][][][][][][][] { strArray19, strArray20, strArray21, strArray22 };
        java.lang.String[][][][][][][][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][][][][][][][] { strArray23 };
        java.lang.String[][][][][][][][][][][][][] strArray25 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray26 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray27 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray28 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray29 = new java.lang.String[][][][][][][][][][][][][][] { strArray25, strArray26, strArray27, strArray28 };
        java.lang.String[][][][][][][][][][][][][][][] strArray30 = new java.lang.String[][][][][][][][][][][][][][][] { strArray29 };
        java.lang.String[][][][][][][][][][][][][] strArray31 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray32 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray33 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray34 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray35 = new java.lang.String[][][][][][][][][][][][][][] { strArray31, strArray32, strArray33, strArray34 };
        java.lang.String[][][][][][][][][][][][][][][] strArray36 = new java.lang.String[][][][][][][][][][][][][][][] { strArray35 };
        java.lang.String[][][][][][][][][][][][][][][][] strArray37 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray24, strArray30, strArray36 };
        java.lang.String[][][][][][][][][][][][][] strArray38 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray39 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray40 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray41 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray42 = new java.lang.String[][][][][][][][][][][][][][] { strArray38, strArray39, strArray40, strArray41 };
        java.lang.String[][][][][][][][][][][][][][][] strArray43 = new java.lang.String[][][][][][][][][][][][][][][] { strArray42 };
        java.lang.String[][][][][][][][][][][][][] strArray44 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray45 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray46 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray47 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray48 = new java.lang.String[][][][][][][][][][][][][][] { strArray44, strArray45, strArray46, strArray47 };
        java.lang.String[][][][][][][][][][][][][][][] strArray49 = new java.lang.String[][][][][][][][][][][][][][][] { strArray48 };
        java.lang.String[][][][][][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray51 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray52 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray53 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray54 = new java.lang.String[][][][][][][][][][][][][][] { strArray50, strArray51, strArray52, strArray53 };
        java.lang.String[][][][][][][][][][][][][][][] strArray55 = new java.lang.String[][][][][][][][][][][][][][][] { strArray54 };
        java.lang.String[][][][][][][][][][][][][][][][] strArray56 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray43, strArray49, strArray55 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray57 = new java.lang.String[][][][][][][][][][][][][][][][][] { strArray18, strArray37, strArray56 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArray57);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArray57);
        java.lang.Class<?> wildcardClass60 = strArray57.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArrayList58);
        org.junit.Assert.assertNotNull(strArrayList59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test3221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3221");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList19 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList22 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(typeArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList22);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
    }

    @Test
    public void test3222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3222");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3223");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass26 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test3224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3224");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(serializableArrayList7);
    }

    @Test
    public void test3225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3225");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
    }

    @Test
    public void test3226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3226");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray24 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray25 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray24;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray27 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray28 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray27;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray30 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray31 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray30;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray33;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray36 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray37 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray36;
        wildcardClassOfFieldArray37[0] = wildcardClassOfFieldArray25;
        wildcardClassOfFieldArray37[1] = wildcardClassOfFieldArray28;
        wildcardClassOfFieldArray37[2] = wildcardClassOfFieldArray31;
        wildcardClassOfFieldArray37[3] = wildcardClassOfFieldArray34;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray47 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray48 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray47;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray50;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray53 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray54 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray53;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray56 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray57 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray56;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray59 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray60 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray59;
        wildcardClassOfFieldArray60[0] = wildcardClassOfFieldArray48;
        wildcardClassOfFieldArray60[1] = wildcardClassOfFieldArray51;
        wildcardClassOfFieldArray60[2] = wildcardClassOfFieldArray54;
        wildcardClassOfFieldArray60[3] = wildcardClassOfFieldArray57;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray70 = new java.lang.invoke.TypeDescriptor.OfField[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray71 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray70;
        wildcardClassOfFieldArray71[0] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray71[1] = wildcardClassOfFieldArray37;
        wildcardClassOfFieldArray71[2] = wildcardClassOfFieldArray60;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray71;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList84 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList86 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList87 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList88 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass89 = wildcardClassOfFieldArray80.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray25);
        org.junit.Assert.assertNotNull(ofFieldArray27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray28);
        org.junit.Assert.assertNotNull(ofFieldArray30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray31);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(ofFieldArray36);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray37);
        org.junit.Assert.assertNotNull(ofFieldArray47);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(ofFieldArray53);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray54);
        org.junit.Assert.assertNotNull(ofFieldArray56);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray57);
        org.junit.Assert.assertNotNull(ofFieldArray59);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray60);
        org.junit.Assert.assertNotNull(ofFieldArray70);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray71);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList85);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList86);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList87);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3227");
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass4 = typeArrayList3.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test3228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3228");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3229");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList36 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray23);
        java.lang.Class<?> wildcardClass37 = strArrayIterableArrayList36.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList34);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList35);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test3230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3230");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray5, permutationArray6, permutationArray7, permutationArray8 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray10, permutationArray11, permutationArray12, permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray15, permutationArray16, permutationArray17, permutationArray18 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray20, permutationArray21, permutationArray22, permutationArray23 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray4, permutationArray9, permutationArray14, permutationArray19, permutationArray24 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray25);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray25);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray25);
        java.lang.Class<?> wildcardClass29 = permutationArray25.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArrayList26);
        org.junit.Assert.assertNotNull(permutationArrayList27);
        org.junit.Assert.assertNotNull(permutationArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3231");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass28 = wildcardClassArrayList27.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test3232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3232");
        java.lang.String[][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test3233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3233");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
    }

    @Test
    public void test3234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3234");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.lang.Class<?> wildcardClass22 = wildcardClassArrayList21.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test3235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3235");
        java.lang.Class[][][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassArrayList3.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test3236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3236");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(charSequenceArrayList11);
        org.junit.Assert.assertNotNull(strComparableArrayList12);
        org.junit.Assert.assertNotNull(strComparableArrayList13);
        org.junit.Assert.assertNotNull(constantDescArrayList14);
        org.junit.Assert.assertNotNull(strArrayList15);
        org.junit.Assert.assertNotNull(charSequenceArrayList16);
    }

    @Test
    public void test3237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3237");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass11 = permutationArray2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
        org.junit.Assert.assertNotNull(permutationArrayList9);
        org.junit.Assert.assertNotNull(permutationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3238");
        java.lang.Class[][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassArrayList16);
    }

    @Test
    public void test3239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3239");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass17 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3240");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass17 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3241");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray5);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray5);
        java.lang.Class<?> wildcardClass8 = permutationArrayList7.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3242");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3243");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[3][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.lang.Object[]> objArrayList21 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.lang.Class<?> wildcardClass23 = strArrayListArrayList22.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(strArrayListArrayList19);
        org.junit.Assert.assertNotNull(strArrayListArrayList20);
        org.junit.Assert.assertNotNull(objArrayList21);
        org.junit.Assert.assertNotNull(strArrayListArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test3244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3244");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList22 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList22);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
    }

    @Test
    public void test3245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3245");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3246");
        java.lang.String[][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][] { strArray2 };
        java.lang.String[][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][] { strArray4, strArray5 };
        java.lang.String[][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][] { strArray6 };
        java.lang.String[][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][] { strArray8, strArray9 };
        java.lang.String[][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][] { strArray10 };
        java.lang.String[][][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][][] { strArray3, strArray7, strArray11 };
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3247");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
    }

    @Test
    public void test3248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3248");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3249");
        java.lang.String[][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4 };
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass7 = strArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3250");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass9 = permutationArray2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3251");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = typeArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3252");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = strArrayIterableArrayList58.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test3253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3253");
        java.util.List[][][][][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][][][][][][] listArray4 = new java.util.List[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][]) listArray4;
        java.util.List[][][][][][][][][][][][][][][] listArray7 = new java.util.List[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][]) listArray7;
        java.util.List[][][][][][][][][][][][][][][] listArray10 = new java.util.List[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][]) listArray10;
        java.util.List[][][][][][][][][][][][][][][] listArray13 = new java.util.List[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][]) listArray13;
        java.util.List[][][][][][][][][][][][][][][][] listArray16 = new java.util.List[5][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]) listArray16;
        strArrayListArray17[0] = strArrayListArray2;
        strArrayListArray17[1] = strArrayListArray5;
        strArrayListArray17[2] = strArrayListArray8;
        strArrayListArray17[3] = strArrayListArray11;
        strArrayListArray17[4] = strArrayListArray14;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]> strArrayListArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray17);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]> strArrayListArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray17);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray17);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(strArrayListArrayList28);
        org.junit.Assert.assertNotNull(strArrayListArrayList29);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
    }

    @Test
    public void test3254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3254");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
    }

    @Test
    public void test3255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3255");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
    }

    @Test
    public void test3256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3256");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
    }

    @Test
    public void test3257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3257");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
    }

    @Test
    public void test3258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3258");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
    }

    @Test
    public void test3259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3259");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = wildcardClassArrayList28.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3260");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = constableArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3261");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = serializableArrayList30.getClass();
        java.lang.constant.Constable[] constableArray32 = new java.lang.constant.Constable[] { wildcardClass31 };
        java.lang.constant.Constable[][] constableArray33 = new java.lang.constant.Constable[][] { constableArray32 };
        java.util.List<java.lang.constant.Constable[][]> constableArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(constableArray33);
        java.lang.Class<?> wildcardClass35 = constableArrayList34.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(serializableArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(constableArray32);
        org.junit.Assert.assertNotNull(constableArray33);
        org.junit.Assert.assertNotNull(constableArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test3262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3262");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass16 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(strArrayListArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3263");
        java.lang.String[][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] { strArray0 };
        java.lang.String[][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][] { strArray2 };
        java.lang.String[][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][] { strArray4 };
        java.lang.String[][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][] { strArray6 };
        java.lang.String[][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][] { strArray8 };
        java.lang.String[][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][] { strArray10 };
        java.lang.String[][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][] { strArray1, strArray3, strArray5, strArray7, strArray9, strArray11 };
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.io.Serializable[][]> serializableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) strArray12);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(serializableArrayList14);
        org.junit.Assert.assertNotNull(strArrayList15);
    }

    @Test
    public void test3264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3264");
        java.util.List[][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArrayList6.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3265");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3266");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
    }

    @Test
    public void test3267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3267");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3268");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass11 = strArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(objArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3269");
        java.lang.Class[][][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
    }

    @Test
    public void test3270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3270");
        java.lang.Class[][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][]> typeArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][][]) wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
        org.junit.Assert.assertNotNull(typeArrayList16);
    }

    @Test
    public void test3271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3271");
        java.lang.Class[][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][][][][] classArray13 = new java.lang.Class[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray13;
        java.lang.Class[][][][][][][][][][][][][][][] classArray16 = new java.lang.Class[5][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray17 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray16;
        wildcardClassArray17[0] = wildcardClassArray2;
        wildcardClassArray17[1] = wildcardClassArray5;
        wildcardClassArray17[2] = wildcardClassArray8;
        wildcardClassArray17[3] = wildcardClassArray11;
        wildcardClassArray17[4] = wildcardClassArray14;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray17);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(wildcardClassArray17);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
    }

    @Test
    public void test3272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3272");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray24 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray25 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray24;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray27 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray28 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray27;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray30 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray31 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray30;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray33;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][] ofFieldArray36 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray37 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]) ofFieldArray36;
        wildcardClassOfFieldArray37[0] = wildcardClassOfFieldArray25;
        wildcardClassOfFieldArray37[1] = wildcardClassOfFieldArray28;
        wildcardClassOfFieldArray37[2] = wildcardClassOfFieldArray31;
        wildcardClassOfFieldArray37[3] = wildcardClassOfFieldArray34;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][][] ofFieldArray47 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray48 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][]) ofFieldArray47;
        wildcardClassOfFieldArray48[0] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray48[1] = wildcardClassOfFieldArray37;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray48);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray48);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray48);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray25);
        org.junit.Assert.assertNotNull(ofFieldArray27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray28);
        org.junit.Assert.assertNotNull(ofFieldArray30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray31);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(ofFieldArray36);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray37);
        org.junit.Assert.assertNotNull(ofFieldArray47);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray48);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList53);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList54);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList55);
    }

    @Test
    public void test3273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3273");
        java.lang.String[][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][][] { strArray3, strArray4 };
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray2, strArray5 };
        java.lang.String[][][][][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][][][][][][][] { strArray7, strArray8 };
        java.lang.String[][][][][][][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][][][][][][] { strArray10, strArray11 };
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray9, strArray12 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray6, strArray13 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray14);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][]> strArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArray14);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][]> strArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArray14);
        java.lang.Class<?> wildcardClass18 = strArrayList17.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArrayList15);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(strArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3274");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
    }

    @Test
    public void test3275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3275");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
    }

    @Test
    public void test3276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3276");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][] classArray4 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.lang.Class[][][][][][][][][][] classArray9 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray10 = (java.lang.Class<?>[][][][][][][][][][]) classArray9;
        java.lang.Class[][][][][][][][][][][] classArray12 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray13 = (java.lang.Class<?>[][][][][][][][][][][]) classArray12;
        wildcardClassArray13[0] = wildcardClassArray10;
        java.lang.Class[][][][][][][][][][] classArray17 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][][][][][][]) classArray17;
        java.lang.Class[][][][][][][][][][][] classArray20 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray18;
        java.lang.Class[][][][][][][][][][][][] classArray25 = new java.lang.Class[3][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray26 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray25;
        wildcardClassArray26[0] = wildcardClassArray5;
        wildcardClassArray26[1] = wildcardClassArray13;
        wildcardClassArray26[2] = wildcardClassArray21;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) wildcardClassArray26);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList36 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList37 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) wildcardClassArray26);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClassArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClassArray13);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClassArray26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
        org.junit.Assert.assertNotNull(wildcardClassArrayList36);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList37);
    }

    @Test
    public void test3277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3277");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Object[]> objArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(objArrayList4);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3278");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList16);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList17);
    }

    @Test
    public void test3279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3279");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][] { strArray3, strArray4 };
        java.lang.String[][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][] { strArray2, strArray5 };
        java.lang.String[][][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][][] { strArray6 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass13 = strArray7.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(strArrayList11);
        org.junit.Assert.assertNotNull(strArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3280");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = strArrayIterableArrayList7.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3281");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList67 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList68 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList69 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass70 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList66);
        org.junit.Assert.assertNotNull(typeArrayList67);
        org.junit.Assert.assertNotNull(wildcardClassArrayList68);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test3282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3282");
        java.lang.reflect.Type[][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4, typeArray5 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.lang.Class<?> wildcardClass10 = typeArray6.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3283");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3284");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList66 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList67 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(wildcardClassArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassArrayList67);
    }

    @Test
    public void test3285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3285");
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
    }

    @Test
    public void test3286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3286");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
    }

    @Test
    public void test3287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3287");
        java.lang.reflect.Type[][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][] { typeArray0, typeArray1, typeArray2 };
        java.lang.reflect.Type[][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray7 = new java.lang.reflect.Type[][][][][][][][][] { typeArray4, typeArray5, typeArray6 };
        java.lang.reflect.Type[][][][][][][][] typeArray8 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray9 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray10 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray11 = new java.lang.reflect.Type[][][][][][][][][] { typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[][][][][][][][] typeArray12 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray13 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray14 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray15 = new java.lang.reflect.Type[][][][][][][][][] { typeArray12, typeArray13, typeArray14 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray16 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray3, typeArray7, typeArray11, typeArray15 };
        java.lang.reflect.Type[][][][][][][][] typeArray17 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray18 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray19 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray20 = new java.lang.reflect.Type[][][][][][][][][] { typeArray17, typeArray18, typeArray19 };
        java.lang.reflect.Type[][][][][][][][] typeArray21 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray22 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray23 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray24 = new java.lang.reflect.Type[][][][][][][][][] { typeArray21, typeArray22, typeArray23 };
        java.lang.reflect.Type[][][][][][][][] typeArray25 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray26 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray27 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray28 = new java.lang.reflect.Type[][][][][][][][][] { typeArray25, typeArray26, typeArray27 };
        java.lang.reflect.Type[][][][][][][][] typeArray29 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray30 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray31 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray32 = new java.lang.reflect.Type[][][][][][][][][] { typeArray29, typeArray30, typeArray31 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray33 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray20, typeArray24, typeArray28, typeArray32 };
        java.lang.reflect.Type[][][][][][][][] typeArray34 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray35 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray36 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray37 = new java.lang.reflect.Type[][][][][][][][][] { typeArray34, typeArray35, typeArray36 };
        java.lang.reflect.Type[][][][][][][][] typeArray38 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray39 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray40 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray41 = new java.lang.reflect.Type[][][][][][][][][] { typeArray38, typeArray39, typeArray40 };
        java.lang.reflect.Type[][][][][][][][] typeArray42 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray43 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray44 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray45 = new java.lang.reflect.Type[][][][][][][][][] { typeArray42, typeArray43, typeArray44 };
        java.lang.reflect.Type[][][][][][][][] typeArray46 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray47 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray48 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray49 = new java.lang.reflect.Type[][][][][][][][][] { typeArray46, typeArray47, typeArray48 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray50 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray37, typeArray41, typeArray45, typeArray49 };
        java.lang.reflect.Type[][][][][][][][] typeArray51 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray52 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray53 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray54 = new java.lang.reflect.Type[][][][][][][][][] { typeArray51, typeArray52, typeArray53 };
        java.lang.reflect.Type[][][][][][][][] typeArray55 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray56 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray57 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray58 = new java.lang.reflect.Type[][][][][][][][][] { typeArray55, typeArray56, typeArray57 };
        java.lang.reflect.Type[][][][][][][][] typeArray59 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray60 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray61 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray62 = new java.lang.reflect.Type[][][][][][][][][] { typeArray59, typeArray60, typeArray61 };
        java.lang.reflect.Type[][][][][][][][] typeArray63 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray64 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray65 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray66 = new java.lang.reflect.Type[][][][][][][][][] { typeArray63, typeArray64, typeArray65 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray67 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray54, typeArray58, typeArray62, typeArray66 };
        java.lang.reflect.Type[][][][][][][][][][][] typeArray68 = new java.lang.reflect.Type[][][][][][][][][][][] { typeArray16, typeArray33, typeArray50, typeArray67 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList69 = com.thealgorithms.backtracking.Permutation.permutation(typeArray68);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList70 = com.thealgorithms.backtracking.Permutation.permutation(typeArray68);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList71 = com.thealgorithms.backtracking.Permutation.permutation(typeArray68);
        java.lang.Class<?> wildcardClass72 = typeArrayList71.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(typeArrayList69);
        org.junit.Assert.assertNotNull(typeArrayList70);
        org.junit.Assert.assertNotNull(typeArrayList71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test3288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3288");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
    }

    @Test
    public void test3289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3289");
        java.lang.Class[][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][][]) wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
    }

    @Test
    public void test3290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3290");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass8 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constantDescArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3291");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.io.Serializable[]> serializableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(serializableArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
    }

    @Test
    public void test3292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3292");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3293");
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3294");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(typeArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
    }

    @Test
    public void test3295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3295");
        java.util.List[][][][][][][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
    }

    @Test
    public void test3296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3296");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList30);
        org.junit.Assert.assertNotNull(typeArrayList31);
        org.junit.Assert.assertNotNull(wildcardClassArrayList32);
    }

    @Test
    public void test3297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3297");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] { permutationArray3, permutationArray7 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][]> permutationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray8);
        java.lang.Class<?> wildcardClass10 = permutationArray8.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3298");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3299");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass7 = strArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3300");
        java.lang.reflect.Type[][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][] { typeArray0 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArrayList2.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test3301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3301");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass28 = wildcardClassOfFieldArrayList27.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test3302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3302");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList67 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList68 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList69 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList67);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList68);
        org.junit.Assert.assertNotNull(wildcardClassArrayList69);
    }

    @Test
    public void test3303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3303");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass26 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test3304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3304");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass15 = strArrayListArrayList14.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3305");
        java.util.List[][][][][][][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass4 = strArrayListArrayList3.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test3306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3306");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = typeArrayList26.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3307");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = wildcardClassOfFieldArrayList26.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3308");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][][][] permutationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3309");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0 };
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray1, permutationArray3 };
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray5 };
        com.thealgorithms.backtracking.Permutation[] permutationArray7 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray7 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray6, permutationArray8 };
        com.thealgorithms.backtracking.Permutation[] permutationArray10 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray10 };
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray11, permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray4, permutationArray9, permutationArray14 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.lang.Class<?> wildcardClass18 = permutationArrayList17.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArrayList16);
        org.junit.Assert.assertNotNull(permutationArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3310");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3311");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = genericDeclarationArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3312");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(charSequenceArrayList12);
        org.junit.Assert.assertNotNull(constantDescArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
    }

    @Test
    public void test3313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3313");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
    }

    @Test
    public void test3314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3314");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass14 = wildcardClassOfFieldArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3315");
        java.lang.Class[][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList16);
        org.junit.Assert.assertNotNull(wildcardClassArrayList17);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
    }

    @Test
    public void test3316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3316");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
    }

    @Test
    public void test3317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3317");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = typeDescriptorArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3318");
        java.lang.Class[][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test3319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3319");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(annotatedElementArrayList9);
        org.junit.Assert.assertNotNull(annotatedElementArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
    }

    @Test
    public void test3320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3320");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(annotatedElementArrayList8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3321");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
    }

    @Test
    public void test3322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3322");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3323");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3324");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
    }

    @Test
    public void test3325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3325");
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass3 = typeArrayList2.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test3326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3326");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][] classArray4 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.lang.Class[][][][][][][][][][] classArray9 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray10 = (java.lang.Class<?>[][][][][][][][][][]) classArray9;
        java.lang.Class[][][][][][][][][][][] classArray12 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray13 = (java.lang.Class<?>[][][][][][][][][][][]) classArray12;
        wildcardClassArray13[0] = wildcardClassArray10;
        java.lang.Class[][][][][][][][][][] classArray17 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][][][][][][]) classArray17;
        java.lang.Class[][][][][][][][][][][] classArray20 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray18;
        java.lang.Class[][][][][][][][][][][][] classArray25 = new java.lang.Class[3][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray26 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray25;
        wildcardClassArray26[0] = wildcardClassArray5;
        wildcardClassArray26[1] = wildcardClassArray13;
        wildcardClassArray26[2] = wildcardClassArray21;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) wildcardClassArray26);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) wildcardClassArray26);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList36 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][]) wildcardClassArray26);
        java.lang.Class<?> wildcardClass37 = wildcardClassArray26.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClassArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClassArray13);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClassArray26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
        org.junit.Assert.assertNotNull(typeArrayList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test3327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3327");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
    }

    @Test
    public void test3328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3328");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayIterableArrayList6.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3329");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList23 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.lang.Class<?> wildcardClass24 = typeArrayList23.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(wildcardClassArrayList22);
        org.junit.Assert.assertNotNull(typeArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test3330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3330");
        java.lang.String[][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray0 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray1 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray3 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray4 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray6 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray7 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray9 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray10 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray12 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray13 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray16 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray15 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray17 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray16 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray2, strArray5, strArray8, strArray11, strArray14, strArray17 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray19 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray19 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray21 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray20 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray22 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray23 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray22 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray23 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray25 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray26 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray25 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray27 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray26 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray28 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray29 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray28 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray30 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray29 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray31 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray32 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray31 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray33 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray32 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray34 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray35 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray34 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray36 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray35 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray37 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray21, strArray24, strArray27, strArray30, strArray33, strArray36 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray38 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray39 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray38 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray40 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray39 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray41 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray42 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray41 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray43 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray42 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray44 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray45 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray44 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray46 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray45 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray47 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray48 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray47 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray49 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray48 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray51 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray50 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray52 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray51 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray53 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray54 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray53 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray55 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray54 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray56 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray40, strArray43, strArray46, strArray49, strArray52, strArray55 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray57 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray58 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray57 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray59 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray58 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray60 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray61 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray60 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray62 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray61 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray63 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray64 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray63 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray65 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray64 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray66 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray67 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray66 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray68 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray67 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray69 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray70 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray69 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray71 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray70 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray72 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray73 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray72 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray74 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray73 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray75 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray59, strArray62, strArray65, strArray68, strArray71, strArray74 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray76 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray77 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray76 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray78 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray77 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray79 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray80 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray79 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray81 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray80 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray82 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray83 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray82 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray84 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray83 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray85 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray86 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray85 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray87 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray86 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray88 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray89 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray88 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray90 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray89 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray91 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray92 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray91 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray93 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray92 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray94 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray78, strArray81, strArray84, strArray87, strArray90, strArray93 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray95 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray18, strArray37, strArray56, strArray75, strArray94 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][]> strArrayList96 = com.thealgorithms.backtracking.Permutation.permutation(strArray95);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][]> strArrayList97 = com.thealgorithms.backtracking.Permutation.permutation(strArray95);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(strArrayList96);
        org.junit.Assert.assertNotNull(strArrayList97);
    }

    @Test
    public void test3331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3331");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.lang.Class<?> wildcardClass22 = wildcardClassArrayList21.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test3332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3332");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArrayList15.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3333");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass11 = strArrayIterableArrayList10.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3334");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
    }

    @Test
    public void test3335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3335");
        java.lang.String[][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.lang.Class<?> wildcardClass10 = strArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3336");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] { permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] { permutationArray12, permutationArray13, permutationArray14 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][]> permutationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray16);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][]> permutationArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray16);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][]> permutationArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray16);
        java.lang.Class<?> wildcardClass20 = permutationArrayList19.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArrayList17);
        org.junit.Assert.assertNotNull(permutationArrayList18);
        org.junit.Assert.assertNotNull(permutationArrayList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test3337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3337");
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray6, permutationArray7, permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray12, permutationArray13, permutationArray14, permutationArray15, permutationArray16 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray18, permutationArray19, permutationArray20, permutationArray21, permutationArray22 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray26 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray27 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray24, permutationArray25, permutationArray26, permutationArray27, permutationArray28 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray30 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] { permutationArray5, permutationArray11, permutationArray17, permutationArray23, permutationArray29 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList36 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.lang.Class<?> wildcardClass37 = permutationArray30.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArrayList31);
        org.junit.Assert.assertNotNull(permutationArrayList32);
        org.junit.Assert.assertNotNull(permutationArrayList33);
        org.junit.Assert.assertNotNull(permutationArrayList34);
        org.junit.Assert.assertNotNull(permutationArrayList35);
        org.junit.Assert.assertNotNull(permutationArrayList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test3338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3338");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray5);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray5);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
    }

    @Test
    public void test3339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3339");
        java.lang.Class[][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
    }

    @Test
    public void test3340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3340");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
    }

    @Test
    public void test3341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3341");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray4, strArray9, strArray14 };
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray20, strArray25, strArray30 };
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray36, strArray41, strArray46 };
        java.lang.String[][][] strArray48 = new java.lang.String[][][] { strArray15, strArray31, strArray47 };
        java.util.List<java.lang.String[][][]> strArrayList49 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList50 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.lang.Class<?> wildcardClass52 = strArrayList51.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArrayList49);
        org.junit.Assert.assertNotNull(strArrayList50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test3342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3342");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass15 = charSequenceArrayList14.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(charSequenceArrayList11);
        org.junit.Assert.assertNotNull(strComparableArrayList12);
        org.junit.Assert.assertNotNull(strComparableArrayList13);
        org.junit.Assert.assertNotNull(charSequenceArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3343");
        java.lang.String[][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test3344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3344");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
    }

    @Test
    public void test3345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3345");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Object[]> objArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(objArrayList15);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList16);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList17);
    }

    @Test
    public void test3346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3346");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][][] listArray10 = new java.util.List[3][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List[][][][][][] listArray19 = new java.util.List[1][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][][][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray11;
        java.util.List[][][][][][][] listArray24 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray25 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray24;
        strArrayListArray25[0] = strArrayListArray20;
        java.util.List[][][][][][][][] listArray29 = new java.util.List[1][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray30 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray29;
        strArrayListArray30[0] = strArrayListArray25;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray30);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray30);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray30);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList36 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray30);
        java.lang.Class<?> wildcardClass37 = strArrayListArray30.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayListArrayList34);
        org.junit.Assert.assertNotNull(strArrayListArrayList35);
        org.junit.Assert.assertNotNull(strArrayListArrayList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test3347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3347");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
    }

    @Test
    public void test3348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3348");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassArrayList29);
        org.junit.Assert.assertNotNull(typeArrayList30);
    }

    @Test
    public void test3349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3349");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
    }

    @Test
    public void test3350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3350");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(strArrayList30);
        org.junit.Assert.assertNotNull(constableArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArrayList34);
        org.junit.Assert.assertNotNull(constableArrayList35);
    }

    @Test
    public void test3351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3351");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
    }

    @Test
    public void test3352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3352");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0 };
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray1, permutationArray3 };
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray5 };
        com.thealgorithms.backtracking.Permutation[] permutationArray7 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray7 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray6, permutationArray8 };
        com.thealgorithms.backtracking.Permutation[] permutationArray10 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray10 };
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray11, permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray4, permutationArray9, permutationArray14 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<java.io.Serializable[][]> serializableArrayList18 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArrayList16);
        org.junit.Assert.assertNotNull(permutationArrayList17);
        org.junit.Assert.assertNotNull(serializableArrayList18);
    }

    @Test
    public void test3353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3353");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
    }

    @Test
    public void test3354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3354");
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
    }

    @Test
    public void test3355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3355");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList19 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(typeArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(wildcardClassArrayList22);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
    }

    @Test
    public void test3356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3356");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList61 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList64 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass65 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(collectionArrayList60);
        org.junit.Assert.assertNotNull(strArrayListArrayList61);
        org.junit.Assert.assertNotNull(strArrayListArrayList62);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList63);
        org.junit.Assert.assertNotNull(collectionArrayList64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test3357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3357");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray0, permutationArray1 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray3, permutationArray4 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray2, permutationArray5 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray7, permutationArray8 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray10, permutationArray11 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray9, permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray14, permutationArray15 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray17, permutationArray18 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray16, permutationArray19 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][] { permutationArray6, permutationArray13, permutationArray20 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray22, permutationArray23 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray26 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray27 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray25, permutationArray26 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray24, permutationArray27 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray30 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray31 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray29, permutationArray30 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray33 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray34 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray32, permutationArray33 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray35 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray31, permutationArray34 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray36 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray37 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray38 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray36, permutationArray37 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray39 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray40 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray41 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray39, permutationArray40 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray42 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray38, permutationArray41 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][] permutationArray43 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][] { permutationArray28, permutationArray35, permutationArray42 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray44 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray45 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray46 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray44, permutationArray45 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray47 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray48 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray49 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray47, permutationArray48 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray50 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray46, permutationArray49 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray51 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray52 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray53 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray51, permutationArray52 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray54 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray55 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray56 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray54, permutationArray55 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray57 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray53, permutationArray56 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray58 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray59 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray60 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray58, permutationArray59 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray61 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray62 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray63 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray61, permutationArray62 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray64 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray60, permutationArray63 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][] permutationArray65 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][] { permutationArray50, permutationArray57, permutationArray64 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray66 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray67 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray68 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray66, permutationArray67 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray69 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray70 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray71 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray69, permutationArray70 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray72 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray68, permutationArray71 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray73 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray74 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray75 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray73, permutationArray74 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray76 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray77 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray78 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray76, permutationArray77 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray79 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray75, permutationArray78 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray80 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray81 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray82 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray80, permutationArray81 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray83 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] permutationArray84 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray85 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] { permutationArray83, permutationArray84 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray86 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray82, permutationArray85 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][] permutationArray87 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][] { permutationArray72, permutationArray79, permutationArray86 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][][] permutationArray88 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][][] { permutationArray21, permutationArray43, permutationArray65, permutationArray87 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][][]> permutationArrayList89 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray88);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][][]> permutationArrayList90 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray88);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][][][]> permutationArrayList91 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray88);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray33);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray40);
        org.junit.Assert.assertNotNull(permutationArray41);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArray43);
        org.junit.Assert.assertNotNull(permutationArray44);
        org.junit.Assert.assertNotNull(permutationArray45);
        org.junit.Assert.assertNotNull(permutationArray46);
        org.junit.Assert.assertNotNull(permutationArray47);
        org.junit.Assert.assertNotNull(permutationArray48);
        org.junit.Assert.assertNotNull(permutationArray49);
        org.junit.Assert.assertNotNull(permutationArray50);
        org.junit.Assert.assertNotNull(permutationArray51);
        org.junit.Assert.assertNotNull(permutationArray52);
        org.junit.Assert.assertNotNull(permutationArray53);
        org.junit.Assert.assertNotNull(permutationArray54);
        org.junit.Assert.assertNotNull(permutationArray55);
        org.junit.Assert.assertNotNull(permutationArray56);
        org.junit.Assert.assertNotNull(permutationArray57);
        org.junit.Assert.assertNotNull(permutationArray58);
        org.junit.Assert.assertNotNull(permutationArray59);
        org.junit.Assert.assertNotNull(permutationArray60);
        org.junit.Assert.assertNotNull(permutationArray61);
        org.junit.Assert.assertNotNull(permutationArray62);
        org.junit.Assert.assertNotNull(permutationArray63);
        org.junit.Assert.assertNotNull(permutationArray64);
        org.junit.Assert.assertNotNull(permutationArray65);
        org.junit.Assert.assertNotNull(permutationArray66);
        org.junit.Assert.assertNotNull(permutationArray67);
        org.junit.Assert.assertNotNull(permutationArray68);
        org.junit.Assert.assertNotNull(permutationArray69);
        org.junit.Assert.assertNotNull(permutationArray70);
        org.junit.Assert.assertNotNull(permutationArray71);
        org.junit.Assert.assertNotNull(permutationArray72);
        org.junit.Assert.assertNotNull(permutationArray73);
        org.junit.Assert.assertNotNull(permutationArray74);
        org.junit.Assert.assertNotNull(permutationArray75);
        org.junit.Assert.assertNotNull(permutationArray76);
        org.junit.Assert.assertNotNull(permutationArray77);
        org.junit.Assert.assertNotNull(permutationArray78);
        org.junit.Assert.assertNotNull(permutationArray79);
        org.junit.Assert.assertNotNull(permutationArray80);
        org.junit.Assert.assertNotNull(permutationArray81);
        org.junit.Assert.assertNotNull(permutationArray82);
        org.junit.Assert.assertNotNull(permutationArray83);
        org.junit.Assert.assertNotNull(permutationArray84);
        org.junit.Assert.assertNotNull(permutationArray85);
        org.junit.Assert.assertNotNull(permutationArray86);
        org.junit.Assert.assertNotNull(permutationArray87);
        org.junit.Assert.assertNotNull(permutationArray88);
        org.junit.Assert.assertNotNull(permutationArrayList89);
        org.junit.Assert.assertNotNull(permutationArrayList90);
        org.junit.Assert.assertNotNull(permutationArrayList91);
    }

    @Test
    public void test3358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3358");
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
    }

    @Test
    public void test3359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3359");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
    }

    @Test
    public void test3360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3360");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList67 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass68 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test3361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3361");
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3 };
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray7 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray8 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray9 = new java.lang.reflect.Type[][][][][][][][][][][][][][] { typeArray5, typeArray6, typeArray7, typeArray8 };
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray10 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray11 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray12 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray13 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray14 = new java.lang.reflect.Type[][][][][][][][][][][][][][] { typeArray10, typeArray11, typeArray12, typeArray13 };
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray15 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray16 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray17 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray18 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray19 = new java.lang.reflect.Type[][][][][][][][][][][][][][] { typeArray15, typeArray16, typeArray17, typeArray18 };
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray20 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray21 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray22 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray23 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray24 = new java.lang.reflect.Type[][][][][][][][][][][][][][] { typeArray20, typeArray21, typeArray22, typeArray23 };
        java.lang.reflect.Type[][][][][][][][][][][][][][][] typeArray25 = new java.lang.reflect.Type[][][][][][][][][][][][][][][] { typeArray4, typeArray9, typeArray14, typeArray19, typeArray24 };
        java.lang.reflect.Type[][][][][][][][][][][][][][][][] typeArray26 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][] { typeArray25 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(typeArray26);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(typeArray26);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(typeArray26);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(typeArray26);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][]> typeArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(typeArray26);
        java.lang.Class<?> wildcardClass32 = typeArray26.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(typeArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test3362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3362");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList8);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
    }

    @Test
    public void test3363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3363");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3364");
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray0 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray2 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray4 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray6 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray1, strArray3, strArray5, strArray7 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray9 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray11 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray13 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray16 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray15 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray17 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray10, strArray12, strArray14, strArray16 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray19 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray18 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray21 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray20 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray22 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray23 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray22 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray25 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray24 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray26 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray19, strArray21, strArray23, strArray25 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray27 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray28 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray27 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray29 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray30 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray29 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray31 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray32 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray31 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray33 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray34 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray33 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray35 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray28, strArray30, strArray32, strArray34 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray36 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray37 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray36 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray38 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray39 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray38 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray40 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray41 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray40 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray42 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray43 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray42 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray44 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray37, strArray39, strArray41, strArray43 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][] strArray45 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][] { strArray8, strArray17, strArray26, strArray35, strArray44 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][]> strArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(strArray45);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][]> strArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(strArray45);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArrayList46);
        org.junit.Assert.assertNotNull(strArrayList47);
    }

    @Test
    public void test3365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3365");
        java.lang.Class[][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
    }

    @Test
    public void test3366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3366");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
    }

    @Test
    public void test3367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3367");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3368");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList59 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList60 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(collectionArrayList59);
        org.junit.Assert.assertNotNull(strArrayListArrayList60);
    }

    @Test
    public void test3369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3369");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass4 = permutationArray2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test3370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3370");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray5, permutationArray6, permutationArray7, permutationArray8 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray10, permutationArray11, permutationArray12, permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray15, permutationArray16, permutationArray17, permutationArray18 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray4, permutationArray9, permutationArray14, permutationArray19 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray21, permutationArray22, permutationArray23, permutationArray24 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray26 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray27 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray30 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray26, permutationArray27, permutationArray28, permutationArray29 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray31 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray33 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray34 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray35 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray31, permutationArray32, permutationArray33, permutationArray34 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray36 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray37 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray38 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray39 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray40 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray36, permutationArray37, permutationArray38, permutationArray39 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray41 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray25, permutationArray30, permutationArray35, permutationArray40 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray42 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray43 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray44 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray45 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray46 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray42, permutationArray43, permutationArray44, permutationArray45 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray47 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray48 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray49 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray50 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray51 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray47, permutationArray48, permutationArray49, permutationArray50 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray52 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray53 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray54 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray55 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray56 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray52, permutationArray53, permutationArray54, permutationArray55 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray57 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray58 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray59 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray60 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray61 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray57, permutationArray58, permutationArray59, permutationArray60 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray62 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray46, permutationArray51, permutationArray56, permutationArray61 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] permutationArray63 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] { permutationArray20, permutationArray41, permutationArray62 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][] permutationArray64 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][] { permutationArray63 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][]> permutationArrayList65 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray64);
        java.lang.Class<?> wildcardClass66 = permutationArrayList65.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray33);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray40);
        org.junit.Assert.assertNotNull(permutationArray41);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArray43);
        org.junit.Assert.assertNotNull(permutationArray44);
        org.junit.Assert.assertNotNull(permutationArray45);
        org.junit.Assert.assertNotNull(permutationArray46);
        org.junit.Assert.assertNotNull(permutationArray47);
        org.junit.Assert.assertNotNull(permutationArray48);
        org.junit.Assert.assertNotNull(permutationArray49);
        org.junit.Assert.assertNotNull(permutationArray50);
        org.junit.Assert.assertNotNull(permutationArray51);
        org.junit.Assert.assertNotNull(permutationArray52);
        org.junit.Assert.assertNotNull(permutationArray53);
        org.junit.Assert.assertNotNull(permutationArray54);
        org.junit.Assert.assertNotNull(permutationArray55);
        org.junit.Assert.assertNotNull(permutationArray56);
        org.junit.Assert.assertNotNull(permutationArray57);
        org.junit.Assert.assertNotNull(permutationArray58);
        org.junit.Assert.assertNotNull(permutationArray59);
        org.junit.Assert.assertNotNull(permutationArray60);
        org.junit.Assert.assertNotNull(permutationArray61);
        org.junit.Assert.assertNotNull(permutationArray62);
        org.junit.Assert.assertNotNull(permutationArray63);
        org.junit.Assert.assertNotNull(permutationArray64);
        org.junit.Assert.assertNotNull(permutationArrayList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test3371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3371");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
    }

    @Test
    public void test3372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3372");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass66 = typeArrayList65.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test3373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3373");
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.lang.Class<?> wildcardClass7 = permutationArray3.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3374");
        java.lang.String[][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4 };
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
    }

    @Test
    public void test3375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3375");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
    }

    @Test
    public void test3376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3376");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.lang.Object[]> objArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(strArrayListArrayList25);
        org.junit.Assert.assertNotNull(objArrayList26);
        org.junit.Assert.assertNotNull(strArrayListArrayList27);
        org.junit.Assert.assertNotNull(strArrayListArrayList28);
        org.junit.Assert.assertNotNull(strArrayListArrayList29);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
    }

    @Test
    public void test3377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3377");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList67 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList68 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList69 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassArrayList67);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList68);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList69);
    }

    @Test
    public void test3378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3378");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.lang.Class<?> wildcardClass7 = permutationArrayList6.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3379");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.io.Serializable[]> serializableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(serializableArrayList6);
    }

    @Test
    public void test3380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3380");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
    }

    @Test
    public void test3381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3381");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList16);
    }

    @Test
    public void test3382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3382");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(annotatedElementArrayList13);
    }

    @Test
    public void test3383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3383");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.lang.Class<?> wildcardClass7 = constableArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3384");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList31);
        org.junit.Assert.assertNotNull(typeArrayList32);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList33);
        org.junit.Assert.assertNotNull(typeArrayList34);
    }

    @Test
    public void test3385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3385");
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][] { strArray4 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass8 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3386");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.lang.Class<?> wildcardClass35 = strArray28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(constableArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test3387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3387");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
    }

    @Test
    public void test3388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3388");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
    }

    @Test
    public void test3389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3389");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[][]> serializableArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(serializableArrayList25);
        org.junit.Assert.assertNotNull(strArrayListArrayList26);
        org.junit.Assert.assertNotNull(serializableArrayList27);
        org.junit.Assert.assertNotNull(strArrayListArrayList28);
        org.junit.Assert.assertNotNull(strArrayListArrayList29);
    }

    @Test
    public void test3390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3390");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
    }

    @Test
    public void test3391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3391");
        java.lang.Class[][][][][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
    }

    @Test
    public void test3392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3392");
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.io.Serializable[]> serializableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(serializableArrayList29);
    }

    @Test
    public void test3393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3393");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3394");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test3395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3395");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray1 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray2 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray3 = new java.lang.String[][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][] strArray4 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray5 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray6 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray7 = new java.lang.String[][][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][][] strArray8 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray9 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray10 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray11 = new java.lang.String[][][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][] strArray12 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray13 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray14 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray15 = new java.lang.String[][][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][][] strArray16 = new java.lang.String[][][][][][][][] { strArray3, strArray7, strArray11, strArray15 };
        java.util.List<java.lang.String[][][][][][][][]> strArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.lang.Class<?> wildcardClass18 = strArray16.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test3396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3396");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.io.Serializable[][]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
    }

    @Test
    public void test3397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3397");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass10 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList8);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3398");
        java.lang.Class[][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
    }

    @Test
    public void test3399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3399");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List[][][][][][][] listArray4 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][][][] listArray9 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][][][]) listArray9;
        java.util.List[][][][][][][] listArray12 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray13 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray12;
        strArrayListArray13[0] = strArrayListArray10;
        java.util.List[][][][][][] listArray17 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][][][]) listArray17;
        java.util.List[][][][][][][] listArray20 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray18;
        java.util.List[][][][][][] listArray25 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][][][]) listArray25;
        java.util.List[][][][][][][] listArray28 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray29 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray28;
        strArrayListArray29[0] = strArrayListArray26;
        java.util.List[][][][][][] listArray33 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray34 = (java.util.List<java.lang.String[]>[][][][][][]) listArray33;
        java.util.List[][][][][][][] listArray36 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray37 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray36;
        strArrayListArray37[0] = strArrayListArray34;
        java.util.List[][][][][][][][] listArray41 = new java.util.List[5][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray42 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray41;
        strArrayListArray42[0] = strArrayListArray5;
        strArrayListArray42[1] = strArrayListArray13;
        strArrayListArray42[2] = strArrayListArray21;
        strArrayListArray42[3] = strArrayListArray29;
        strArrayListArray42[4] = strArrayListArray37;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.lang.Class<?> wildcardClass55 = strArrayListArrayList54.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray12);
        org.junit.Assert.assertNotNull(strArrayListArray13);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray28);
        org.junit.Assert.assertNotNull(strArrayListArray29);
        org.junit.Assert.assertNotNull(listArray33);
        org.junit.Assert.assertNotNull(strArrayListArray34);
        org.junit.Assert.assertNotNull(listArray36);
        org.junit.Assert.assertNotNull(strArrayListArray37);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(strArrayListArrayList53);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test3400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3400");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
    }

    @Test
    public void test3401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3401");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
        org.junit.Assert.assertNotNull(typeArrayList16);
    }

    @Test
    public void test3402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3402");
        com.thealgorithms.backtracking.Permutation[][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
    }

    @Test
    public void test3403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3403");
        java.util.List[][][][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
    }

    @Test
    public void test3404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3404");
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.lang.Class<?> wildcardClass6 = permutationArrayList5.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test3405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3405");
        java.lang.String[][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test3406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3406");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.io.Serializable[]> serializableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(serializableArrayList15);
    }

    @Test
    public void test3407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3407");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray4, strArray9, strArray14 };
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray20, strArray25, strArray30 };
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray36, strArray41, strArray46 };
        java.lang.String[][][] strArray48 = new java.lang.String[][][] { strArray15, strArray31, strArray47 };
        java.util.List<java.lang.String[][][]> strArrayList49 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList50 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray48);
        java.util.List<java.lang.Object[]> objArrayList51 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray48);
        java.lang.Class<?> wildcardClass52 = objArrayList51.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArrayList49);
        org.junit.Assert.assertNotNull(constableArrayList50);
        org.junit.Assert.assertNotNull(objArrayList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test3408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3408");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList60 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList61 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList62 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass65 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(strArrayListArrayList60);
        org.junit.Assert.assertNotNull(collectionArrayList61);
        org.junit.Assert.assertNotNull(collectionArrayList62);
        org.junit.Assert.assertNotNull(collectionArrayList63);
        org.junit.Assert.assertNotNull(strArrayListArrayList64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test3409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3409");
        java.util.List[][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3410");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
    }

    @Test
    public void test3411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3411");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList23 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(wildcardClassArrayList22);
        org.junit.Assert.assertNotNull(typeArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
    }

    @Test
    public void test3412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3412");
        java.lang.Class[][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassArrayList5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test3413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3413");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
    }

    @Test
    public void test3414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3414");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.lang.Class<?> wildcardClass21 = typeArrayList20.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(typeArrayList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3415");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3416");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass10 = strArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3417");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
    }

    @Test
    public void test3418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3418");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(strArrayListArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3419");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass9 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3420");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
    }

    @Test
    public void test3421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3421");
        java.util.List[][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][][][] listArray4 = new java.util.List[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray4;
        java.util.List[][][][][][][][][][][][] listArray7 = new java.util.List[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray7;
        java.util.List[][][][][][][][][][][][] listArray10 = new java.util.List[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray10;
        java.util.List[][][][][][][][][][][][] listArray13 = new java.util.List[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray13;
        java.util.List[][][][][][][][][][][][] listArray16 = new java.util.List[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray16;
        java.util.List[][][][][][][][][][][][][] listArray19 = new java.util.List[6][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray2;
        strArrayListArray20[1] = strArrayListArray5;
        strArrayListArray20[2] = strArrayListArray8;
        strArrayListArray20[3] = strArrayListArray11;
        strArrayListArray20[4] = strArrayListArray14;
        strArrayListArray20[5] = strArrayListArray17;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray20);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][]> strArrayListArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray20);
        java.lang.Class<?> wildcardClass35 = strArrayListArray20.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayListArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test3422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3422");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3423");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(serializableArrayList6);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
    }

    @Test
    public void test3424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3424");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray1 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray2 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray3 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray4 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray5 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray6 = new java.lang.String[][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[][][][] strArray7 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray8 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray9 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray10 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray11 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray12 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray13 = new java.lang.String[][][][][] { strArray7, strArray8, strArray9, strArray10, strArray11, strArray12 };
        java.lang.String[][][][] strArray14 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray15 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray16 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray17 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray18 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray19 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray20 = new java.lang.String[][][][][] { strArray14, strArray15, strArray16, strArray17, strArray18, strArray19 };
        java.lang.String[][][][] strArray21 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray22 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray23 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray25 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray26 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray27 = new java.lang.String[][][][][] { strArray21, strArray22, strArray23, strArray24, strArray25, strArray26 };
        java.lang.String[][][][] strArray28 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray29 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray30 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray31 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray32 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray33 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray34 = new java.lang.String[][][][][] { strArray28, strArray29, strArray30, strArray31, strArray32, strArray33 };
        java.lang.String[][][][][][] strArray35 = new java.lang.String[][][][][][] { strArray6, strArray13, strArray20, strArray27, strArray34 };
        java.lang.String[][][][] strArray36 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray37 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray38 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray39 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray40 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray41 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray42 = new java.lang.String[][][][][] { strArray36, strArray37, strArray38, strArray39, strArray40, strArray41 };
        java.lang.String[][][][] strArray43 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray44 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray45 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray46 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray47 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray48 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray49 = new java.lang.String[][][][][] { strArray43, strArray44, strArray45, strArray46, strArray47, strArray48 };
        java.lang.String[][][][] strArray50 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray51 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray52 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray53 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray54 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray55 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray56 = new java.lang.String[][][][][] { strArray50, strArray51, strArray52, strArray53, strArray54, strArray55 };
        java.lang.String[][][][] strArray57 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray58 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray59 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray60 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray61 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray62 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray63 = new java.lang.String[][][][][] { strArray57, strArray58, strArray59, strArray60, strArray61, strArray62 };
        java.lang.String[][][][] strArray64 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray65 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray66 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray67 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray68 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray69 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray70 = new java.lang.String[][][][][] { strArray64, strArray65, strArray66, strArray67, strArray68, strArray69 };
        java.lang.String[][][][][][] strArray71 = new java.lang.String[][][][][][] { strArray42, strArray49, strArray56, strArray63, strArray70 };
        java.lang.String[][][][][][][] strArray72 = new java.lang.String[][][][][][][] { strArray35, strArray71 };
        java.util.List<java.lang.String[][][][][][][]> strArrayList73 = com.thealgorithms.backtracking.Permutation.permutation(strArray72);
        java.util.List<java.lang.String[][][][][][][]> strArrayList74 = com.thealgorithms.backtracking.Permutation.permutation(strArray72);
        java.util.List<java.lang.String[][][][][][][]> strArrayList75 = com.thealgorithms.backtracking.Permutation.permutation(strArray72);
        java.util.List<java.lang.String[][][][][][][]> strArrayList76 = com.thealgorithms.backtracking.Permutation.permutation(strArray72);
        java.lang.Class<?> wildcardClass77 = strArray72.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArrayList73);
        org.junit.Assert.assertNotNull(strArrayList74);
        org.junit.Assert.assertNotNull(strArrayList75);
        org.junit.Assert.assertNotNull(strArrayList76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test3425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3425");
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.lang.Class<?> wildcardClass10 = permutationArray4.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
        org.junit.Assert.assertNotNull(permutationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3426");
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
    }

    @Test
    public void test3427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3427");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass3 = permutationArrayList2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test3428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3428");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(constantDescArrayList8);
    }

    @Test
    public void test3429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3429");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.lang.Class<?> wildcardClass36 = strArrayListArrayList35.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList34);
        org.junit.Assert.assertNotNull(strArrayListArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test3430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3430");
        java.util.List[][][][][][][] listArray1 = new java.util.List[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray1;
        java.util.List[][][][][][][] listArray4 = new java.util.List[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray4;
        java.util.List[][][][][][][][] listArray7 = new java.util.List[2][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray7;
        strArrayListArray8[0] = strArrayListArray2;
        strArrayListArray8[1] = strArrayListArray5;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.lang.Class<?> wildcardClass21 = strArrayListArrayList20.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(strArrayListArrayList15);
        org.junit.Assert.assertNotNull(strArrayListArrayList16);
        org.junit.Assert.assertNotNull(strArrayListArrayList17);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(strArrayListArrayList19);
        org.junit.Assert.assertNotNull(strArrayListArrayList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3431");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
    }

    @Test
    public void test3432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3432");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = typeArrayList5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test3433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3433");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.lang.Object[]> objArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.lang.Object[]> objArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray14);
        java.lang.Class<?> wildcardClass30 = strArrayListArray14.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(strArrayListArrayList25);
        org.junit.Assert.assertNotNull(objArrayList26);
        org.junit.Assert.assertNotNull(strArrayListArrayList27);
        org.junit.Assert.assertNotNull(strArrayListArrayList28);
        org.junit.Assert.assertNotNull(objArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test3434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3434");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassOfFieldArrayList3.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test3435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3435");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList66 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList67 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList68 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList69 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList70 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList71 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList65);
        org.junit.Assert.assertNotNull(wildcardClassArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList67);
        org.junit.Assert.assertNotNull(typeArrayList68);
        org.junit.Assert.assertNotNull(wildcardClassArrayList69);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList70);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList71);
    }

    @Test
    public void test3436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3436");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(serializableArrayList6);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList7);
        org.junit.Assert.assertNotNull(collectionArrayList8);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
    }

    @Test
    public void test3437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3437");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList36 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray23);
        java.lang.Class<?> wildcardClass37 = strArrayIterableArrayList36.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList33);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList34);
        org.junit.Assert.assertNotNull(strArrayListArrayList35);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test3438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3438");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(annotatedElementArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(serializableArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3439");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3440");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass35 = typeDescriptorArrayList34.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList31);
        org.junit.Assert.assertNotNull(typeArrayList32);
        org.junit.Assert.assertNotNull(wildcardClassArrayList33);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test3441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3441");
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
    }

    @Test
    public void test3442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3442");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
    }

    @Test
    public void test3443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3443");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(strArrayListArrayList15);
        org.junit.Assert.assertNotNull(strArrayListArrayList16);
    }

    @Test
    public void test3444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3444");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = typeDescriptorArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3445");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3446");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass5 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test3447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3447");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
    }

    @Test
    public void test3448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3448");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
    }

    @Test
    public void test3449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3449");
        java.lang.String[][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass4 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test3450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3450");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][][] listArray10 = new java.util.List[3][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List[][][][][][] listArray19 = new java.util.List[1][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][][][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray11;
        java.util.List[][][][][][][] listArray24 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray25 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray24;
        strArrayListArray25[0] = strArrayListArray20;
        java.util.List[][][][][][][][] listArray29 = new java.util.List[1][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray30 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray29;
        strArrayListArray30[0] = strArrayListArray25;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray30);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray30);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray30);
        java.lang.Class<?> wildcardClass36 = strArrayListArrayList35.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayListArrayList34);
        org.junit.Assert.assertNotNull(strArrayListArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test3451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3451");
        java.lang.Class[][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][]> typeArrayList18 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.lang.Class<?> wildcardClass19 = wildcardClassArray8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassArrayList16);
        org.junit.Assert.assertNotNull(wildcardClassArrayList17);
        org.junit.Assert.assertNotNull(typeArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3452");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.util.List<java.lang.String[]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
    }

    @Test
    public void test3453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3453");
        java.lang.Class[][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
    }

    @Test
    public void test3454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3454");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.lang.Class<?> wildcardClass9 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constantDescArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3455");
        java.util.List[][][][][][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
    }

    @Test
    public void test3456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3456");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[3][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray25;
        wildcardClassOfFieldArray26[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray26[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray26[2] = wildcardClassOfFieldArray21;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray34 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray35 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray34;
        wildcardClassOfFieldArray35[0] = wildcardClassOfFieldArray26;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray35);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList39 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray35);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList40 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray35);
        java.lang.Class<?> wildcardClass41 = wildcardClassOfFieldArrayList40.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray35);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList38);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList39);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test3457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3457");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass32 = genericDeclarationArrayList31.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test3458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3458");
        java.lang.Class[][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = typeArrayList26.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3459");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] { permutation0 };
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray3 = new com.thealgorithms.backtracking.Permutation[] { permutation2 };
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] { permutation4 };
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray7 = new com.thealgorithms.backtracking.Permutation[] { permutation6 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray1, permutationArray3, permutationArray5, permutationArray7 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray8 };
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray11 = new com.thealgorithms.backtracking.Permutation[] { permutation10 };
        com.thealgorithms.backtracking.Permutation permutation12 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray13 = new com.thealgorithms.backtracking.Permutation[] { permutation12 };
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray17 = new com.thealgorithms.backtracking.Permutation[] { permutation16 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray11, permutationArray13, permutationArray15, permutationArray17 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray18 };
        com.thealgorithms.backtracking.Permutation permutation20 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray21 = new com.thealgorithms.backtracking.Permutation[] { permutation20 };
        com.thealgorithms.backtracking.Permutation permutation22 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray23 = new com.thealgorithms.backtracking.Permutation[] { permutation22 };
        com.thealgorithms.backtracking.Permutation permutation24 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] { permutation24 };
        com.thealgorithms.backtracking.Permutation permutation26 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray27 = new com.thealgorithms.backtracking.Permutation[] { permutation26 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray21, permutationArray23, permutationArray25, permutationArray27 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray28 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray30 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray9, permutationArray19, permutationArray29 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.lang.Class<?> wildcardClass32 = permutationArrayList31.getClass();
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test3460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3460");
        java.lang.Class[][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][][][][] classArray4 = new java.lang.Class[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.lang.Class[][][][][][][][][][][][][][][] classArray9 = new java.lang.Class[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray10 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray9;
        java.lang.Class[][][][][][][][][][][][][][][][] classArray12 = new java.lang.Class[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][] wildcardClassArray13 = (java.lang.Class<?>[][][][][][][][][][][][][][][][]) classArray12;
        wildcardClassArray13[0] = wildcardClassArray10;
        java.lang.Class[][][][][][][][][][][][][][][] classArray17 = new java.lang.Class[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray17;
        java.lang.Class[][][][][][][][][][][][][][][][] classArray20 = new java.lang.Class[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][][][][][][][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray18;
        java.lang.Class[][][][][][][][][][][][][][][] classArray25 = new java.lang.Class[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray26 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray25;
        java.lang.Class[][][][][][][][][][][][][][][][] classArray28 = new java.lang.Class[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][] wildcardClassArray29 = (java.lang.Class<?>[][][][][][][][][][][][][][][][]) classArray28;
        wildcardClassArray29[0] = wildcardClassArray26;
        java.lang.Class[][][][][][][][][][][][][][][][][] classArray33 = new java.lang.Class[4][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][][][][][][][][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray5;
        wildcardClassArray34[1] = wildcardClassArray13;
        wildcardClassArray34[2] = wildcardClassArray21;
        wildcardClassArray34[3] = wildcardClassArray29;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][][]> wildcardClassArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray34);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][]> typeArrayList44 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][][][][][]) wildcardClassArray34);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][][]> wildcardClassArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList46 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]) wildcardClassArray34);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][][]> wildcardClassArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClassArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClassArray13);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClassArray26);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClassArray29);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(wildcardClassArrayList43);
        org.junit.Assert.assertNotNull(typeArrayList44);
        org.junit.Assert.assertNotNull(wildcardClassArrayList45);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList46);
        org.junit.Assert.assertNotNull(wildcardClassArrayList47);
    }

    @Test
    public void test3461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3461");
        java.lang.Class[][][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
    }

    @Test
    public void test3462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3462");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
    }

    @Test
    public void test3463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3463");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
        org.junit.Assert.assertNotNull(constableArrayList16);
    }

    @Test
    public void test3464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3464");
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3 };
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][][][] { typeArray4 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(typeArray5);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray5);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
    }

    @Test
    public void test3465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3465");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
    }

    @Test
    public void test3466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3466");
        java.lang.reflect.Type[][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][] { typeArray0, typeArray1, typeArray2 };
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
    }

    @Test
    public void test3467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3467");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.String[]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass16 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(charSequenceArrayList12);
        org.junit.Assert.assertNotNull(strComparableArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(strArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3468");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.Object[]> objArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassOfFieldArray14);
        java.lang.Class<?> wildcardClass26 = objArrayList25.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(objArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test3469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3469");
        java.lang.Class[][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
    }

    @Test
    public void test3470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3470");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass15 = strArrayCollectionArrayList14.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(strArrayListArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3471");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass34 = wildcardClassOfFieldArrayList33.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test3472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3472");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(charSequenceArrayList5);
        org.junit.Assert.assertNotNull(constantDescArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
    }

    @Test
    public void test3473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3473");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass28 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test3474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3474");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.String[]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Object[]> objArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.lang.Class<?> wildcardClass11 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(objArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3475");
        com.thealgorithms.backtracking.Permutation[][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass5 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test3476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3476");
        java.lang.Class[][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
    }

    @Test
    public void test3477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3477");
        java.lang.String[][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
    }

    @Test
    public void test3478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3478");
        java.lang.Class[][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
    }

    @Test
    public void test3479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3479");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] { permutationArray3, permutationArray7 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][]> permutationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray8);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][]> permutationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray8);
        java.lang.Class<?> wildcardClass11 = permutationArrayList10.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArrayList9);
        org.junit.Assert.assertNotNull(permutationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3480");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3481");
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray0 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray2 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray4 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray6 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray8 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][] { strArray1, strArray3, strArray5, strArray7, strArray9 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray11 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray13 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray16 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray15 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray17 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray17 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray19 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray19 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][] strArray21 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][] { strArray12, strArray14, strArray16, strArray18, strArray20 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] strArray22 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] { strArray10, strArray21 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][]> strArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArray22);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][]> strArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArray22);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][]> strArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArray22);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][]> strArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(strArray22);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArrayList23);
        org.junit.Assert.assertNotNull(strArrayList24);
        org.junit.Assert.assertNotNull(strArrayList25);
        org.junit.Assert.assertNotNull(strArrayList26);
    }

    @Test
    public void test3482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3482");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(annotatedElementArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
    }

    @Test
    public void test3483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3483");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassArrayList16);
    }

    @Test
    public void test3484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3484");
        java.util.List[][][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][][][][] listArray4 = new java.util.List[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][]) listArray4;
        java.util.List[][][][][][][][][][][][][] listArray7 = new java.util.List[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][]) listArray7;
        java.util.List[][][][][][][][][][][][][][] listArray10 = new java.util.List[3][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List[][][][][][][][][][][][][] listArray19 = new java.util.List[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][]) listArray19;
        java.util.List[][][][][][][][][][][][][] listArray22 = new java.util.List[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][] strArrayListArray23 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][]) listArray22;
        java.util.List[][][][][][][][][][][][][] listArray25 = new java.util.List[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][]) listArray25;
        java.util.List[][][][][][][][][][][][][][] listArray28 = new java.util.List[3][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][] strArrayListArray29 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][]) listArray28;
        strArrayListArray29[0] = strArrayListArray20;
        strArrayListArray29[1] = strArrayListArray23;
        strArrayListArray29[2] = strArrayListArray26;
        java.util.List[][][][][][][][][][][][][][][] listArray37 = new java.util.List[2][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][] strArrayListArray38 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][]) listArray37;
        strArrayListArray38[0] = strArrayListArray11;
        strArrayListArray38[1] = strArrayListArray29;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][]> strArrayListArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray38);
        java.lang.Class<?> wildcardClass44 = strArrayListArrayList43.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray28);
        org.junit.Assert.assertNotNull(strArrayListArray29);
        org.junit.Assert.assertNotNull(listArray37);
        org.junit.Assert.assertNotNull(strArrayListArray38);
        org.junit.Assert.assertNotNull(strArrayListArrayList43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test3485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3485");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][] { strArray3, strArray4 };
        java.lang.String[][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][] { strArray2, strArray5 };
        java.lang.String[][][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][][] { strArray6 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass16 = strArray7.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(strArrayList11);
        org.junit.Assert.assertNotNull(strArrayList12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(strArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3486");
        java.lang.Class[][][][][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
    }

    @Test
    public void test3487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3487");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3488");
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
    }

    @Test
    public void test3489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3489");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test3490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3490");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
    }

    @Test
    public void test3491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3491");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[1][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        java.lang.Class<?> wildcardClass9 = strArrayListArray5.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3492");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = typeArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test3493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3493");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList67 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass68 = typeArrayList67.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(typeArrayList67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test3494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3494");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List[] listArray7 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        strArrayListArray8[0] = strArrayList5;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray8);
        java.lang.Class<?> wildcardClass13 = strArrayCollectionArrayList12.getClass();
        java.util.Collection[] collectionArray15 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray16 = (java.util.Collection<java.lang.String[]>[]) collectionArray15;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray15);
        java.lang.Class<?> wildcardClass18 = collectionArray15.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.lang.Class<?> wildcardClass23 = strArrayList22.getClass();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArrayList27.getClass();
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { wildcardClass18, wildcardClass23, wildcardClass28 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArrayList30.getClass();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArray34);
        java.lang.Class<?> wildcardClass36 = strArray34.getClass();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(strArray44);
        java.lang.Class<?> wildcardClass46 = strArrayList45.getClass();
        java.lang.constant.Constable[] constableArray47 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass46 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(constableArray47);
        java.lang.Class<?> wildcardClass49 = constableArray47.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray51 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray52 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray51;
        wildcardClassOfFieldArray52[0] = wildcardClass36;
        wildcardClassOfFieldArray52[1] = wildcardClass49;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray52);
        java.lang.Class<?> wildcardClass58 = wildcardClassOfFieldArray52.getClass();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArray61);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray61);
        java.lang.Class<?> wildcardClass64 = strArray61.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray66 = new java.lang.invoke.TypeDescriptor.OfField[5];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray67 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray66;
        wildcardClassOfFieldArray67[0] = wildcardClass1;
        wildcardClassOfFieldArray67[1] = wildcardClass13;
        wildcardClassOfFieldArray67[2] = wildcardClass31;
        wildcardClassOfFieldArray67[3] = wildcardClass58;
        wildcardClassOfFieldArray67[4] = wildcardClass64;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray67;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList84 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList86 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass87 = wildcardClassOfFieldArray80.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(collectionArray15);
        org.junit.Assert.assertNotNull(strArrayCollectionArray16);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(constableArray47);
        org.junit.Assert.assertNotNull(constableArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(ofFieldArray51);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray52);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArrayList62);
        org.junit.Assert.assertNotNull(strComparableArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(ofFieldArray66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray67);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList85);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3495");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test3496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3496");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList15);
        org.junit.Assert.assertNotNull(strArrayListArrayList16);
    }

    @Test
    public void test3497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3497");
        java.lang.Class[][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass5 = typeArrayList4.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test3498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3498");
        java.util.List[][][][][][][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
    }

    @Test
    public void test3499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3499");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass32 = wildcardClassArrayList31.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test3500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3500");
        java.lang.Class[][][][][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][][][][][][][] classArray4 = new java.lang.Class[1][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][][][][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
    }
}


package ADTFraction;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        int int16 = aDTFraction15.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction22.times((int) (byte) 100);
        java.lang.String str29 = aDTFraction22.toString();
        int int30 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        int int48 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction54.times((int) (byte) 100);
        java.lang.String str61 = aDTFraction54.toString();
        int int62 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction54.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction33.plus(aDTFraction64);
        int int66 = aDTFraction64.denominator();
        boolean boolean68 = aDTFraction64.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction22.times(aDTFraction64);
        boolean boolean70 = aDTFraction15.equals((java.lang.Object) aDTFraction69);
        int int71 = aDTFraction69.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction69.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction69.times(0);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction75);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        int int4 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        boolean boolean14 = aDTFraction10.equals((java.lang.Object) ' ');
        boolean boolean16 = aDTFraction10.equals((java.lang.Object) "");
        int int17 = aDTFraction10.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        boolean boolean34 = aDTFraction26.equals((java.lang.Object) aDTFraction32);
        java.lang.String str35 = aDTFraction32.toString();
        java.lang.String str36 = aDTFraction32.toString();
        float float37 = aDTFraction32.value();
        boolean boolean38 = aDTFraction10.equals((java.lang.Object) float37);
        int int39 = aDTFraction10.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction10.times((-100));
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction2.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction41.times((int) (short) 1);
        java.lang.Class<?> wildcardClass46 = aDTFraction41.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        int int38 = aDTFraction34.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction8.times(aDTFraction25);
        java.lang.String str41 = aDTFraction8.toString();
        float float42 = aDTFraction8.value();
        float float43 = aDTFraction8.value();
        java.lang.String str44 = aDTFraction8.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        java.lang.String str23 = aDTFraction15.toString();
        java.lang.String str24 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        float float29 = aDTFraction27.value();
        float float30 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        int int39 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction33.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        int int52 = aDTFraction46.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction42.times(aDTFraction46);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction53.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int60 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction53.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction64.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int77 = aDTFraction76.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction64.times(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction64.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction79.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction61.plus(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction79.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction27.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction15.plus(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction84.times((int) (byte) 100);
        float float87 = aDTFraction86.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 1.0f + "'", float29 == 1.0f);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 1.0f + "'", float30 == 1.0f);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 0.0f + "'", float54 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + (-100.0f) + "'", float87 == (-100.0f));
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction30.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        boolean boolean60 = aDTFraction54.equals((java.lang.Object) "");
        java.lang.String str61 = aDTFraction54.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction48.times(aDTFraction54);
        float float63 = aDTFraction62.value();
        java.lang.String str64 = aDTFraction62.toString();
        int int65 = aDTFraction62.denominator();
        boolean boolean66 = aDTFraction20.equals((java.lang.Object) int65);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        int int75 = aDTFraction69.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction69.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        int int88 = aDTFraction82.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction78.times(aDTFraction82);
        java.lang.String str90 = aDTFraction82.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction82.times((int) (byte) -1);
        int int93 = aDTFraction92.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction20.plus(aDTFraction92);
        java.lang.String str95 = aDTFraction92.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction92.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-100" + "'", str64, "0/-100");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-100) + "'", int65 == (-100));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0/-1" + "'", str90, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "0/-1" + "'", str95, "0/-1");
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-35), (-52));
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean90 = aDTFraction88.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction85.plus(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = new com.thealgorithms.maths.ADTFraction(97, (int) (byte) 100);
        float float95 = aDTFraction94.value();
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction94.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction91.plus(aDTFraction96);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + float95 + "' != '" + 0.97f + "'", float95 == 0.97f);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction97);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        boolean boolean41 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        java.lang.String str42 = aDTFraction39.toString();
        java.lang.String str43 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction54.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction69.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction39.times(aDTFraction71);
        boolean boolean73 = aDTFraction22.equals((java.lang.Object) aDTFraction71);
        int int74 = aDTFraction22.numerator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) '#');
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.028571429f) + "'", float3 == (-0.028571429f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.028571429f) + "'", float4 == (-0.028571429f));
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        java.lang.String str23 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int49 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction36.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction33.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction33.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction33.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction15.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (-10000));
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        int int68 = aDTFraction62.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction62.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        boolean boolean80 = aDTFraction76.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction76.times((int) (byte) 100);
        float float83 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction62.plus(aDTFraction76);
        float float85 = aDTFraction76.value();
        java.lang.String str86 = aDTFraction76.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction76.times((-1));
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction59.times(aDTFraction88);
        boolean boolean90 = aDTFraction33.equals((java.lang.Object) aDTFraction88);
        int int91 = aDTFraction33.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.reciprocal();
        int int7 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        boolean boolean19 = aDTFraction15.equals((java.lang.Object) ' ');
        boolean boolean21 = aDTFraction15.equals((java.lang.Object) "");
        java.lang.String str22 = aDTFraction15.toString();
        int int23 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        boolean boolean33 = aDTFraction29.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction29.times((int) (byte) 100);
        java.lang.String str36 = aDTFraction29.toString();
        int int37 = aDTFraction29.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction29.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction29.times((int) (byte) 10);
        boolean boolean42 = aDTFraction15.equals((java.lang.Object) aDTFraction41);
        int int43 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction41.times((int) (byte) 1);
        int int46 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        boolean boolean63 = aDTFraction55.equals((java.lang.Object) aDTFraction61);
        java.lang.String str64 = aDTFraction61.toString();
        java.lang.String str65 = aDTFraction61.toString();
        float float66 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction41.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction70.times(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float83 = aDTFraction82.value();
        boolean boolean84 = aDTFraction76.equals((java.lang.Object) aDTFraction82);
        java.lang.String str85 = aDTFraction82.toString();
        java.lang.String str86 = aDTFraction82.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float90 = aDTFraction89.value();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction82.times(aDTFraction89);
        boolean boolean92 = aDTFraction61.equals((java.lang.Object) aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction9.plus(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction9.reciprocal();
        int int95 = aDTFraction9.denominator();
        int int96 = aDTFraction9.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0/-1" + "'", str22, "0/-1");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-1" + "'", str64, "0/-1");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0/-1" + "'", str65, "0/-1");
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0/-1" + "'", str85, "0/-1");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertTrue("'" + float90 + "' != '" + (-0.0f) + "'", float90 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-100) + "'", int96 == (-100));
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        float float17 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(35, 52);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction20.reciprocal();
        int int22 = aDTFraction20.numerator();
        float float23 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction11.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction30.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        int int43 = aDTFraction37.numerator();
        boolean boolean45 = aDTFraction37.equals((java.lang.Object) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction30.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction11.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction11.times((int) (byte) 10);
        java.lang.Object obj52 = null;
        boolean boolean53 = aDTFraction11.equals(obj52);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.6730769f + "'", float23 == 0.6730769f);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        java.lang.String str13 = aDTFraction8.toString();
        float float14 = aDTFraction8.value();
        java.lang.String str15 = aDTFraction8.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction18.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        int int35 = aDTFraction29.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction29.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        boolean boolean47 = aDTFraction43.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction43.times((int) (byte) 100);
        float float50 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction29.plus(aDTFraction43);
        boolean boolean52 = aDTFraction18.equals((java.lang.Object) aDTFraction43);
        float float53 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction8.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction54.times(1);
        java.lang.Class<?> wildcardClass57 = aDTFraction56.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        java.lang.String str40 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction46.times((int) 'a');
        int int51 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction50.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction39.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction57.times(aDTFraction63);
        int int67 = aDTFraction63.numerator();
        int int68 = aDTFraction63.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        boolean boolean78 = aDTFraction74.equals((java.lang.Object) ' ');
        boolean boolean80 = aDTFraction74.equals((java.lang.Object) "");
        float float81 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction63.times(aDTFraction74);
        int int83 = aDTFraction82.numerator();
        int int84 = aDTFraction82.numerator();
        int int85 = aDTFraction82.numerator();
        int int86 = aDTFraction82.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction54.plus(aDTFraction82);
        float float88 = aDTFraction82.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0/-1" + "'", str40, "0/-1");
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + 0.0f + "'", float88 == 0.0f);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction37.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction38.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction34.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction43.reciprocal();
        java.lang.String str47 = aDTFraction43.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100/100" + "'", str47, "100/100");
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(97, 20000);
        int int3 = aDTFraction2.numerator();
        java.lang.Class<?> wildcardClass4 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction27.plus(aDTFraction41);
        java.lang.String str43 = aDTFraction41.toString();
        boolean boolean44 = aDTFraction20.equals((java.lang.Object) aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.times((int) (short) 0);
        java.lang.String str47 = aDTFraction46.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction33.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction48.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction30.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction50.times(20000);
        java.lang.String str53 = aDTFraction50.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2/-1" + "'", str53, "2/-1");
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        java.lang.String str10 = aDTFraction5.toString();
        int int11 = aDTFraction5.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0/-1" + "'", str10, "0/-1");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-3190), 520);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.plus(aDTFraction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        int int17 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction11.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        float float32 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction11.plus(aDTFraction25);
        int int34 = aDTFraction11.numerator();
        java.lang.String str35 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction42.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        int int57 = aDTFraction51.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction47.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction38.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction47.reciprocal();
        java.lang.String str61 = aDTFraction60.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction71.times(aDTFraction77);
        int int81 = aDTFraction77.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction77.times((int) (byte) 0);
        int int85 = aDTFraction84.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction64.times(aDTFraction84);
        float float87 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction84.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction89.plus(aDTFraction92);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction93.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction95.times((int) (byte) 1);
        boolean boolean98 = aDTFraction60.equals((java.lang.Object) aDTFraction97);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "100/100" + "'", str61, "100/100");
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-1.0f) + "'", float65 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + (-0.0f) + "'", float87 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction18.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        boolean boolean37 = aDTFraction29.equals((java.lang.Object) aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        boolean boolean47 = aDTFraction40.equals((java.lang.Object) 10);
        boolean boolean48 = aDTFraction35.equals((java.lang.Object) aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        int int64 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction51.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        java.lang.Class<?> wildcardClass74 = aDTFraction71.getClass();
        boolean boolean75 = aDTFraction51.equals((java.lang.Object) aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        boolean boolean85 = aDTFraction81.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction81.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction71.times(aDTFraction87);
        boolean boolean89 = aDTFraction40.equals((java.lang.Object) aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction20.times(aDTFraction40);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction20.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(aDTFraction90);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        float float46 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction49.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction63.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int76 = aDTFraction75.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction63.times(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction60.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float85 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction81.plus(aDTFraction84);
        boolean boolean88 = aDTFraction84.equals((java.lang.Object) ' ');
        boolean boolean90 = aDTFraction84.equals((java.lang.Object) "");
        java.lang.String str91 = aDTFraction84.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction78.times(aDTFraction84);
        float float93 = aDTFraction92.value();
        java.lang.String str94 = aDTFraction92.toString();
        java.lang.String str95 = aDTFraction92.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction92.times((int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction52.times(aDTFraction92);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction99 = aDTFraction92.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0/-1" + "'", str91, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + (-0.0f) + "'", float93 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "0/-100" + "'", str94, "0/-100");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "0/-100" + "'", str95, "0/-100");
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertNotNull(aDTFraction98);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1000, 10000);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        int int42 = aDTFraction38.numerator();
        int int43 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        boolean boolean53 = aDTFraction49.equals((java.lang.Object) ' ');
        boolean boolean55 = aDTFraction49.equals((java.lang.Object) "");
        float float56 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction38.times(aDTFraction49);
        boolean boolean58 = aDTFraction29.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        int int67 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction61.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        int int80 = aDTFraction74.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction70.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction29.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction5.plus(aDTFraction82);
        java.lang.Class<?> wildcardClass84 = aDTFraction82.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        float float49 = aDTFraction48.value();
        float float50 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int54 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction53.reciprocal();
        int int56 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        int int65 = aDTFraction59.numerator();
        boolean boolean67 = aDTFraction59.equals((java.lang.Object) (short) 1);
        java.lang.String str68 = aDTFraction59.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction59.times((int) 'a');
        boolean boolean71 = aDTFraction53.equals((java.lang.Object) aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        boolean boolean81 = aDTFraction77.equals((java.lang.Object) ' ');
        boolean boolean83 = aDTFraction77.equals((java.lang.Object) "");
        int int84 = aDTFraction77.denominator();
        java.lang.String str85 = aDTFraction77.toString();
        boolean boolean86 = aDTFraction70.equals((java.lang.Object) aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction48.times(aDTFraction70);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction70.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 0.0f + "'", float50 == 0.0f);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0/-1" + "'", str68, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0/-1" + "'", str85, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(aDTFraction87);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction90.reciprocal();
        java.lang.String str92 = aDTFraction91.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction91.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction96 = new com.thealgorithms.maths.ADTFraction(52, 1024);
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction93.times(aDTFraction96);
        com.thealgorithms.maths.ADTFraction aDTFraction99 = aDTFraction93.times(35);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "3200/1000" + "'", str92, "3200/1000");
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertNotNull(aDTFraction99);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        boolean boolean26 = aDTFraction18.equals((java.lang.Object) aDTFraction24);
        java.lang.String str27 = aDTFraction24.toString();
        java.lang.String str28 = aDTFraction24.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction24.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction33.reciprocal();
        int int49 = aDTFraction48.numerator();
        float float50 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction30.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction2.times(aDTFraction48);
        float float53 = aDTFraction2.value();
        java.lang.Class<?> wildcardClass54 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-1.0f) + "'", float50 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 1.0f + "'", float53 == 1.0f);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1000000, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        java.lang.String str24 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction14.times((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction14.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction26);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(3200, (-10000));
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction50);
        int int53 = aDTFraction50.denominator();
        java.lang.Class<?> wildcardClass54 = aDTFraction50.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction27.plus(aDTFraction41);
        java.lang.String str43 = aDTFraction41.toString();
        boolean boolean44 = aDTFraction20.equals((java.lang.Object) aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.times((int) (short) 0);
        float float47 = aDTFraction41.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction2.equals((java.lang.Object) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (-1));
        boolean boolean14 = aDTFraction12.equals((java.lang.Object) 10);
        java.lang.String str15 = aDTFraction12.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction22.times((int) 'a');
        float float27 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        int int40 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        java.lang.String str49 = aDTFraction43.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction36.plus(aDTFraction43);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction50.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction22.times(aDTFraction53);
        java.lang.String str59 = aDTFraction53.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction16.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction63.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction64.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean70 = aDTFraction66.equals((java.lang.Object) aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction76.plus(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction73.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int86 = aDTFraction85.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction73.times(aDTFraction85);
        int int88 = aDTFraction85.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction69.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction60.plus(aDTFraction85);
        float float91 = aDTFraction90.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0/1" + "'", str59, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 100 + "'", int86 == 100);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + 1.0f + "'", float91 == 1.0f);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        boolean boolean37 = aDTFraction33.equals((java.lang.Object) '4');
        java.lang.String str38 = aDTFraction33.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', 97);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction42.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction42.reciprocal();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10000), 2);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction5.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.times(1024);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1664, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(1000);
        float float5 = aDTFraction2.value();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-1664.0f) + "'", float5 == (-1664.0f));
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(52);
        java.lang.String str6 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (byte) 10);
        int int10 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        boolean boolean27 = aDTFraction19.equals((java.lang.Object) aDTFraction25);
        java.lang.String str28 = aDTFraction25.toString();
        java.lang.String str29 = aDTFraction25.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction34.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction34.reciprocal();
        int int50 = aDTFraction49.numerator();
        float float51 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction31.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int56 = aDTFraction55.denominator();
        float float57 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.reciprocal();
        int int59 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction52.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction9.times(aDTFraction52);
        float float62 = aDTFraction9.value();
        boolean boolean63 = aDTFraction5.equals((java.lang.Object) aDTFraction9);
        int int64 = aDTFraction9.numerator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1664/10" + "'", str6, "1664/10");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-1.0f) + "'", float51 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 1.0f + "'", float57 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 5.2f + "'", float62 == 5.2f);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction44.times(52);
        int int48 = aDTFraction44.denominator();
        java.lang.String str49 = aDTFraction44.toString();
        float float50 = aDTFraction44.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction44.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction2.equals((java.lang.Object) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (-1));
        boolean boolean14 = aDTFraction12.equals((java.lang.Object) 10);
        java.lang.String str15 = aDTFraction12.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction12);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        boolean boolean34 = aDTFraction26.equals((java.lang.Object) aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) 'a');
        int int37 = aDTFraction32.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction32.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction16.plus(aDTFraction39);
        int int41 = aDTFraction16.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction29.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction31.times((int) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        boolean boolean39 = aDTFraction36.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction36.times(aDTFraction42);
        int int44 = aDTFraction42.denominator();
        int int45 = aDTFraction42.numerator();
        boolean boolean46 = aDTFraction33.equals((java.lang.Object) int45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction33.times(97);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(aDTFraction48);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        java.lang.String str28 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) (short) -1);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction11.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.reciprocal();
        int int38 = aDTFraction31.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        int int33 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        boolean boolean39 = aDTFraction36.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction36.times(aDTFraction42);
        int int44 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction36);
        java.lang.String str46 = aDTFraction36.toString();
        java.lang.String str47 = aDTFraction36.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100/100" + "'", str46, "100/100");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100/100" + "'", str47, "100/100");
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        float float10 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction21.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int34 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction18.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction18.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction8.times(aDTFraction18);
        java.lang.String str40 = aDTFraction39.toString();
        float float41 = aDTFraction39.value();
        float float42 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction3.plus(aDTFraction39);
        java.lang.String str44 = aDTFraction39.toString();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0/-1" + "'", str40, "0/-1");
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        int int17 = aDTFraction11.denominator();
        int int18 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        boolean boolean28 = aDTFraction24.equals((java.lang.Object) ' ');
        boolean boolean30 = aDTFraction24.equals((java.lang.Object) "");
        float float31 = aDTFraction24.value();
        java.lang.String str32 = aDTFraction24.toString();
        float float33 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction49);
        int int53 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction40.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction49.times((int) (byte) 0);
        int int57 = aDTFraction56.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction36.times(aDTFraction56);
        java.lang.String str59 = aDTFraction36.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction36.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction24.times(aDTFraction61);
        boolean boolean63 = aDTFraction11.equals((java.lang.Object) aDTFraction61);
        int int64 = aDTFraction61.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0/-1" + "'", str32, "0/-1");
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-1.0f) + "'", float37 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-1/1" + "'", str59, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        java.lang.String str11 = aDTFraction9.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction9.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction18.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        float float39 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction18.plus(aDTFraction32);
        int int41 = aDTFraction18.numerator();
        java.lang.String str42 = aDTFraction18.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction18.times((int) ' ');
        boolean boolean46 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction5.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction5.times(100);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction52);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction7.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        int int26 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction16.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str31 = aDTFraction30.toString();
        boolean boolean32 = aDTFraction16.equals((java.lang.Object) aDTFraction30);
        java.lang.String str33 = aDTFraction16.toString();
        int int34 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction2.plus(aDTFraction16);
        java.lang.Class<?> wildcardClass36 = aDTFraction16.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1/10" + "'", str31, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction68.times(aDTFraction71);
        int int73 = aDTFraction68.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        int int17 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction11.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        float float32 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction11.plus(aDTFraction25);
        int int34 = aDTFraction11.numerator();
        java.lang.String str35 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction36.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction37.reciprocal();
        int int39 = aDTFraction38.denominator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        int int40 = aDTFraction39.denominator();
        int int41 = aDTFraction39.numerator();
        float float42 = aDTFraction39.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) 'a', 35);
        java.lang.String str3 = aDTFraction2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "97/35" + "'", str3, "97/35");
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        int int39 = aDTFraction35.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction26.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        java.lang.Class<?> wildcardClass49 = aDTFraction46.getClass();
        boolean boolean50 = aDTFraction26.equals((java.lang.Object) aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction56.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction46.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction22.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction68.times(aDTFraction73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction72);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction30.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        boolean boolean60 = aDTFraction54.equals((java.lang.Object) "");
        java.lang.String str61 = aDTFraction54.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction48.times(aDTFraction54);
        float float63 = aDTFraction62.value();
        java.lang.String str64 = aDTFraction62.toString();
        int int65 = aDTFraction62.denominator();
        boolean boolean66 = aDTFraction20.equals((java.lang.Object) int65);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        int int75 = aDTFraction69.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction69.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        int int88 = aDTFraction82.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction78.times(aDTFraction82);
        java.lang.String str90 = aDTFraction82.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction82.times((int) (byte) -1);
        int int93 = aDTFraction92.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction20.plus(aDTFraction92);
        int int95 = aDTFraction92.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-100" + "'", str64, "0/-100");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-100) + "'", int65 == (-100));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0/-1" + "'", str90, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        boolean boolean29 = aDTFraction21.equals((java.lang.Object) aDTFraction27);
        java.lang.String str30 = aDTFraction27.toString();
        java.lang.String str31 = aDTFraction27.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction34);
        boolean boolean37 = aDTFraction2.equals((java.lang.Object) aDTFraction36);
        int int38 = aDTFraction36.denominator();
        java.lang.Class<?> wildcardClass39 = aDTFraction36.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        float float14 = aDTFraction5.value();
        java.lang.String str15 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int19 = aDTFraction18.denominator();
        boolean boolean21 = aDTFraction18.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction18.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        boolean boolean42 = aDTFraction34.equals((java.lang.Object) aDTFraction40);
        java.lang.String str43 = aDTFraction40.toString();
        java.lang.String str44 = aDTFraction40.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int62 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction49.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction49.reciprocal();
        int int65 = aDTFraction64.numerator();
        float float66 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction46.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction18.times(aDTFraction64);
        java.lang.String str69 = aDTFraction64.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction64.times(10000);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction64.times((int) (byte) 1);
        boolean boolean74 = aDTFraction5.equals((java.lang.Object) aDTFraction64);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-1.0f) + "'", float66 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1/-1" + "'", str69, "1/-1");
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        int int11 = aDTFraction2.numerator();
        java.lang.String str12 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str16 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction42.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction42.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction15.times(aDTFraction42);
        boolean boolean59 = aDTFraction2.equals((java.lang.Object) aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(9700, 1000000);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction42.plus(aDTFraction62);
        int int64 = aDTFraction63.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 970000 + "'", int64 == 970000);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-52), (int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int22 = aDTFraction21.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction9.times(aDTFraction21);
        java.lang.String str24 = aDTFraction21.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction30.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction21.plus(aDTFraction30);
        boolean boolean47 = aDTFraction6.equals((java.lang.Object) aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction6.times((-10000));
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction6.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100/100" + "'", str24, "100/100");
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        java.lang.String str23 = aDTFraction22.toString();
        java.lang.Class<?> wildcardClass24 = aDTFraction22.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/1" + "'", str23, "0/1");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, (-10));
        int int3 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-10) + "'", int3 == (-10));
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction16.times((int) (byte) -1);
        java.lang.String str20 = aDTFraction16.toString();
        java.lang.String str21 = aDTFraction16.toString();
        int int22 = aDTFraction16.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/10" + "'", str20, "0/10");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/10" + "'", str21, "0/10");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        int int42 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        boolean boolean52 = aDTFraction48.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction48.times((int) (byte) 100);
        java.lang.String str55 = aDTFraction48.toString();
        int int56 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction48.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction27.plus(aDTFraction58);
        boolean boolean60 = aDTFraction2.equals((java.lang.Object) aDTFraction58);
        int int61 = aDTFraction58.numerator();
        float float62 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction58.times(32);
        int int65 = aDTFraction58.numerator();
        float float66 = aDTFraction58.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        int int37 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction31.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction31.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction42.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction42.times(10);
        int int47 = aDTFraction46.numerator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, 1024);
        float float3 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        int int21 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(100, (int) '#');
        java.lang.Class<?> wildcardClass25 = aDTFraction24.getClass();
        boolean boolean26 = aDTFraction19.equals((java.lang.Object) aDTFraction24);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        int int43 = aDTFraction39.numerator();
        int int44 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int68 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction52.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        boolean boolean80 = aDTFraction76.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction76.times((int) (byte) 100);
        java.lang.String str83 = aDTFraction76.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction52.times(aDTFraction76);
        int int85 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction39.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction22.plus(aDTFraction52);
        float float88 = aDTFraction87.value();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction87.times((-10));
        int int91 = aDTFraction90.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0/-1" + "'", str83, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + 0.0f + "'", float88 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(35, 52);
        int int3 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        java.lang.String str11 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        java.lang.String str16 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        int int29 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction23.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        float float44 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction23.plus(aDTFraction37);
        int int46 = aDTFraction23.numerator();
        java.lang.String str47 = aDTFraction23.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction53.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction54.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        int int69 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction59.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction50.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction2.times(aDTFraction59);
        int int73 = aDTFraction72.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) '#');
        int int3 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        boolean boolean13 = aDTFraction9.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction9.times((int) (byte) 100);
        java.lang.String str16 = aDTFraction9.toString();
        int int17 = aDTFraction9.denominator();
        int int18 = aDTFraction9.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        boolean boolean28 = aDTFraction24.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction24.times((int) (byte) 100);
        java.lang.String str31 = aDTFraction24.toString();
        int int32 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction24.times((int) ' ');
        int int35 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction9.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction2.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        boolean boolean47 = aDTFraction43.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction43.times((int) (byte) 100);
        java.lang.String str50 = aDTFraction43.toString();
        int int51 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction43.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction43.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction2.times(aDTFraction43);
        float float57 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 2.857143f + "'", float57 == 2.857143f);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        boolean boolean28 = aDTFraction25.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction25.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        java.lang.String str35 = aDTFraction33.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction33.plus(aDTFraction38);
        int int40 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction46.reciprocal();
        java.lang.String str48 = aDTFraction46.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction43.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction38.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction25.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction38.reciprocal();
        int int53 = aDTFraction52.denominator();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "100/100" + "'", str48, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        float float5 = aDTFraction2.value();
        float float6 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times(0);
        int int9 = aDTFraction8.denominator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-1.0f) + "'", float5 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-1.0f) + "'", float6 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction14.times(aDTFraction18);
        java.lang.String str26 = aDTFraction18.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction18.times((int) (byte) -1);
        int int29 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction2.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction30.reciprocal();
        float float32 = aDTFraction30.value();
        java.lang.String str33 = aDTFraction30.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 100.0f + "'", float32 == 100.0f);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-100/-1" + "'", str33, "-100/-1");
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        int int19 = aDTFraction18.denominator();
        float float20 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction46.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction18.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        int int64 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction65.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction72.reciprocal();
        java.lang.String str74 = aDTFraction72.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction69.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction69.times((int) (byte) 100);
        java.lang.Class<?> wildcardClass78 = aDTFraction77.getClass();
        boolean boolean79 = aDTFraction65.equals((java.lang.Object) wildcardClass78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, (-100));
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.plus(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "100/100" + "'", str74, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(aDTFraction83);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.times(aDTFraction6);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.reciprocal();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction9);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        int int91 = aDTFraction88.numerator();
        java.lang.String str92 = aDTFraction88.toString();
        int int93 = aDTFraction88.numerator();
        java.lang.Class<?> wildcardClass94 = aDTFraction88.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "10/32" + "'", str92, "10/32");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        int int44 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str48 = aDTFraction47.toString();
        int int49 = aDTFraction47.denominator();
        boolean boolean50 = aDTFraction42.equals((java.lang.Object) aDTFraction47);
        int int51 = aDTFraction47.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-1/1" + "'", str48, "-1/1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times(aDTFraction28);
        java.lang.String str30 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        int int48 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction54.times((int) (byte) 100);
        java.lang.String str61 = aDTFraction54.toString();
        int int62 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction54.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction33.plus(aDTFraction64);
        int int66 = aDTFraction64.denominator();
        int int67 = aDTFraction64.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        int int76 = aDTFraction70.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction70.plus(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction64.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int85 = aDTFraction84.denominator();
        boolean boolean87 = aDTFraction84.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction80.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction28.times(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction88.times(1000000);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/10" + "'", str30, "0/10");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, 9700);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction10.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction10.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int56 = aDTFraction55.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction43.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction40.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        boolean boolean68 = aDTFraction64.equals((java.lang.Object) ' ');
        boolean boolean70 = aDTFraction64.equals((java.lang.Object) "");
        java.lang.String str71 = aDTFraction64.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction58.times(aDTFraction64);
        float float73 = aDTFraction72.value();
        java.lang.String str74 = aDTFraction72.toString();
        java.lang.String str75 = aDTFraction72.toString();
        boolean boolean76 = aDTFraction32.equals((java.lang.Object) str75);
        java.lang.String str77 = aDTFraction32.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction2.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction78.times((-10));
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction78.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-100" + "'", str74, "0/-100");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-100" + "'", str75, "0/-100");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0/1" + "'", str77, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction80);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction20.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction21.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction26.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction49.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction17.times(aDTFraction60);
        java.lang.String str62 = aDTFraction60.toString();
        java.lang.Class<?> wildcardClass63 = aDTFraction60.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0/-100" + "'", str62, "0/-100");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(970000, (int) (byte) 1);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int13 = aDTFraction12.denominator();
        float float14 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction12.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        float float20 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction28.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction18.times(aDTFraction28);
        int int50 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction15.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        boolean boolean61 = aDTFraction57.equals((java.lang.Object) ' ');
        boolean boolean63 = aDTFraction57.equals((java.lang.Object) "");
        float float64 = aDTFraction57.value();
        boolean boolean65 = aDTFraction15.equals((java.lang.Object) aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction8.plus(aDTFraction15);
        java.lang.String str67 = aDTFraction66.toString();
        java.lang.String str68 = aDTFraction66.toString();
        int int69 = aDTFraction66.denominator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "20000/10000" + "'", str67, "20000/10000");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "20000/10000" + "'", str68, "20000/10000");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10000 + "'", int69 == 10000);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        java.lang.Object obj24 = null;
        boolean boolean25 = aDTFraction22.equals(obj24);
        float float26 = aDTFraction22.value();
        java.lang.String str27 = aDTFraction22.toString();
        java.lang.String str28 = aDTFraction22.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        int int46 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        boolean boolean56 = aDTFraction52.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction52.times((int) (byte) 100);
        java.lang.String str59 = aDTFraction52.toString();
        int int60 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction52.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction31.plus(aDTFraction62);
        int int64 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction62.times((-52));
        java.lang.String str67 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction22.plus(aDTFraction66);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/1" + "'", str27, "0/1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/1" + "'", str28, "0/1");
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0/-1" + "'", str59, "0/-1");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction68);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (-35));
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction16.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.times((int) (byte) 10);
        int int21 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        java.lang.String str43 = aDTFraction37.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction53.times(aDTFraction59);
        int int63 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction50.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        java.lang.Class<?> wildcardClass73 = aDTFraction70.getClass();
        boolean boolean74 = aDTFraction50.equals((java.lang.Object) aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        boolean boolean84 = aDTFraction80.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction80.times((int) (byte) 100);
        java.lang.String str87 = aDTFraction80.toString();
        int int88 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction70.plus(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction89.times(52);
        boolean boolean92 = aDTFraction47.equals((java.lang.Object) aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction37.plus(aDTFraction47);
        int int94 = aDTFraction37.denominator();
        java.lang.String str95 = aDTFraction37.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction20.plus(aDTFraction37);
        float float97 = aDTFraction20.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0/-1" + "'", str87, "0/-1");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "0/-1" + "'", str95, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + float97 + "' != '" + 0.0f + "'", float97 == 0.0f);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction24.times((int) (byte) 100);
        float float47 = aDTFraction24.value();
        java.lang.String str48 = aDTFraction24.toString();
        java.lang.Class<?> wildcardClass49 = aDTFraction24.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction6.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        int int30 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction11.times(aDTFraction27);
        java.lang.String str32 = aDTFraction27.toString();
        int int33 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction27.times(32);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.reciprocal();
        boolean boolean37 = aDTFraction2.equals((java.lang.Object) aDTFraction36);
        java.lang.String str38 = aDTFraction2.toString();
        float float39 = aDTFraction2.value();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "100/100" + "'", str32, "100/100");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "100/1" + "'", str38, "100/1");
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 100.0f + "'", float39 == 100.0f);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (byte) 100);
        float float11 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction2.plus(aDTFraction12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100/100" + "'", str7, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.10309278f + "'", float11 == 0.10309278f);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        boolean boolean37 = aDTFraction29.equals((java.lang.Object) aDTFraction35);
        java.lang.String str38 = aDTFraction35.toString();
        java.lang.String str39 = aDTFraction35.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction47.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        boolean boolean61 = aDTFraction53.equals((java.lang.Object) aDTFraction59);
        java.lang.String str62 = aDTFraction59.toString();
        java.lang.String str63 = aDTFraction59.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction35.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction20.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction17.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction68.times((int) ' ');
        int int71 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction70.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction72.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float84 = aDTFraction83.value();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction80.plus(aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction77.times(aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float90 = aDTFraction89.value();
        boolean boolean91 = aDTFraction83.equals((java.lang.Object) aDTFraction89);
        java.lang.String str92 = aDTFraction89.toString();
        java.lang.String str93 = aDTFraction89.toString();
        float float94 = aDTFraction89.value();
        int int95 = aDTFraction89.numerator();
        float float96 = aDTFraction89.value();
        java.lang.String str97 = aDTFraction89.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction74.times(aDTFraction89);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0/-1" + "'", str62, "0/-1");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + (-0.0f) + "'", float84 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + float90 + "' != '" + (-0.0f) + "'", float90 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "0/-1" + "'", str92, "0/-1");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "0/-1" + "'", str93, "0/-1");
        org.junit.Assert.assertTrue("'" + float94 + "' != '" + (-0.0f) + "'", float94 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + float96 + "' != '" + (-0.0f) + "'", float96 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "0/-1" + "'", str97, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction98);
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        float float19 = aDTFraction14.value();
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction14.plus(aDTFraction45);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction14.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1664, 32);
        int int3 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction37.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction38.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction34.plus(aDTFraction43);
        java.lang.Class<?> wildcardClass46 = aDTFraction43.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction9.denominator();
        java.lang.String str11 = aDTFraction9.toString();
        boolean boolean13 = aDTFraction9.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int17 = aDTFraction16.denominator();
        float float18 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction16.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction9.plus(aDTFraction16);
        int int21 = aDTFraction20.numerator();
        float float22 = aDTFraction20.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 1.0f + "'", float18 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-100) + "'", int21 == (-100));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 1.0f + "'", float22 == 1.0f);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction12.times((int) (short) 0);
        java.lang.Class<?> wildcardClass36 = aDTFraction35.getClass();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        float float7 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction18.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction15.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction15.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction5.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction15.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        int int48 = aDTFraction42.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction42.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        int int61 = aDTFraction55.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction51.times(aDTFraction55);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction62.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int69 = aDTFraction68.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction62.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction76.plus(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction73.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int86 = aDTFraction85.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction73.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction73.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction70.plus(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction39.times(aDTFraction90);
        java.lang.String str92 = aDTFraction91.toString();
        int int93 = aDTFraction91.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + (-0.0f) + "'", float7 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 0.0f + "'", float63 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 100 + "'", int86 == 100);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "-2/-1" + "'", str92, "-2/-1");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-2) + "'", int93 == (-2));
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, 9700);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction10.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction10.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int56 = aDTFraction55.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction43.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction40.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        boolean boolean68 = aDTFraction64.equals((java.lang.Object) ' ');
        boolean boolean70 = aDTFraction64.equals((java.lang.Object) "");
        java.lang.String str71 = aDTFraction64.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction58.times(aDTFraction64);
        float float73 = aDTFraction72.value();
        java.lang.String str74 = aDTFraction72.toString();
        java.lang.String str75 = aDTFraction72.toString();
        boolean boolean76 = aDTFraction32.equals((java.lang.Object) str75);
        java.lang.String str77 = aDTFraction32.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction2.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction78.times((-10));
        java.lang.Object obj81 = null;
        boolean boolean82 = aDTFraction80.equals(obj81);
        int int83 = aDTFraction80.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-100" + "'", str74, "0/-100");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-100" + "'", str75, "0/-100");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0/1" + "'", str77, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        boolean boolean15 = aDTFraction11.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction11.times((int) (byte) 100);
        java.lang.String str18 = aDTFraction11.toString();
        int int19 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        int int35 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        boolean boolean47 = aDTFraction41.equals((java.lang.Object) "");
        float float48 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction30.times(aDTFraction41);
        boolean boolean50 = aDTFraction21.equals((java.lang.Object) aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction62.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction21.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction2.plus(aDTFraction74);
        int int76 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction2.times((int) (byte) -1);
        java.lang.String str79 = aDTFraction78.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction78.times((int) (short) 100);
        int int82 = aDTFraction81.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float89 = aDTFraction88.value();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction85.plus(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction88.times((int) 'a');
        int int93 = aDTFraction92.denominator();
        java.lang.String str94 = aDTFraction92.toString();
        int int95 = aDTFraction92.denominator();
        java.lang.String str96 = aDTFraction92.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction81.plus(aDTFraction92);
        int int98 = aDTFraction97.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0/-1" + "'", str79, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-0.0f) + "'", float89 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "0/-1" + "'", str94, "0/-1");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "0/-1" + "'", str96, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        int int4 = aDTFraction3.numerator();
        java.lang.Class<?> wildcardClass5 = aDTFraction3.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction40.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction41.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction5.times(aDTFraction43);
        int int45 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction43.reciprocal();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(aDTFraction46);
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        boolean boolean18 = aDTFraction14.equals((java.lang.Object) 'a');
        java.lang.String str19 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction27.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction51.equals((java.lang.Object) ' ');
        boolean boolean57 = aDTFraction51.equals((java.lang.Object) "");
        java.lang.String str58 = aDTFraction51.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction45.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int67 = aDTFraction66.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.times(aDTFraction66);
        int int69 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction14.plus(aDTFraction66);
        java.lang.String str71 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        boolean boolean81 = aDTFraction77.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction77.times((int) (byte) 100);
        java.lang.String str84 = aDTFraction77.toString();
        int int85 = aDTFraction77.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction77.times((int) ' ');
        float float88 = aDTFraction77.value();
        float float89 = aDTFraction77.value();
        java.lang.String str90 = aDTFraction77.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction14.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction14.plus(aDTFraction92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0/-1" + "'", str19, "0/-1");
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/-1" + "'", str84, "0/-1");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + (-0.0f) + "'", float88 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-0.0f) + "'", float89 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0/-1" + "'", str90, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction91);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction33.times(aDTFraction49);
        int int51 = aDTFraction49.denominator();
        int int52 = aDTFraction49.numerator();
        int int53 = aDTFraction49.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        int int28 = aDTFraction25.denominator();
        int int29 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 10);
        int int33 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        java.lang.String str39 = aDTFraction37.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.plus(aDTFraction42);
        int int44 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction50.reciprocal();
        java.lang.String str52 = aDTFraction50.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction42.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction50.times((-10000));
        boolean boolean57 = aDTFraction32.equals((java.lang.Object) (-10000));
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "100/100" + "'", str52, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        boolean boolean29 = aDTFraction21.equals((java.lang.Object) aDTFraction27);
        java.lang.String str30 = aDTFraction27.toString();
        java.lang.String str31 = aDTFraction27.toString();
        float float32 = aDTFraction27.value();
        boolean boolean33 = aDTFraction5.equals((java.lang.Object) float32);
        int int34 = aDTFraction5.denominator();
        int int35 = aDTFraction5.denominator();
        float float36 = aDTFraction5.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        boolean boolean46 = aDTFraction38.equals((java.lang.Object) aDTFraction44);
        java.lang.String str47 = aDTFraction44.toString();
        java.lang.String str48 = aDTFraction44.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction44.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction56.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        boolean boolean70 = aDTFraction62.equals((java.lang.Object) aDTFraction68);
        java.lang.String str71 = aDTFraction68.toString();
        java.lang.String str72 = aDTFraction68.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction68.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction44.plus(aDTFraction74);
        float float76 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction79.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction44.plus(aDTFraction79);
        boolean boolean83 = aDTFraction28.equals((java.lang.Object) aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction86.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction87.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction89.times(0);
        int int92 = aDTFraction91.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction28.times(aDTFraction91);
        int int94 = aDTFraction28.denominator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0/-1" + "'", str72, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10000 + "'", int94 == 10000);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction40.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction41.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction5.times(aDTFraction43);
        int int45 = aDTFraction44.numerator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction44.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, 10000);
        java.lang.String str3 = aDTFraction2.toString();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction7.plus(aDTFraction10);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction16.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction16.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.times(aDTFraction16);
        java.lang.Class<?> wildcardClass21 = aDTFraction20.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1/10000" + "'", str3, "1/10000");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1/10000" + "'", str4, "1/10000");
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction38.times((int) 'a');
        int int43 = aDTFraction42.denominator();
        java.lang.String str44 = aDTFraction42.toString();
        boolean boolean46 = aDTFraction42.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int50 = aDTFraction49.denominator();
        float float51 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction49.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction42.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction32.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction54.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        boolean boolean66 = aDTFraction62.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction62.times((int) (byte) 100);
        java.lang.String str69 = aDTFraction62.toString();
        int int70 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction62.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction75.times(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float88 = aDTFraction87.value();
        boolean boolean89 = aDTFraction81.equals((java.lang.Object) aDTFraction87);
        java.lang.String str90 = aDTFraction87.toString();
        java.lang.String str91 = aDTFraction87.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction87.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction87.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction62.times(aDTFraction95);
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction54.times(aDTFraction62);
        int int98 = aDTFraction97.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 1.0f + "'", float51 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + (-0.0f) + "'", float88 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0/-1" + "'", str90, "0/-1");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0/-1" + "'", str91, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        float float23 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        float float43 = aDTFraction38.value();
        int int44 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int68 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction52.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction38.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        java.lang.String str76 = aDTFraction74.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction74.plus(aDTFraction79);
        boolean boolean81 = aDTFraction38.equals((java.lang.Object) aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(100, (int) '4');
        boolean boolean85 = aDTFraction38.equals((java.lang.Object) aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction20.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction86.times((-10));
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction88.times((-32));
        float float91 = aDTFraction90.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/-1" + "'", str76, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + 0.0f + "'", float91 == 0.0f);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (byte) 10);
        int int3 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        boolean boolean20 = aDTFraction12.equals((java.lang.Object) aDTFraction18);
        java.lang.String str21 = aDTFraction18.toString();
        java.lang.String str22 = aDTFraction18.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction18.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction27.reciprocal();
        int int43 = aDTFraction42.numerator();
        float float44 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction24.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int49 = aDTFraction48.denominator();
        float float50 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction48.reciprocal();
        int int52 = aDTFraction51.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction45.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction45);
        int int55 = aDTFraction2.numerator();
        float float56 = aDTFraction2.value();
        java.lang.Class<?> wildcardClass57 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0/-1" + "'", str22, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-1.0f) + "'", float44 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 1.0f + "'", float50 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 5.2f + "'", float56 == 5.2f);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        int int86 = aDTFraction84.denominator();
        java.lang.String str87 = aDTFraction84.toString();
        float float88 = aDTFraction84.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0/1" + "'", str87, "0/1");
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + 0.0f + "'", float88 == 0.0f);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        int int13 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        boolean boolean25 = aDTFraction19.equals((java.lang.Object) "");
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction8.times(aDTFraction19);
        int int28 = aDTFraction27.numerator();
        int int29 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int33 = aDTFraction32.denominator();
        float float34 = aDTFraction32.value();
        float float35 = aDTFraction32.value();
        int int36 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction27.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean45 = aDTFraction43.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction48.times(aDTFraction54);
        int int58 = aDTFraction48.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction61.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        boolean boolean75 = aDTFraction67.equals((java.lang.Object) aDTFraction73);
        java.lang.String str76 = aDTFraction73.toString();
        java.lang.String str77 = aDTFraction73.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction73.times(aDTFraction80);
        boolean boolean83 = aDTFraction48.equals((java.lang.Object) aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction43.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction40.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction89.times(52);
        float float92 = aDTFraction91.value();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction48.plus(aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction32.plus(aDTFraction93);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/-1" + "'", str76, "0/-1");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0/-1" + "'", str77, "0/-1");
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + 166.4f + "'", float92 == 166.4f);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction11.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int24 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction11.times(aDTFraction23);
        int int26 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        java.lang.String str39 = aDTFraction32.toString();
        int int40 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction32.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction11.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        boolean boolean60 = aDTFraction52.equals((java.lang.Object) aDTFraction58);
        java.lang.String str61 = aDTFraction58.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction43.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction43.reciprocal();
        boolean boolean64 = aDTFraction5.equals((java.lang.Object) aDTFraction63);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction5.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(9700, 1000000);
        float float3 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0097f + "'", float3 == 0.0097f);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) 'a', 32);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction29.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int55 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction42.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction39.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        boolean boolean67 = aDTFraction63.equals((java.lang.Object) ' ');
        boolean boolean69 = aDTFraction63.equals((java.lang.Object) "");
        java.lang.String str70 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction57.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction71.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction29.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction74.times(10000);
        int int77 = aDTFraction74.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean17 = aDTFraction15.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int33 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction20.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction41.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction20.times(aDTFraction56);
        boolean boolean58 = aDTFraction15.equals((java.lang.Object) aDTFraction57);
        boolean boolean59 = aDTFraction2.equals((java.lang.Object) aDTFraction57);
        int int60 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int64 = aDTFraction63.denominator();
        boolean boolean66 = aDTFraction63.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction63.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction2.times(aDTFraction63);
        int int72 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10), 9700);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction5.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction7.times(3200);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.plus(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertNotNull(aDTFraction10);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction16.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.times((int) (byte) 10);
        int int21 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        java.lang.String str43 = aDTFraction37.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction53.times(aDTFraction59);
        int int63 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction50.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        java.lang.Class<?> wildcardClass73 = aDTFraction70.getClass();
        boolean boolean74 = aDTFraction50.equals((java.lang.Object) aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        boolean boolean84 = aDTFraction80.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction80.times((int) (byte) 100);
        java.lang.String str87 = aDTFraction80.toString();
        int int88 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction70.plus(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction89.times(52);
        boolean boolean92 = aDTFraction47.equals((java.lang.Object) aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction37.plus(aDTFraction47);
        int int94 = aDTFraction37.denominator();
        java.lang.String str95 = aDTFraction37.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction20.plus(aDTFraction37);
        float float97 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction99 = aDTFraction37.times((int) (short) -1);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0/-1" + "'", str87, "0/-1");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "0/-1" + "'", str95, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + float97 + "' != '" + (-0.0f) + "'", float97 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction99);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        java.lang.Object obj13 = null;
        boolean boolean14 = aDTFraction12.equals(obj13);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, 97);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction12.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction21.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int34 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction21.reciprocal();
        float float37 = aDTFraction21.value();
        int int38 = aDTFraction21.numerator();
        float float39 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        java.lang.String str52 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        int int61 = aDTFraction55.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction55.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        int int74 = aDTFraction68.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction64.times(aDTFraction68);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction45.plus(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction75.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction21.plus(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction21.times((-32));
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction18.times(aDTFraction21);
        int int84 = aDTFraction21.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-1.0f) + "'", float37 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-1.0f) + "'", float39 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + 0.0f + "'", float76 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        int int21 = aDTFraction5.denominator();
        int int22 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str26 = aDTFraction25.toString();
        float float27 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        int int45 = aDTFraction30.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction51.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction51.times((int) (byte) 100);
        java.lang.String str58 = aDTFraction51.toString();
        int int59 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction51.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction30.plus(aDTFraction61);
        int int63 = aDTFraction61.denominator();
        int int64 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        int int73 = aDTFraction67.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction67.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction61.times(aDTFraction77);
        boolean boolean79 = aDTFraction25.equals((java.lang.Object) aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        java.lang.Class<?> wildcardClass88 = aDTFraction82.getClass();
        boolean boolean89 = aDTFraction61.equals((java.lang.Object) aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction5.times(aDTFraction61);
        int int91 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction61.times(1000);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/1" + "'", str26, "-1/1");
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-1.0f) + "'", float27 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(aDTFraction93);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        java.lang.String str12 = aDTFraction8.toString();
        int int13 = aDTFraction8.numerator();
        boolean boolean15 = aDTFraction8.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((int) '#', 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction18.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction8.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        int int33 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean38 = aDTFraction36.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction41.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int54 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction62.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction41.times(aDTFraction77);
        boolean boolean79 = aDTFraction36.equals((java.lang.Object) aDTFraction78);
        boolean boolean80 = aDTFraction23.equals((java.lang.Object) aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction23.plus(aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int88 = aDTFraction87.denominator();
        float float89 = aDTFraction87.value();
        float float90 = aDTFraction87.value();
        boolean boolean91 = aDTFraction84.equals((java.lang.Object) aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction19.plus(aDTFraction84);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + 1.0f + "'", float89 == 1.0f);
        org.junit.Assert.assertTrue("'" + float90 + "' != '" + 1.0f + "'", float90 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(aDTFraction92);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction7.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        int int26 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction16.times(aDTFraction20);
        int int28 = aDTFraction27.denominator();
        boolean boolean29 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction35.times((int) (byte) 100);
        java.lang.String str42 = aDTFraction35.toString();
        int int43 = aDTFraction35.denominator();
        int int44 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        boolean boolean54 = aDTFraction50.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction50.times((int) (byte) 100);
        java.lang.String str57 = aDTFraction50.toString();
        int int58 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction50.times((int) ' ');
        int int61 = aDTFraction60.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction35.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction65.times(aDTFraction71);
        int int75 = aDTFraction71.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        java.lang.String str84 = aDTFraction78.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction71.plus(aDTFraction78);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction85.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction62.plus(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction2.times(350);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/-1" + "'", str84, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + 0.0f + "'", float86 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction92);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(32);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction7.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction8.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean14 = aDTFraction10.equals((java.lang.Object) aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int30 = aDTFraction29.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction29);
        int int32 = aDTFraction29.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction13.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        int int42 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction36.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction36.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction29.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction47.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction47.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction4.times(aDTFraction51);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction51.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        java.lang.String str28 = aDTFraction11.toString();
        int int29 = aDTFraction11.numerator();
        int int30 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        boolean boolean43 = aDTFraction39.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction39.times((int) (byte) 100);
        float float46 = aDTFraction39.value();
        boolean boolean47 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction53.times((int) (byte) 100);
        java.lang.String str60 = aDTFraction53.toString();
        int int61 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction39.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction11.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction68.reciprocal();
        int int84 = aDTFraction83.numerator();
        float float85 = aDTFraction83.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction65.plus(aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction((int) '4', (-10000));
        boolean boolean90 = aDTFraction65.equals((java.lang.Object) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction65.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-1.0f) + "'", float85 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        java.lang.Class<?> wildcardClass26 = aDTFraction25.getClass();
        boolean boolean27 = aDTFraction5.equals((java.lang.Object) aDTFraction25);
        int int28 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        int int37 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction31.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        int int50 = aDTFraction44.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction40.times(aDTFraction44);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction51.times((int) (short) 0);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction5.times(aDTFraction54);
        java.lang.String str57 = aDTFraction54.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 0.0f + "'", float52 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 0.0f + "'", float55 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/1" + "'", str57, "0/1");
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction8.times(aDTFraction14);
        int int18 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction5.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        java.lang.Class<?> wildcardClass28 = aDTFraction25.getClass();
        boolean boolean29 = aDTFraction5.equals((java.lang.Object) aDTFraction25);
        java.lang.String str30 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.times(32);
        float float33 = aDTFraction5.value();
        boolean boolean34 = aDTFraction2.equals((java.lang.Object) aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction2.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str41 = aDTFraction40.toString();
        int int42 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction40.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction44.reciprocal();
        java.lang.String str46 = aDTFraction45.toString();
        boolean boolean47 = aDTFraction2.equals((java.lang.Object) aDTFraction45);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1/1" + "'", str41, "-1/1");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1/-10" + "'", str46, "1/-10");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-52), (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        java.lang.String str15 = aDTFraction8.toString();
        int int16 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction8.times((int) ' ');
        int int19 = aDTFraction18.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        java.lang.String str32 = aDTFraction25.toString();
        int int33 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int49 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction36.times(aDTFraction48);
        int int51 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        boolean boolean61 = aDTFraction57.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction57.times((int) (byte) 100);
        java.lang.String str64 = aDTFraction57.toString();
        int int65 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction57.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction36.plus(aDTFraction67);
        int int69 = aDTFraction67.denominator();
        boolean boolean71 = aDTFraction67.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction25.times(aDTFraction67);
        boolean boolean73 = aDTFraction18.equals((java.lang.Object) aDTFraction72);
        boolean boolean74 = aDTFraction2.equals((java.lang.Object) aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction72.times(aDTFraction75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0/-1" + "'", str32, "0/-1");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-1" + "'", str64, "0/-1");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        java.lang.String str18 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction22.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int35 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction22.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction22.reciprocal();
        int int38 = aDTFraction22.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction22.times((-10));
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass42 = aDTFraction22.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1/1" + "'", str18, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.reciprocal();
        int int7 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times((int) (byte) -1);
        int int10 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        int int6 = aDTFraction3.denominator();
        int int7 = aDTFraction3.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        boolean boolean24 = aDTFraction16.equals((java.lang.Object) aDTFraction22);
        java.lang.String str25 = aDTFraction22.toString();
        java.lang.String str26 = aDTFraction22.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction22.times(aDTFraction29);
        int int32 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        boolean boolean49 = aDTFraction41.equals((java.lang.Object) aDTFraction47);
        java.lang.String str50 = aDTFraction47.toString();
        java.lang.String str51 = aDTFraction47.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction47.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        boolean boolean73 = aDTFraction65.equals((java.lang.Object) aDTFraction71);
        java.lang.String str74 = aDTFraction71.toString();
        java.lang.String str75 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction71.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction47.plus(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction77.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction31.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction3.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction81.times(3200);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0/-1" + "'", str25, "0/-1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-1" + "'", str74, "0/-1");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-1" + "'", str75, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction84);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction22.times((int) (byte) 100);
        java.lang.String str29 = aDTFraction22.toString();
        int int30 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction22.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction8.times(aDTFraction32);
        int int34 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction40.times((int) 'a');
        int int45 = aDTFraction44.denominator();
        java.lang.String str46 = aDTFraction44.toString();
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int52 = aDTFraction51.denominator();
        float float53 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction44.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction55.reciprocal();
        boolean boolean57 = aDTFraction33.equals((java.lang.Object) aDTFraction56);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/-1" + "'", str46, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 1.0f + "'", float53 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times(aDTFraction28);
        java.lang.String str30 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        int int48 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction54.times((int) (byte) 100);
        java.lang.String str61 = aDTFraction54.toString();
        int int62 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction54.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction33.plus(aDTFraction64);
        int int66 = aDTFraction64.denominator();
        int int67 = aDTFraction64.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        int int76 = aDTFraction70.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction70.plus(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction64.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int85 = aDTFraction84.denominator();
        boolean boolean87 = aDTFraction84.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction80.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction28.times(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction88.times((-100));
        int int92 = aDTFraction91.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/10" + "'", str30, "0/10");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction5.times((int) (byte) 0);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        float float35 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int59 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction46.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction43.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction43.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction33.times(aDTFraction43);
        int int65 = aDTFraction64.numerator();
        int int66 = aDTFraction64.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction64.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction28.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        int int73 = aDTFraction72.numerator();
        int int74 = aDTFraction72.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction28.plus(aDTFraction72);
        java.lang.String str76 = aDTFraction72.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/10" + "'", str76, "0/10");
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        int int18 = aDTFraction12.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction8.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        int int35 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction22.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction36.times(0);
        int int39 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction19.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction19.times((-17));
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        boolean boolean48 = aDTFraction45.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        boolean boolean62 = aDTFraction58.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction58.times((int) (byte) 100);
        java.lang.String str65 = aDTFraction58.toString();
        int int66 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction58.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction58.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction52.plus(aDTFraction70);
        boolean boolean72 = aDTFraction19.equals((java.lang.Object) aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0/-1" + "'", str65, "0/-1");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (int) 'a');
        int int3 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        float float19 = aDTFraction14.value();
        int int20 = aDTFraction14.numerator();
        float float21 = aDTFraction14.value();
        int int22 = aDTFraction14.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times((int) (byte) 10);
        int int7 = aDTFraction6.numerator();
        float float8 = aDTFraction6.value();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-10) + "'", int7 == (-10));
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + (-10.0f) + "'", float8 == (-10.0f));
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction40.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction41.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction5.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str56 = aDTFraction55.toString();
        int int57 = aDTFraction55.denominator();
        float float58 = aDTFraction55.value();
        float float59 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction55.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction62.times((int) (short) 1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction43.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction64.reciprocal();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1/1" + "'", str56, "-1/1");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-1.0f) + "'", float58 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-1.0f) + "'", float59 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 8.7f + "'", float65 == 8.7f);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) ' ', 166400);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        int int17 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction11.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        float float32 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction11.plus(aDTFraction25);
        int int34 = aDTFraction11.numerator();
        java.lang.String str35 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction42.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        int int57 = aDTFraction51.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction47.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction38.plus(aDTFraction47);
        float float60 = aDTFraction59.value();
        float float61 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        float float66 = aDTFraction64.value();
        java.lang.String str67 = aDTFraction64.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction59.times(0);
        java.lang.String str71 = aDTFraction70.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 1.0f + "'", float60 == 1.0f);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 1.0f + "'", float61 == 1.0f);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-100" + "'", str71, "0/-100");
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        java.lang.String str8 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (byte) 10);
        float float11 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        boolean boolean21 = aDTFraction17.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction17.times((int) (byte) 100);
        java.lang.String str24 = aDTFraction17.toString();
        int int25 = aDTFraction17.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction17.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        int int40 = aDTFraction36.numerator();
        int int41 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        boolean boolean53 = aDTFraction47.equals((java.lang.Object) "");
        float float54 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction36.times(aDTFraction47);
        boolean boolean56 = aDTFraction27.equals((java.lang.Object) aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        int int65 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction59.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction72.plus(aDTFraction75);
        int int78 = aDTFraction72.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction68.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction27.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction2.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction81.plus(aDTFraction82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/-1" + "'", str8, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', 52);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean10 = aDTFraction8.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        int int23 = aDTFraction13.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction38.times(aDTFraction45);
        boolean boolean48 = aDTFraction13.equals((java.lang.Object) aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction8.times(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction5.times(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction53.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction54.times(52);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction13.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction58.reciprocal();
        boolean boolean60 = aDTFraction2.equals((java.lang.Object) aDTFraction59);
        java.lang.String str61 = aDTFraction2.toString();
        int int62 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 166.4f + "'", float57 == 166.4f);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "52/52" + "'", str61, "52/52");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        float float34 = aDTFraction12.value();
        int int35 = aDTFraction12.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction12.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction29.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction31.times((int) (byte) 0);
        int int34 = aDTFraction33.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        int int42 = aDTFraction38.numerator();
        int int43 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        boolean boolean53 = aDTFraction49.equals((java.lang.Object) ' ');
        boolean boolean55 = aDTFraction49.equals((java.lang.Object) "");
        float float56 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction38.times(aDTFraction49);
        boolean boolean58 = aDTFraction29.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        int int67 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction61.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        int int80 = aDTFraction74.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction70.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction29.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction5.plus(aDTFraction82);
        float float84 = aDTFraction83.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction83.times(32);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + (-0.0f) + "'", float84 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        int int52 = aDTFraction42.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        boolean boolean69 = aDTFraction61.equals((java.lang.Object) aDTFraction67);
        java.lang.String str70 = aDTFraction67.toString();
        java.lang.String str71 = aDTFraction67.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction74);
        boolean boolean77 = aDTFraction42.equals((java.lang.Object) aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction42.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction31.times(aDTFraction78);
        int int80 = aDTFraction78.numerator();
        float float81 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float85 = aDTFraction84.value();
        float float86 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction78.times(aDTFraction84);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-1.0f) + "'", float81 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-1.0f) + "'", float85 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-1.0f) + "'", float86 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, 520);
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction6.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction10.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction6.times(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertNotNull(aDTFraction12);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction19.equals((java.lang.Object) 10);
        boolean boolean27 = aDTFraction14.equals((java.lang.Object) aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        int int43 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        java.lang.Class<?> wildcardClass53 = aDTFraction50.getClass();
        boolean boolean54 = aDTFraction30.equals((java.lang.Object) aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction50.times(aDTFraction66);
        boolean boolean68 = aDTFraction19.equals((java.lang.Object) aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction66.times(10);
        java.lang.Class<?> wildcardClass71 = aDTFraction70.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int6 = aDTFraction5.denominator();
        float float7 = aDTFraction5.value();
        float float8 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        boolean boolean18 = aDTFraction14.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (byte) 100);
        java.lang.String str21 = aDTFraction14.toString();
        int int22 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction14.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        int int37 = aDTFraction33.numerator();
        int int38 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        boolean boolean50 = aDTFraction44.equals((java.lang.Object) "");
        float float51 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction33.times(aDTFraction44);
        boolean boolean53 = aDTFraction24.equals((java.lang.Object) aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        int int62 = aDTFraction56.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction56.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        int int75 = aDTFraction69.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction65.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction24.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction5.plus(aDTFraction77);
        int int79 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction5.times((int) (byte) 100);
        boolean boolean82 = aDTFraction2.equals((java.lang.Object) aDTFraction81);
        java.lang.Class<?> wildcardClass83 = aDTFraction81.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + (-0.0f) + "'", float7 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + (-0.0f) + "'", float8 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        java.lang.String str23 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int49 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction36.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction33.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction33.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction33.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction15.times(aDTFraction33);
        int int57 = aDTFraction56.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-17), 1664);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction68.times(aDTFraction71);
        float float73 = aDTFraction68.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 0.0f + "'", float73 == 0.0f);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = aDTFraction22.equals(obj23);
        float float25 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) ' ', (int) ' ');
        int int29 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        int int31 = aDTFraction30.numerator();
        int int32 = aDTFraction30.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 32 + "'", int31 == 32);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction33.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        int int33 = aDTFraction29.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        java.lang.Class<?> wildcardClass43 = aDTFraction40.getClass();
        boolean boolean44 = aDTFraction20.equals((java.lang.Object) aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        boolean boolean54 = aDTFraction50.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction50.times((int) (byte) 100);
        java.lang.String str57 = aDTFraction50.toString();
        int int58 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction40.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction2.times(aDTFraction50);
        java.lang.Class<?> wildcardClass61 = aDTFraction50.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        int int25 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction2.times(0);
        java.lang.Class<?> wildcardClass28 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        int int6 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean24 = aDTFraction22.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        int int37 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        boolean boolean54 = aDTFraction46.equals((java.lang.Object) aDTFraction52);
        java.lang.String str55 = aDTFraction52.toString();
        java.lang.String str56 = aDTFraction52.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction52.times(aDTFraction59);
        boolean boolean62 = aDTFraction27.equals((java.lang.Object) aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction22.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction9.times(aDTFraction63);
        boolean boolean65 = aDTFraction5.equals((java.lang.Object) aDTFraction63);
        java.lang.String str66 = aDTFraction63.toString();
        java.lang.String str67 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction63.plus(aDTFraction70);
        java.lang.Class<?> wildcardClass72 = aDTFraction71.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0/-1" + "'", str56, "0/-1");
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction18.times((int) '#');
        int int21 = aDTFraction20.denominator();
        float float22 = aDTFraction20.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1024, (-35));
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, 100);
        java.lang.String str3 = aDTFraction2.toString();
        java.lang.String str4 = aDTFraction2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/100" + "'", str3, "-1/100");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1/100" + "'", str4, "-1/100");
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction17.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction18.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        float float29 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction27.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        float float35 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int59 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction46.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction43.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction43.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction33.times(aDTFraction43);
        int int65 = aDTFraction64.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction30.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        boolean boolean76 = aDTFraction72.equals((java.lang.Object) ' ');
        boolean boolean78 = aDTFraction72.equals((java.lang.Object) "");
        float float79 = aDTFraction72.value();
        boolean boolean80 = aDTFraction30.equals((java.lang.Object) aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction23.plus(aDTFraction30);
        boolean boolean82 = aDTFraction5.equals((java.lang.Object) aDTFraction81);
        float float83 = aDTFraction5.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 1.0f + "'", float29 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction33.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int54 = aDTFraction53.denominator();
        boolean boolean56 = aDTFraction53.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times(aDTFraction53);
        int int58 = aDTFraction57.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction57.times((-100));
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(aDTFraction60);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, 32);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        java.lang.String str85 = aDTFraction65.toString();
        boolean boolean86 = aDTFraction2.equals((java.lang.Object) aDTFraction65);
        java.lang.Class<?> wildcardClass87 = aDTFraction65.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0/1" + "'", str85, "0/1");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((int) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) -1);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        int int21 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction5.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction25.times(32);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10), 970000);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, 166400);
        int int3 = aDTFraction2.denominator();
        java.lang.Class<?> wildcardClass4 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 166400 + "'", int3 == 166400);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        int int29 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction35.times((int) (byte) 100);
        java.lang.String str42 = aDTFraction35.toString();
        int int43 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction35.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction14.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction49.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction50.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean56 = aDTFraction52.equals((java.lang.Object) aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction46.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction11.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction62.times(32);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction11.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction11.times(2);
        java.lang.Class<?> wildcardClass69 = aDTFraction68.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 32.0f + "'", float65 == 32.0f);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction29.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction51.times((int) 'a');
        int int56 = aDTFraction55.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.times((int) (short) -1);
        boolean boolean59 = aDTFraction2.equals((java.lang.Object) (short) -1);
        java.lang.Class<?> wildcardClass60 = aDTFraction2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        int int31 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        java.lang.String str44 = aDTFraction37.toString();
        int int45 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction16.plus(aDTFraction47);
        int int49 = aDTFraction47.denominator();
        int int50 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction47.times(aDTFraction63);
        int int65 = aDTFraction63.denominator();
        java.lang.String str66 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction5.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction70.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction71.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction5.plus(aDTFraction73);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction5.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/1" + "'", str66, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        java.lang.String str13 = aDTFraction8.toString();
        float float14 = aDTFraction8.value();
        java.lang.String str15 = aDTFraction8.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction18.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        int int35 = aDTFraction29.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction29.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        boolean boolean47 = aDTFraction43.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction43.times((int) (byte) 100);
        float float50 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction29.plus(aDTFraction43);
        boolean boolean52 = aDTFraction18.equals((java.lang.Object) aDTFraction43);
        float float53 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction8.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction54.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction54.times(1000);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        int int67 = aDTFraction61.numerator();
        int int68 = aDTFraction61.denominator();
        java.lang.Class<?> wildcardClass69 = aDTFraction61.getClass();
        boolean boolean70 = aDTFraction54.equals((java.lang.Object) wildcardClass69);
        java.lang.Class<?> wildcardClass71 = aDTFraction54.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction49);
        int int54 = aDTFraction34.denominator();
        float float55 = aDTFraction34.value();
        float float56 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction34.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction58.times(10000);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction60.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times(aDTFraction65);
        java.lang.String str67 = aDTFraction66.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-1.0f) + "'", float55 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-1.0f) + "'", float56 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int19 = aDTFraction18.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction6.reciprocal();
        int int22 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction2.plus(aDTFraction21);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(aDTFraction23);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(35, 350);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        java.lang.String str27 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction2.times(32);
        float float30 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(32, 35);
        java.lang.String str34 = aDTFraction33.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction2.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int39 = aDTFraction38.denominator();
        boolean boolean41 = aDTFraction38.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction38.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction48.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        boolean boolean62 = aDTFraction54.equals((java.lang.Object) aDTFraction60);
        java.lang.String str63 = aDTFraction60.toString();
        java.lang.String str64 = aDTFraction60.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction72.plus(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction69.times(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int82 = aDTFraction81.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction69.times(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction69.reciprocal();
        int int85 = aDTFraction84.numerator();
        float float86 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction66.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction38.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction84.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = new com.thealgorithms.maths.ADTFraction(10, 1664);
        java.lang.String str93 = aDTFraction92.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction92.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction84.times(aDTFraction95);
        boolean boolean97 = aDTFraction35.equals((java.lang.Object) aDTFraction95);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "32/35" + "'", str34, "32/35");
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-1" + "'", str64, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-1.0f) + "'", float86 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "10/1664" + "'", str93, "10/1664");
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        float float23 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        float float43 = aDTFraction38.value();
        int int44 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int68 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction52.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction38.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        java.lang.String str76 = aDTFraction74.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction74.plus(aDTFraction79);
        boolean boolean81 = aDTFraction38.equals((java.lang.Object) aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(100, (int) '4');
        boolean boolean85 = aDTFraction38.equals((java.lang.Object) aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction20.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction86.times((-10));
        com.thealgorithms.maths.ADTFraction aDTFraction91 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction91.reciprocal();
        int int93 = aDTFraction91.denominator();
        java.lang.String str94 = aDTFraction91.toString();
        boolean boolean95 = aDTFraction86.equals((java.lang.Object) aDTFraction91);
        java.lang.Class<?> wildcardClass96 = aDTFraction91.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/-1" + "'", str76, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 100 + "'", int93 == 100);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "100/100" + "'", str94, "100/100");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction19.equals((java.lang.Object) 10);
        boolean boolean27 = aDTFraction14.equals((java.lang.Object) aDTFraction19);
        int int28 = aDTFraction14.numerator();
        int int29 = aDTFraction14.numerator();
        float float30 = aDTFraction14.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        int int17 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        boolean boolean34 = aDTFraction26.equals((java.lang.Object) aDTFraction32);
        java.lang.String str35 = aDTFraction32.toString();
        java.lang.String str36 = aDTFraction32.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction39);
        boolean boolean42 = aDTFraction7.equals((java.lang.Object) aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction2.times(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(10);
        int int46 = aDTFraction45.denominator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, 10);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        java.lang.Class<?> wildcardClass4 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean90 = aDTFraction88.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction85.plus(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction91.times(0);
        int int94 = aDTFraction91.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-100) + "'", int94 == (-100));
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction38.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction2.plus(aDTFraction38);
        float float42 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-1.0f) + "'", float42 == (-1.0f));
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(10);
        java.lang.String str5 = aDTFraction4.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(1, (int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean13 = aDTFraction11.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction16.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction37.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction16.times(aDTFraction52);
        boolean boolean54 = aDTFraction11.equals((java.lang.Object) aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction53.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction8.plus(aDTFraction53);
        boolean boolean58 = aDTFraction4.equals((java.lang.Object) aDTFraction53);
        java.lang.Class<?> wildcardClass59 = aDTFraction53.getClass();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-10/1" + "'", str5, "-10/1");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        java.lang.String str27 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction2.times(32);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction35.times((int) (byte) 100);
        java.lang.String str42 = aDTFraction35.toString();
        int int43 = aDTFraction35.denominator();
        int int44 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        boolean boolean54 = aDTFraction50.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction50.times((int) (byte) 100);
        java.lang.String str57 = aDTFraction50.toString();
        int int58 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction50.times((int) ' ');
        int int61 = aDTFraction60.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction35.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction29.times(aDTFraction62);
        int int64 = aDTFraction29.numerator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        java.lang.Class<?> wildcardClass26 = aDTFraction25.getClass();
        boolean boolean27 = aDTFraction5.equals((java.lang.Object) aDTFraction25);
        int int28 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        int int37 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction31.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        int int50 = aDTFraction44.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction40.times(aDTFraction44);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction51.times((int) (short) 0);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction5.times(aDTFraction54);
        java.lang.String str57 = aDTFraction56.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 0.0f + "'", float52 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 0.0f + "'", float55 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 1);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        float float17 = aDTFraction2.value();
        int int18 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        int int27 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction21.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction35.times((int) (byte) 100);
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction21.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int59 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction46.times(aDTFraction58);
        int int61 = aDTFraction46.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        boolean boolean71 = aDTFraction67.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction67.times((int) (byte) 100);
        java.lang.String str74 = aDTFraction67.toString();
        int int75 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction67.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction46.plus(aDTFraction77);
        boolean boolean79 = aDTFraction21.equals((java.lang.Object) aDTFraction77);
        float float80 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        boolean boolean84 = aDTFraction77.equals((java.lang.Object) aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.plus(aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction85.times(aDTFraction86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-1.0f) + "'", float17 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-1" + "'", str74, "0/-1");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(aDTFraction85);
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction29.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction50.times(aDTFraction56);
        int int60 = aDTFraction56.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        java.lang.String str69 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.plus(aDTFraction63);
        java.lang.String str71 = aDTFraction70.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction74.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int87 = aDTFraction86.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction74.times(aDTFraction86);
        float float89 = aDTFraction74.value();
        float float90 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction70.plus(aDTFraction74);
        float float92 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction2.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction2.times((int) '4');
        float float96 = aDTFraction95.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction95.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/1" + "'", str71, "0/1");
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-1.0f) + "'", float89 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float90 + "' != '" + (-1.0f) + "'", float90 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + (-1.0f) + "'", float92 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertTrue("'" + float96 + "' != '" + (-0.0f) + "'", float96 == (-0.0f));
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        java.lang.String str9 = aDTFraction8.toString();
        java.lang.Object obj10 = null;
        boolean boolean11 = aDTFraction8.equals(obj10);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction17.times((int) 'a');
        int int22 = aDTFraction21.denominator();
        java.lang.String str23 = aDTFraction21.toString();
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        float float30 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction28.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction21.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction8.times(aDTFraction32);
        int int34 = aDTFraction8.denominator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-100/-100" + "'", str9, "-100/-100");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 1.0f + "'", float30 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-100) + "'", int34 == (-100));
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction34.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times((int) (byte) 100);
        java.lang.String str67 = aDTFraction60.toString();
        int int68 = aDTFraction60.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction60.times((int) ' ');
        float float71 = aDTFraction60.value();
        float float72 = aDTFraction60.value();
        int int73 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(100, (int) (byte) -1);
        boolean boolean77 = aDTFraction60.equals((java.lang.Object) (byte) -1);
        boolean boolean78 = aDTFraction34.equals((java.lang.Object) aDTFraction60);
        int int79 = aDTFraction60.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        int int13 = aDTFraction12.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction24.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction21.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        java.lang.String str52 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction39.times(aDTFraction45);
        float float54 = aDTFraction53.value();
        java.lang.String str55 = aDTFraction53.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction12.times(aDTFraction53);
        int int57 = aDTFraction12.denominator();
        int int58 = aDTFraction12.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-100" + "'", str55, "0/-100");
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        java.lang.String str20 = aDTFraction17.toString();
        java.lang.String str21 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction17.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction17.times(166400);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction51);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        int int25 = aDTFraction16.numerator();
        int int26 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        int int35 = aDTFraction32.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        boolean boolean47 = aDTFraction41.equals((java.lang.Object) "");
        float float48 = aDTFraction41.value();
        java.lang.String str49 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        boolean boolean59 = aDTFraction55.equals((java.lang.Object) ' ');
        boolean boolean61 = aDTFraction55.equals((java.lang.Object) "");
        float float62 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction41.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction64.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction32.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction16.times(aDTFraction32);
        int int70 = aDTFraction16.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        int int9 = aDTFraction7.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction15.reciprocal();
        java.lang.String str17 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction12.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction7.times(aDTFraction15);
        int int20 = aDTFraction7.numerator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "100/100" + "'", str17, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        int int45 = aDTFraction15.numerator();
        float float46 = aDTFraction15.value();
        float float47 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction53.times(aDTFraction59);
        int int63 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction50.times(aDTFraction59);
        float float65 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(35, 52);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction68.reciprocal();
        int int70 = aDTFraction68.numerator();
        float float71 = aDTFraction68.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction59.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction78.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float89 = aDTFraction88.value();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction85.plus(aDTFraction88);
        int int91 = aDTFraction85.numerator();
        boolean boolean93 = aDTFraction85.equals((java.lang.Object) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction85.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction78.plus(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction59.plus(aDTFraction85);
        int int98 = aDTFraction59.numerator();
        boolean boolean99 = aDTFraction15.equals((java.lang.Object) aDTFraction59);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + 0.6730769f + "'", float71 == 0.6730769f);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-0.0f) + "'", float89 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction5.times(3500);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 320.0f + "'", float6 == 320.0f);
        org.junit.Assert.assertNotNull(aDTFraction8);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        int int91 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (-1));
        int int95 = aDTFraction94.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction2.times(aDTFraction94);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction2.times(100);
        int int99 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 100 + "'", int99 == 100);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        java.lang.String str26 = aDTFraction7.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/1" + "'", str26, "0/1");
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        java.lang.String str9 = aDTFraction8.toString();
        java.lang.Object obj10 = null;
        boolean boolean11 = aDTFraction8.equals(obj10);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction17.times((int) 'a');
        int int22 = aDTFraction21.denominator();
        java.lang.String str23 = aDTFraction21.toString();
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        float float30 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction28.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction21.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction8.times(aDTFraction32);
        java.lang.Class<?> wildcardClass34 = aDTFraction32.getClass();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-100/-100" + "'", str9, "-100/-100");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 1.0f + "'", float30 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (-52));
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(1, (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        int int22 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction9.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction23.times(0);
        boolean boolean26 = aDTFraction6.equals((java.lang.Object) aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction29.times(32);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction6.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction3.plus(aDTFraction32);
        int int34 = aDTFraction32.numerator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(9700, 97);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction3);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        float float18 = aDTFraction2.value();
        int int19 = aDTFraction2.numerator();
        float float20 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        boolean boolean30 = aDTFraction26.equals((java.lang.Object) ' ');
        boolean boolean32 = aDTFraction26.equals((java.lang.Object) "");
        java.lang.String str33 = aDTFraction26.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        int int42 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction36.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction45.times(aDTFraction49);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction26.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction56.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction2.plus(aDTFraction56);
        int int62 = aDTFraction56.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-1.0f) + "'", float18 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-1.0f) + "'", float20 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        int int17 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction11.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        float float32 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction11.plus(aDTFraction25);
        int int34 = aDTFraction11.numerator();
        java.lang.String str35 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction42.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        int int57 = aDTFraction51.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction47.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction38.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str63 = aDTFraction62.toString();
        boolean boolean64 = aDTFraction38.equals((java.lang.Object) str63);
        int int65 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction38.times((int) 'a');
        java.lang.String str68 = aDTFraction38.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0/-1" + "'", str68, "0/-1");
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction14.times(aDTFraction18);
        int int26 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction2.plus(aDTFraction14);
        java.lang.String str28 = aDTFraction27.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1/-35" + "'", str28, "-1/-35");
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction8.times((int) 'a');
        int int13 = aDTFraction12.denominator();
        java.lang.String str14 = aDTFraction12.toString();
        boolean boolean16 = aDTFraction12.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int20 = aDTFraction19.denominator();
        float float21 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction19.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction12.plus(aDTFraction19);
        int int24 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction2.plus(aDTFraction23);
        java.lang.Class<?> wildcardClass26 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0/-1" + "'", str14, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-100) + "'", int24 == (-100));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(97000, (int) (byte) 1);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        java.lang.String str20 = aDTFraction17.toString();
        java.lang.String str21 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction24);
        int int27 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        boolean boolean44 = aDTFraction36.equals((java.lang.Object) aDTFraction42);
        java.lang.String str45 = aDTFraction42.toString();
        java.lang.String str46 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        boolean boolean68 = aDTFraction60.equals((java.lang.Object) aDTFraction66);
        java.lang.String str69 = aDTFraction66.toString();
        java.lang.String str70 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction66.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction42.plus(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction72.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction26.times(aDTFraction75);
        boolean boolean77 = aDTFraction2.equals((java.lang.Object) aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction26.times(9700);
        java.lang.String str80 = aDTFraction26.toString();
        int int81 = aDTFraction26.numerator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/-1" + "'", str46, "0/-1");
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "0/1" + "'", str80, "0/1");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        int int14 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction8.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        int int27 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction17.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        boolean boolean45 = aDTFraction37.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction48.equals((java.lang.Object) 10);
        boolean boolean56 = aDTFraction43.equals((java.lang.Object) aDTFraction48);
        boolean boolean57 = aDTFraction21.equals((java.lang.Object) boolean56);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction2.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        boolean boolean68 = aDTFraction64.equals((java.lang.Object) ' ');
        boolean boolean70 = aDTFraction64.equals((java.lang.Object) "");
        int int71 = aDTFraction64.denominator();
        java.lang.String str72 = aDTFraction64.toString();
        java.lang.String str73 = aDTFraction64.toString();
        int int74 = aDTFraction64.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction64.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float83 = aDTFraction82.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction79.plus(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction82.times((int) 'a');
        int int87 = aDTFraction86.denominator();
        java.lang.String str88 = aDTFraction86.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction64.times(aDTFraction86);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.plus(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0/-1" + "'", str72, "0/-1");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0/-1" + "'", str73, "0/-1");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "0/-1" + "'", str88, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        float float26 = aDTFraction7.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        float float46 = aDTFraction41.value();
        int int47 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction58.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int71 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction58.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction55.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction41.plus(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction7.plus(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        java.lang.String str84 = aDTFraction78.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction78.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction78.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction7.times(aDTFraction88);
        float float90 = aDTFraction89.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/-1" + "'", str84, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + float90 + "' != '" + (-0.0f) + "'", float90 == (-0.0f));
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times(aDTFraction28);
        java.lang.String str30 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), (-10));
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction28.times(aDTFraction33);
        int int35 = aDTFraction28.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/10" + "'", str30, "0/10");
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        java.lang.String str21 = aDTFraction19.toString();
        int int22 = aDTFraction19.numerator();
        java.lang.String str23 = aDTFraction19.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction6.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) aDTFraction11);
        int int13 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction2.times(aDTFraction11);
        java.lang.String str15 = aDTFraction2.toString();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1/35" + "'", str15, "1/35");
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, 32);
        int int3 = aDTFraction2.numerator();
        int int4 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        boolean boolean28 = aDTFraction25.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction25.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        boolean boolean40 = aDTFraction36.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction36.times((int) (byte) 100);
        java.lang.String str43 = aDTFraction36.toString();
        int int44 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction36.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction36.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        java.lang.Class<?> wildcardClass57 = aDTFraction56.getClass();
        boolean boolean58 = aDTFraction36.equals((java.lang.Object) aDTFraction56);
        int int59 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        int int68 = aDTFraction62.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction62.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        int int81 = aDTFraction75.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction71.times(aDTFraction75);
        float float83 = aDTFraction82.value();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction82.times((int) (short) 0);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction36.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction25.plus(aDTFraction36);
        int int89 = aDTFraction88.numerator();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + 0.0f + "'", float83 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + 0.0f + "'", float86 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-100) + "'", int89 == (-100));
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        boolean boolean14 = aDTFraction8.equals((java.lang.Object) "");
        int int15 = aDTFraction8.denominator();
        java.lang.String str16 = aDTFraction8.toString();
        java.lang.String str17 = aDTFraction8.toString();
        int int18 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction2.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction19.times((int) (short) 10);
        java.lang.Class<?> wildcardClass22 = aDTFraction21.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        int int6 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean24 = aDTFraction22.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        int int37 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        boolean boolean54 = aDTFraction46.equals((java.lang.Object) aDTFraction52);
        java.lang.String str55 = aDTFraction52.toString();
        java.lang.String str56 = aDTFraction52.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction52.times(aDTFraction59);
        boolean boolean62 = aDTFraction27.equals((java.lang.Object) aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction22.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction9.times(aDTFraction63);
        boolean boolean65 = aDTFraction5.equals((java.lang.Object) aDTFraction63);
        java.lang.String str66 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.times(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0/-1" + "'", str56, "0/-1");
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction68);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times(aDTFraction28);
        java.lang.String str30 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), (-10));
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction28.times(aDTFraction33);
        java.lang.Class<?> wildcardClass35 = aDTFraction34.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/10" + "'", str30, "0/10");
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction68.times(aDTFraction71);
        float float73 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction71.reciprocal();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 10.0f + "'", float73 == 10.0f);
        org.junit.Assert.assertNotNull(aDTFraction74);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (-100));
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(3200);
        float float5 = aDTFraction2.value();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.01f + "'", float5 == 0.01f);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        int int13 = aDTFraction12.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction24.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction21.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        java.lang.String str52 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction39.times(aDTFraction45);
        float float54 = aDTFraction53.value();
        java.lang.String str55 = aDTFraction53.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction12.times(aDTFraction53);
        java.lang.String str57 = aDTFraction56.toString();
        java.lang.Class<?> wildcardClass58 = aDTFraction56.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-100" + "'", str55, "0/-100");
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-100" + "'", str57, "0/-100");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, 9700);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction10.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction10.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int56 = aDTFraction55.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction43.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction40.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        boolean boolean68 = aDTFraction64.equals((java.lang.Object) ' ');
        boolean boolean70 = aDTFraction64.equals((java.lang.Object) "");
        java.lang.String str71 = aDTFraction64.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction58.times(aDTFraction64);
        float float73 = aDTFraction72.value();
        java.lang.String str74 = aDTFraction72.toString();
        java.lang.String str75 = aDTFraction72.toString();
        boolean boolean76 = aDTFraction32.equals((java.lang.Object) str75);
        java.lang.String str77 = aDTFraction32.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction2.times(aDTFraction32);
        float float79 = aDTFraction78.value();
        int int80 = aDTFraction78.denominator();
        int int81 = aDTFraction78.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-100" + "'", str74, "0/-100");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-100" + "'", str75, "0/-100");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0/1" + "'", str77, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 0.0f + "'", float79 == 0.0f);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9700 + "'", int80 == 9700);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str6 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int30 = aDTFraction29.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction14.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction32.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction32.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction5.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        int int57 = aDTFraction51.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction51.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        int int68 = aDTFraction62.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction62.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        boolean boolean80 = aDTFraction76.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction76.times((int) (byte) 100);
        float float83 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction62.plus(aDTFraction76);
        boolean boolean85 = aDTFraction51.equals((java.lang.Object) aDTFraction76);
        float float86 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction32.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction2.times(aDTFraction87);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0/-1" + "'", str6, "0/-1");
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, (-100));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        java.lang.String str15 = aDTFraction8.toString();
        int int16 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction8.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction21.times(aDTFraction27);
        int int31 = aDTFraction27.numerator();
        int int32 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        boolean boolean42 = aDTFraction38.equals((java.lang.Object) ' ');
        boolean boolean44 = aDTFraction38.equals((java.lang.Object) "");
        float float45 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction27.times(aDTFraction38);
        boolean boolean47 = aDTFraction18.equals((java.lang.Object) aDTFraction27);
        int int48 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(aDTFraction18);
        int int50 = aDTFraction49.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        int int19 = aDTFraction18.denominator();
        float float20 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction46.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction18.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        int int64 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction65.times((-35));
        java.lang.String str68 = aDTFraction67.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-122500/3200" + "'", str68, "-122500/3200");
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction19);
        float float21 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-1.0f) + "'", float21 == (-1.0f));
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        int int33 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction31.times((int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction38.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        boolean boolean52 = aDTFraction44.equals((java.lang.Object) aDTFraction50);
        java.lang.String str53 = aDTFraction50.toString();
        java.lang.String str54 = aDTFraction50.toString();
        float float55 = aDTFraction50.value();
        int int56 = aDTFraction50.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int80 = aDTFraction79.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction67.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction64.times(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction50.plus(aDTFraction81);
        java.lang.String str84 = aDTFraction81.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction35.plus(aDTFraction81);
        int int86 = aDTFraction81.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "-100/100" + "'", str84, "-100/100");
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-100) + "'", int86 == (-100));
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, 1000000);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float7 = aDTFraction6.value();
        float float8 = aDTFraction6.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction16.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction16.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction6.times(aDTFraction16);
        int int38 = aDTFraction37.numerator();
        int int39 = aDTFraction37.denominator();
        java.lang.String str40 = aDTFraction37.toString();
        java.lang.String str41 = aDTFraction37.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction2.times(aDTFraction37);
        java.lang.String str43 = aDTFraction37.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/1000000" + "'", str3, "0/1000000");
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + (-0.0f) + "'", float7 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + (-0.0f) + "'", float8 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0/-1" + "'", str40, "0/-1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (-10));
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(97000);
        org.junit.Assert.assertNotNull(aDTFraction4);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction8);
        int int10 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (-52));
        java.lang.String str14 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction2.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) ' ');
        boolean boolean27 = aDTFraction21.equals((java.lang.Object) "");
        int int28 = aDTFraction21.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        boolean boolean45 = aDTFraction37.equals((java.lang.Object) aDTFraction43);
        java.lang.String str46 = aDTFraction43.toString();
        java.lang.String str47 = aDTFraction43.toString();
        float float48 = aDTFraction43.value();
        boolean boolean49 = aDTFraction21.equals((java.lang.Object) float48);
        int int50 = aDTFraction21.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction21.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction52.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction15.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction55.reciprocal();
        int int57 = aDTFraction56.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1/-52" + "'", str14, "-1/-52");
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/-1" + "'", str46, "0/-1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5200 + "'", int57 == 5200);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) 'a', (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction5.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction5.reciprocal();
        boolean boolean9 = aDTFraction2.equals((java.lang.Object) aDTFraction5);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        int int17 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction11.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        float float32 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction11.plus(aDTFraction25);
        int int34 = aDTFraction11.numerator();
        java.lang.String str35 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction42.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        int int57 = aDTFraction51.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction47.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction38.plus(aDTFraction47);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, 3200);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction63.reciprocal();
        int int65 = aDTFraction64.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction59.plus(aDTFraction64);
        java.lang.Class<?> wildcardClass67 = aDTFraction59.getClass();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 1.0f + "'", float60 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        java.lang.String str8 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        boolean boolean18 = aDTFraction14.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (byte) 100);
        java.lang.String str21 = aDTFraction14.toString();
        int int22 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction14.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction2.plus(aDTFraction14);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int42 = aDTFraction41.denominator();
        float float43 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction41.reciprocal();
        boolean boolean45 = aDTFraction38.equals((java.lang.Object) aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction25.times(aDTFraction44);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(1, 10000);
        java.lang.String str51 = aDTFraction50.toString();
        java.lang.String str52 = aDTFraction50.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction55.plus(aDTFraction58);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction50.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction46.times(aDTFraction59);
        int int63 = aDTFraction62.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/-1" + "'", str8, "0/-1");
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 1.0f + "'", float43 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1/10000" + "'", str51, "1/10000");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1/10000" + "'", str52, "1/10000");
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 0.0f + "'", float60 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5200 + "'", int63 == 5200);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        int int69 = aDTFraction56.numerator();
        float float70 = aDTFraction56.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, 10000);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction11.times(aDTFraction17);
        int int21 = aDTFraction17.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        java.lang.Class<?> wildcardClass31 = aDTFraction28.getClass();
        boolean boolean32 = aDTFraction8.equals((java.lang.Object) aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        boolean boolean42 = aDTFraction38.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (byte) 100);
        java.lang.String str45 = aDTFraction38.toString();
        int int46 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction28.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction47.times(52);
        boolean boolean50 = aDTFraction5.equals((java.lang.Object) aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction2.times(aDTFraction49);
        java.lang.String str52 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1/10000" + "'", str52, "1/10000");
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.plus(aDTFraction10);
        java.lang.String str12 = aDTFraction11.toString();
        java.lang.Object obj13 = null;
        boolean boolean14 = aDTFraction11.equals(obj13);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction2.plus(aDTFraction11);
        java.lang.String str16 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        int int35 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction22.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        java.lang.Class<?> wildcardClass45 = aDTFraction42.getClass();
        boolean boolean46 = aDTFraction22.equals((java.lang.Object) aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        boolean boolean56 = aDTFraction52.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction52.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction42.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction19.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction15.times(aDTFraction19);
        int int66 = aDTFraction15.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0/-1" + "'", str7, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-100/-100" + "'", str12, "-100/-100");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "200/100" + "'", str16, "200/100");
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 200 + "'", int66 == 200);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        boolean boolean23 = aDTFraction15.equals((java.lang.Object) aDTFraction21);
        java.lang.String str24 = aDTFraction21.toString();
        java.lang.String str25 = aDTFraction21.toString();
        float float26 = aDTFraction21.value();
        int int27 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction38.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int51 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction38.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction35.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction21.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        java.lang.String str62 = aDTFraction60.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.plus(aDTFraction65);
        java.lang.String str67 = aDTFraction66.toString();
        java.lang.Object obj68 = null;
        boolean boolean69 = aDTFraction66.equals(obj68);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction57.plus(aDTFraction66);
        java.lang.String str71 = aDTFraction70.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction21.times(aDTFraction70);
        boolean boolean73 = aDTFraction2.equals((java.lang.Object) aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0/-1" + "'", str25, "0/-1");
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0/-1" + "'", str62, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-100/-100" + "'", str67, "-100/-100");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "200/100" + "'", str71, "200/100");
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        int int6 = aDTFraction5.numerator();
        float float7 = aDTFraction5.value();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction20.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction21.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction26.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction49.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction17.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction64.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction65.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean71 = aDTFraction67.equals((java.lang.Object) aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        int int80 = aDTFraction74.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction70.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction61.times(aDTFraction70);
        java.lang.String str83 = aDTFraction70.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "100/100" + "'", str83, "100/100");
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        java.lang.String str13 = aDTFraction8.toString();
        float float14 = aDTFraction8.value();
        java.lang.String str15 = aDTFraction8.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction8.times(10000);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        int int25 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        java.lang.String str34 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction41.times(aDTFraction47);
        int int51 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction38.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction21.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction11.times(aDTFraction53);
        java.lang.String str55 = aDTFraction11.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        java.lang.String str23 = aDTFraction15.toString();
        java.lang.String str24 = aDTFraction15.toString();
        int int25 = aDTFraction15.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        int int25 = aDTFraction2.numerator();
        java.lang.String str26 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        java.lang.String str39 = aDTFraction32.toString();
        int int40 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction32.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction32.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        boolean boolean54 = aDTFraction50.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction50.times((int) (byte) 100);
        java.lang.String str57 = aDTFraction50.toString();
        int int58 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction50.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction63.times(aDTFraction69);
        int int73 = aDTFraction69.numerator();
        int int74 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        boolean boolean84 = aDTFraction80.equals((java.lang.Object) ' ');
        boolean boolean86 = aDTFraction80.equals((java.lang.Object) "");
        float float87 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction69.times(aDTFraction80);
        boolean boolean89 = aDTFraction60.equals((java.lang.Object) aDTFraction69);
        boolean boolean90 = aDTFraction44.equals((java.lang.Object) aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction2.plus(aDTFraction69);
        float float92 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + (-0.0f) + "'", float87 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + (-0.0f) + "'", float92 == (-0.0f));
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.reciprocal();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-1.0f) + "'", float5 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction6);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction29.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction31.times((int) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        boolean boolean39 = aDTFraction36.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction36.times(aDTFraction42);
        int int44 = aDTFraction42.denominator();
        int int45 = aDTFraction42.numerator();
        boolean boolean46 = aDTFraction33.equals((java.lang.Object) int45);
        int int47 = aDTFraction33.denominator();
        java.lang.String str48 = aDTFraction33.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction54.times((int) (byte) 100);
        java.lang.String str61 = aDTFraction54.toString();
        int int62 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction54.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(35, 52);
        boolean boolean71 = aDTFraction67.equals((java.lang.Object) 35);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction54.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction33.plus(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/1" + "'", str48, "0/1");
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction44.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction14.times(aDTFraction46);
        float float48 = aDTFraction47.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        int int34 = aDTFraction33.numerator();
        int int35 = aDTFraction33.denominator();
        java.lang.String str36 = aDTFraction33.toString();
        java.lang.String str37 = aDTFraction33.toString();
        java.lang.String str38 = aDTFraction33.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0/-1" + "'", str37, "0/-1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (-1));
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        boolean boolean20 = aDTFraction12.equals((java.lang.Object) aDTFraction18);
        java.lang.String str21 = aDTFraction18.toString();
        java.lang.String str22 = aDTFraction18.toString();
        float float23 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        boolean boolean34 = aDTFraction30.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction30.times((int) (byte) 100);
        java.lang.String str37 = aDTFraction30.toString();
        int int38 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction30.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction30.times((int) (byte) 10);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction42.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction2.times(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0/-1" + "'", str22, "0/-1");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0/-1" + "'", str37, "0/-1");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        boolean boolean14 = aDTFraction8.equals((java.lang.Object) "");
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        int int23 = aDTFraction17.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction17.times((int) '#');
        boolean boolean26 = aDTFraction8.equals((java.lang.Object) aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction2.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction8.times((int) (short) 0);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        int int18 = aDTFraction17.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction17.times((-10000));
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        boolean boolean56 = aDTFraction52.equals((java.lang.Object) ' ');
        boolean boolean58 = aDTFraction52.equals((java.lang.Object) "");
        java.lang.String str59 = aDTFraction52.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction46.times(aDTFraction63);
        int int65 = aDTFraction63.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction17.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction66.times(aDTFraction69);
        java.lang.String str71 = aDTFraction70.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0/-1" + "'", str59, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-10000" + "'", str71, "0/-10000");
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction14.denominator();
        java.lang.String str16 = aDTFraction14.toString();
        float float17 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction23.times((int) 'a');
        int int28 = aDTFraction27.denominator();
        java.lang.String str29 = aDTFraction27.toString();
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int35 = aDTFraction34.denominator();
        float float36 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction34.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction27.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction38.reciprocal();
        java.lang.String str40 = aDTFraction38.toString();
        boolean boolean41 = aDTFraction14.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction2.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction2.times(52);
        java.lang.String str45 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 1.0f + "'", float36 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-100/-100" + "'", str40, "-100/-100");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1/35" + "'", str45, "-1/35");
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction20.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction21.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction26.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction49.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction17.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        java.lang.String str66 = aDTFraction64.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction64.plus(aDTFraction69);
        int int71 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction77.reciprocal();
        java.lang.String str79 = aDTFraction77.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction74.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction69.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction60.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction82.times(9700);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "100/100" + "'", str79, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction84);
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-35), 97000);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction23.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction23.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction20.plus(aDTFraction23);
        float float44 = aDTFraction20.value();
        int int45 = aDTFraction20.numerator();
        java.lang.String str46 = aDTFraction20.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/-1" + "'", str46, "0/-1");
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(20000, (-13500));
        int int3 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-13500) + "'", int3 == (-13500));
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        boolean boolean25 = aDTFraction19.equals((java.lang.Object) "");
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction5.times(aDTFraction28);
        int int30 = aDTFraction5.denominator();
        int int31 = aDTFraction5.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.plus(aDTFraction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.plus(aDTFraction10);
        java.lang.String str12 = aDTFraction11.toString();
        java.lang.Object obj13 = null;
        boolean boolean14 = aDTFraction11.equals(obj13);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction2.plus(aDTFraction11);
        java.lang.Class<?> wildcardClass16 = aDTFraction15.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0/-1" + "'", str7, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-100/-100" + "'", str12, "-100/-100");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        java.lang.String str4 = aDTFraction3.toString();
        java.lang.Class<?> wildcardClass5 = aDTFraction3.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "97/10" + "'", str4, "97/10");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (-17));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction5.times(0);
        int int8 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction5);
        java.lang.Class<?> wildcardClass10 = aDTFraction5.getClass();
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        int int11 = aDTFraction2.numerator();
        java.lang.String str12 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str16 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction42.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction42.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction15.times(aDTFraction42);
        boolean boolean59 = aDTFraction2.equals((java.lang.Object) aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str63 = aDTFraction62.toString();
        float float64 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction42.plus(aDTFraction62);
        java.lang.Class<?> wildcardClass66 = aDTFraction65.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1/1" + "'", str63, "-1/1");
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-1.0f) + "'", float64 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, 1664);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        java.lang.String str15 = aDTFraction8.toString();
        int int16 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        int int52 = aDTFraction50.denominator();
        boolean boolean54 = aDTFraction50.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction8.times(aDTFraction50);
        int int56 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction2.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction2.times(1000000);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction59.times(1);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction61);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        java.lang.String str11 = aDTFraction9.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction9.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction18.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        float float39 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction18.plus(aDTFraction32);
        int int41 = aDTFraction18.numerator();
        java.lang.String str42 = aDTFraction18.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction18.times((int) ' ');
        boolean boolean46 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction5.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction49.times((int) (byte) 100);
        int int53 = aDTFraction52.numerator();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1000 + "'", int53 == 1000);
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        boolean boolean30 = aDTFraction25.equals((java.lang.Object) float29);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction33.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction34.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean40 = aDTFraction36.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        int int49 = aDTFraction43.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction39.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction25.plus(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, 32);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(9700);
        java.lang.Class<?> wildcardClass5 = aDTFraction4.getClass();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction24.times((int) (byte) 100);
        int int47 = aDTFraction46.numerator();
        int int48 = aDTFraction46.numerator();
        int int49 = aDTFraction46.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        boolean boolean28 = aDTFraction25.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction25.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        boolean boolean40 = aDTFraction36.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction36.times((int) (byte) 100);
        java.lang.String str43 = aDTFraction36.toString();
        int int44 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction36.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction36.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        java.lang.Class<?> wildcardClass57 = aDTFraction56.getClass();
        boolean boolean58 = aDTFraction36.equals((java.lang.Object) aDTFraction56);
        int int59 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        int int68 = aDTFraction62.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction62.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        int int81 = aDTFraction75.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction71.times(aDTFraction75);
        float float83 = aDTFraction82.value();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction82.times((int) (short) 0);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction36.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction25.plus(aDTFraction36);
        float float89 = aDTFraction88.value();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction88.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + 0.0f + "'", float83 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + 0.0f + "'", float86 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + 1.0f + "'", float89 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction90);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        int int5 = aDTFraction4.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction35.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        float float44 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int68 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction52.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction52.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction42.times(aDTFraction52);
        boolean boolean74 = aDTFraction39.equals((java.lang.Object) aDTFraction73);
        int int75 = aDTFraction39.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        java.lang.Class<?> wildcardClass17 = aDTFraction14.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        float float16 = aDTFraction5.value();
        float float17 = aDTFraction5.value();
        java.lang.String str18 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction21.reciprocal();
        int int23 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction21.reciprocal();
        java.lang.String str25 = aDTFraction24.toString();
        int int26 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(100, (-100));
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction24.plus(aDTFraction29);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.plus(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "32/10" + "'", str25, "32/10");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 2.2f + "'", float31 == 2.2f);
        org.junit.Assert.assertNotNull(aDTFraction32);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        int int21 = aDTFraction13.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        boolean boolean41 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        java.lang.String str42 = aDTFraction39.toString();
        java.lang.String str43 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction51.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        boolean boolean65 = aDTFraction57.equals((java.lang.Object) aDTFraction63);
        java.lang.String str66 = aDTFraction63.toString();
        java.lang.String str67 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction63.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction39.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction24.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction13.plus(aDTFraction24);
        int int73 = aDTFraction72.numerator();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        float float46 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction49.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction55.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction56.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean62 = aDTFraction58.equals((java.lang.Object) aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction65.plus(aDTFraction68);
        int int71 = aDTFraction65.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction61.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction78.times((int) 'a');
        int int83 = aDTFraction82.denominator();
        java.lang.String str84 = aDTFraction82.toString();
        boolean boolean86 = aDTFraction82.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int90 = aDTFraction89.denominator();
        float float91 = aDTFraction89.value();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction89.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction82.plus(aDTFraction89);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction61.plus(aDTFraction89);
        boolean boolean95 = aDTFraction14.equals((java.lang.Object) aDTFraction89);
        int int96 = aDTFraction89.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/-1" + "'", str84, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + 1.0f + "'", float91 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 100 + "'", int96 == 100);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction8.times(0);
        int int19 = aDTFraction18.numerator();
        java.lang.Object obj20 = null;
        boolean boolean21 = aDTFraction18.equals(obj20);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-32), 10000);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        int int52 = aDTFraction45.denominator();
        java.lang.String str53 = aDTFraction45.toString();
        java.lang.String str54 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction22.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction55.times(3500);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction55.times((-10));
        int int60 = aDTFraction59.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction12.times((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction14.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(aDTFraction14);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        java.lang.String str11 = aDTFraction9.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction9.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction18.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        float float39 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction18.plus(aDTFraction32);
        int int41 = aDTFraction18.numerator();
        java.lang.String str42 = aDTFraction18.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction18.times((int) ' ');
        boolean boolean46 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction5.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction5.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction14.times(aDTFraction18);
        int int26 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction2.plus(aDTFraction14);
        java.lang.String str28 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        int int37 = aDTFraction34.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int53 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction40.times(aDTFraction52);
        int int55 = aDTFraction40.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        boolean boolean65 = aDTFraction61.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction61.times((int) (byte) 100);
        java.lang.String str68 = aDTFraction61.toString();
        int int69 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction61.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction40.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction75.times(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float88 = aDTFraction87.value();
        boolean boolean89 = aDTFraction81.equals((java.lang.Object) aDTFraction87);
        java.lang.String str90 = aDTFraction87.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction72.plus(aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction72.reciprocal();
        boolean boolean93 = aDTFraction34.equals((java.lang.Object) aDTFraction92);
        float float94 = aDTFraction92.value();
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction2.plus(aDTFraction92);
        float float96 = aDTFraction92.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1/35" + "'", str28, "1/35");
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0/-1" + "'", str68, "0/-1");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + (-0.0f) + "'", float88 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0/-1" + "'", str90, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + float94 + "' != '" + (-1.0f) + "'", float94 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertTrue("'" + float96 + "' != '" + (-1.0f) + "'", float96 == (-1.0f));
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        int int16 = aDTFraction12.numerator();
        java.lang.String str17 = aDTFraction12.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction3.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction18.times((int) (short) 0);
        float float21 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction18.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 3.2f + "'", float21 == 3.2f);
        org.junit.Assert.assertNotNull(aDTFraction22);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        boolean boolean18 = aDTFraction14.equals((java.lang.Object) 'a');
        java.lang.String str19 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction27.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction51.equals((java.lang.Object) ' ');
        boolean boolean57 = aDTFraction51.equals((java.lang.Object) "");
        java.lang.String str58 = aDTFraction51.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction45.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int67 = aDTFraction66.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.times(aDTFraction66);
        int int69 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction14.plus(aDTFraction66);
        java.lang.String str71 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        boolean boolean81 = aDTFraction77.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction77.times((int) (byte) 100);
        java.lang.String str84 = aDTFraction77.toString();
        int int85 = aDTFraction77.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction77.times((int) ' ');
        float float88 = aDTFraction77.value();
        float float89 = aDTFraction77.value();
        java.lang.String str90 = aDTFraction77.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction14.times(aDTFraction77);
        int int92 = aDTFraction91.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0/-1" + "'", str19, "0/-1");
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/-1" + "'", str84, "0/-1");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + (-0.0f) + "'", float88 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-0.0f) + "'", float89 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0/-1" + "'", str90, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.reciprocal();
        int int39 = aDTFraction38.numerator();
        float float40 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction20.times(aDTFraction38);
        java.lang.String str42 = aDTFraction38.toString();
        java.lang.Class<?> wildcardClass43 = aDTFraction38.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1/-1" + "'", str42, "1/-1");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int19 = aDTFraction18.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction18);
        int int21 = aDTFraction6.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        java.lang.String str34 = aDTFraction27.toString();
        int int35 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction27.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction6.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction42.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction38.plus(aDTFraction47);
        int int50 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction3.plus(aDTFraction38);
        int int52 = aDTFraction3.denominator();
        int int53 = aDTFraction3.denominator();
        java.lang.String str54 = aDTFraction3.toString();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "32/10" + "'", str54, "32/10");
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction29.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(aDTFraction29);
        java.lang.String str46 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction49.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        int int68 = aDTFraction62.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction58.times(aDTFraction62);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction69.times((int) (short) 0);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction45.times(aDTFraction72);
        int int75 = aDTFraction45.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction81.reciprocal();
        java.lang.String str83 = aDTFraction81.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction78.times(aDTFraction81);
        int int85 = aDTFraction84.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction45.times(aDTFraction84);
        java.lang.Class<?> wildcardClass87 = aDTFraction45.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/-100" + "'", str46, "0/-100");
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 0.0f + "'", float70 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 0.0f + "'", float73 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "100/100" + "'", str83, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9700 + "'", int85 == 9700);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction49);
        int int54 = aDTFraction34.denominator();
        float float55 = aDTFraction34.value();
        float float56 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction34.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction58.times(10000);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction60.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction62.times(10);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-1.0f) + "'", float55 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-1.0f) + "'", float56 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction64);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        float float16 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction19.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        int int35 = aDTFraction29.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction25.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        int int52 = aDTFraction48.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction39.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction53.times(0);
        int int56 = aDTFraction55.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction36.times(aDTFraction55);
        boolean boolean58 = aDTFraction5.equals((java.lang.Object) aDTFraction57);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction2.equals((java.lang.Object) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (-1));
        boolean boolean14 = aDTFraction12.equals((java.lang.Object) 10);
        java.lang.String str15 = aDTFraction12.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction12);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        boolean boolean34 = aDTFraction26.equals((java.lang.Object) aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) 'a');
        int int37 = aDTFraction32.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction32.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction16.plus(aDTFraction39);
        java.lang.String str41 = aDTFraction40.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, 32);
        int int3 = aDTFraction2.numerator();
        java.lang.String str4 = aDTFraction2.toString();
        java.lang.Object obj5 = null;
        boolean boolean6 = aDTFraction2.equals(obj5);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/32" + "'", str4, "0/32");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        boolean boolean68 = aDTFraction60.equals((java.lang.Object) aDTFraction66);
        java.lang.String str69 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction51.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction8.times(aDTFraction51);
        int int73 = aDTFraction8.denominator();
        int int74 = aDTFraction8.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) ' ', 10);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.numerator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "32/10" + "'", str3, "32/10");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        int int52 = aDTFraction45.denominator();
        java.lang.String str53 = aDTFraction45.toString();
        java.lang.String str54 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction22.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        boolean boolean65 = aDTFraction61.equals((java.lang.Object) ' ');
        boolean boolean67 = aDTFraction61.equals((java.lang.Object) "");
        java.lang.String str68 = aDTFraction61.toString();
        int int69 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction72.plus(aDTFraction75);
        boolean boolean79 = aDTFraction75.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction75.times((int) (byte) 100);
        java.lang.String str82 = aDTFraction75.toString();
        int int83 = aDTFraction75.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction75.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction75.times((int) (byte) 10);
        boolean boolean88 = aDTFraction61.equals((java.lang.Object) aDTFraction87);
        int int89 = aDTFraction87.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction87.times((int) (byte) 1);
        int int92 = aDTFraction87.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction22.plus(aDTFraction87);
        int int94 = aDTFraction93.numerator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0/-1" + "'", str68, "0/-1");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0/-1" + "'", str82, "0/-1");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        int int14 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction8.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        int int27 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction17.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        boolean boolean45 = aDTFraction37.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction48.equals((java.lang.Object) 10);
        boolean boolean56 = aDTFraction43.equals((java.lang.Object) aDTFraction48);
        boolean boolean57 = aDTFraction21.equals((java.lang.Object) boolean56);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction2.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        int int67 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction61.plus(aDTFraction70);
        boolean boolean72 = aDTFraction58.equals((java.lang.Object) aDTFraction61);
        float float73 = aDTFraction58.value();
        int int74 = aDTFraction58.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 0.0f + "'", float73 == 0.0f);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        java.lang.String str12 = aDTFraction8.toString();
        int int13 = aDTFraction8.numerator();
        boolean boolean15 = aDTFraction8.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((int) '#', 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction18.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction8.times(aDTFraction19);
        int int21 = aDTFraction8.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        int int15 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction9.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        int int28 = aDTFraction22.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction18.times(aDTFraction22);
        java.lang.String str30 = aDTFraction22.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        float float35 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int59 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction46.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction43.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction43.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction33.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction43.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction43.times((int) (short) -1);
        int int69 = aDTFraction68.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction22.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction6.plus(aDTFraction68);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction71.times(5200);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        int int34 = aDTFraction33.numerator();
        int int35 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction33.times(10);
        float float38 = aDTFraction33.value();
        float float39 = aDTFraction33.value();
        java.lang.String str40 = aDTFraction33.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0/-1" + "'", str40, "0/-1");
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        int int24 = aDTFraction22.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        boolean boolean34 = aDTFraction27.equals((java.lang.Object) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (-1));
        boolean boolean39 = aDTFraction37.equals((java.lang.Object) 10);
        java.lang.String str40 = aDTFraction37.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction47.times((int) 'a');
        float float52 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        int int65 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        java.lang.String str74 = aDTFraction68.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction61.plus(aDTFraction68);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction75.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        boolean boolean82 = aDTFraction78.equals((java.lang.Object) aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction47.times(aDTFraction78);
        java.lang.String str84 = aDTFraction78.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction41.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction78.times((int) 'a');
        boolean boolean88 = aDTFraction22.equals((java.lang.Object) aDTFraction78);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction22.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0/-1" + "'", str40, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-1" + "'", str74, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + 0.0f + "'", float76 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/1" + "'", str84, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-32), (-1));
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times(1);
        int int19 = aDTFraction18.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        int int25 = aDTFraction16.numerator();
        java.lang.String str26 = aDTFraction16.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        boolean boolean40 = aDTFraction36.equals((java.lang.Object) ' ');
        boolean boolean42 = aDTFraction36.equals((java.lang.Object) "");
        int int43 = aDTFraction36.denominator();
        java.lang.String str44 = aDTFraction36.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction36.plus(aDTFraction47);
        int int49 = aDTFraction48.numerator();
        boolean boolean51 = aDTFraction48.equals((java.lang.Object) 10.0f);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        boolean boolean61 = aDTFraction57.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction57.times((int) (byte) 100);
        java.lang.String str64 = aDTFraction57.toString();
        int int65 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction57.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction57.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction72.plus(aDTFraction75);
        java.lang.Class<?> wildcardClass78 = aDTFraction77.getClass();
        boolean boolean79 = aDTFraction57.equals((java.lang.Object) aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction48.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction29.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction29.reciprocal();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-1" + "'", str64, "0/-1");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        boolean boolean28 = aDTFraction25.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction25.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction22.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction22.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-52), (int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction44.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int57 = aDTFraction56.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction44.times(aDTFraction56);
        java.lang.String str59 = aDTFraction56.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction70.times(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction65.plus(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction56.plus(aDTFraction65);
        boolean boolean82 = aDTFraction41.equals((java.lang.Object) aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction22.times(aDTFraction41);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction83.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "100/100" + "'", str59, "100/100");
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(aDTFraction83);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-13500), 520);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction2.equals((java.lang.Object) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (-1));
        boolean boolean14 = aDTFraction12.equals((java.lang.Object) 10);
        java.lang.String str15 = aDTFraction12.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction12);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction16.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction16);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        int int37 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction31.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction31.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction31.times(52);
        int int45 = aDTFraction31.numerator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction53.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(100, (-100));
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction55.times(aDTFraction58);
        java.lang.String str60 = aDTFraction55.toString();
        java.lang.Class<?> wildcardClass61 = aDTFraction55.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1/1" + "'", str60, "1/1");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        float float46 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction49.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction14.times((int) (byte) 0);
        float float55 = aDTFraction54.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction27.plus(aDTFraction41);
        java.lang.String str43 = aDTFraction41.toString();
        boolean boolean44 = aDTFraction20.equals((java.lang.Object) aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction20.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        int int59 = aDTFraction55.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        java.lang.String str68 = aDTFraction62.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.plus(aDTFraction62);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction69.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        boolean boolean76 = aDTFraction72.equals((java.lang.Object) aDTFraction75);
        float float77 = aDTFraction75.value();
        java.lang.String str78 = aDTFraction75.toString();
        boolean boolean79 = aDTFraction20.equals((java.lang.Object) str78);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0/-1" + "'", str68, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 0.0f + "'", float70 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-1.0f) + "'", float77 == (-1.0f));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-1/1" + "'", str78, "-1/1");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(35, (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction14.times(aDTFraction18);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction25.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction25.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int49 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction36.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction36.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction25.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction2.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        boolean boolean66 = aDTFraction62.equals((java.lang.Object) ' ');
        boolean boolean68 = aDTFraction62.equals((java.lang.Object) "");
        int int69 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float85 = aDTFraction84.value();
        boolean boolean86 = aDTFraction78.equals((java.lang.Object) aDTFraction84);
        java.lang.String str87 = aDTFraction84.toString();
        java.lang.String str88 = aDTFraction84.toString();
        float float89 = aDTFraction84.value();
        boolean boolean90 = aDTFraction62.equals((java.lang.Object) float89);
        int int91 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction62.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction93.times((int) ' ');
        java.lang.String str96 = aDTFraction93.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction36.plus(aDTFraction93);
        com.thealgorithms.maths.ADTFraction aDTFraction99 = aDTFraction97.times(2);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0/-1" + "'", str87, "0/-1");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "0/-1" + "'", str88, "0/-1");
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-0.0f) + "'", float89 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "0/-1" + "'", str96, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertNotNull(aDTFraction99);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        boolean boolean15 = aDTFraction11.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction11.times((int) (byte) 100);
        java.lang.String str18 = aDTFraction11.toString();
        int int19 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        int int35 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        boolean boolean47 = aDTFraction41.equals((java.lang.Object) "");
        float float48 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction30.times(aDTFraction41);
        boolean boolean50 = aDTFraction21.equals((java.lang.Object) aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction62.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction21.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction2.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction75.times((int) (byte) 0);
        float float78 = aDTFraction75.value();
        int int79 = aDTFraction75.numerator();
        int int80 = aDTFraction75.numerator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction75.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-13500), (-17));
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction14.times(aDTFraction18);
        int int26 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction2.plus(aDTFraction14);
        java.lang.String str28 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction34.times((int) (byte) 100);
        java.lang.String str41 = aDTFraction34.toString();
        int int42 = aDTFraction34.denominator();
        int int43 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        boolean boolean53 = aDTFraction49.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction49.times((int) (byte) 100);
        java.lang.String str56 = aDTFraction49.toString();
        int int57 = aDTFraction49.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction49.times((int) ' ');
        int int60 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction34.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction67.times((int) 'a');
        int int72 = aDTFraction71.denominator();
        java.lang.String str73 = aDTFraction71.toString();
        boolean boolean75 = aDTFraction71.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int79 = aDTFraction78.denominator();
        float float80 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction78.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction71.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction61.plus(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction2.plus(aDTFraction83);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1/35" + "'", str28, "1/35");
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0/-1" + "'", str56, "0/-1");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0/-1" + "'", str73, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 100 + "'", int79 == 100);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + 1.0f + "'", float80 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction16.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.times((int) (byte) 10);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction20.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        boolean boolean33 = aDTFraction29.equals((java.lang.Object) ' ');
        boolean boolean35 = aDTFraction29.equals((java.lang.Object) "");
        java.lang.String str36 = aDTFraction29.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        int int58 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction48.times(aDTFraction52);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction29.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction64.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction65.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction29.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction71.times(10000);
        boolean boolean75 = aDTFraction20.equals((java.lang.Object) aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float85 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction81.plus(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction78.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int91 = aDTFraction90.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction78.times(aDTFraction90);
        int int93 = aDTFraction90.denominator();
        int int94 = aDTFraction90.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction71.times(aDTFraction90);
        int int96 = aDTFraction90.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 0.0f + "'", float60 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 100 + "'", int93 == 100);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 100 + "'", int94 == 100);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 100 + "'", int96 == 100);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10000, (-32));
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        java.lang.Object obj24 = null;
        boolean boolean25 = aDTFraction22.equals(obj24);
        float float26 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction32.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction47.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction60.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int73 = aDTFraction72.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction60.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction57.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        boolean boolean85 = aDTFraction81.equals((java.lang.Object) ' ');
        boolean boolean87 = aDTFraction81.equals((java.lang.Object) "");
        java.lang.String str88 = aDTFraction81.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction75.times(aDTFraction81);
        float float90 = aDTFraction89.value();
        java.lang.String str91 = aDTFraction89.toString();
        int int92 = aDTFraction89.denominator();
        boolean boolean93 = aDTFraction47.equals((java.lang.Object) int92);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction22.plus(aDTFraction47);
        int int95 = aDTFraction94.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction94.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "0/-1" + "'", str88, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + float90 + "' != '" + (-0.0f) + "'", float90 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0/-100" + "'", str91, "0/-100");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-100) + "'", int92 == (-100));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        int int21 = aDTFraction13.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        boolean boolean41 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        java.lang.String str42 = aDTFraction39.toString();
        java.lang.String str43 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction51.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        boolean boolean65 = aDTFraction57.equals((java.lang.Object) aDTFraction63);
        java.lang.String str66 = aDTFraction63.toString();
        java.lang.String str67 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction63.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction39.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction24.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction13.plus(aDTFraction24);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction13.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction15.reciprocal();
        int int17 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction5.plus(aDTFraction15);
        float float19 = aDTFraction18.value();
        int int20 = aDTFraction18.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.3125f + "'", float19 == 0.3125f);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-32) + "'", int20 == (-32));
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 10);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction19.equals((java.lang.Object) 10);
        boolean boolean27 = aDTFraction14.equals((java.lang.Object) aDTFraction19);
        boolean boolean29 = aDTFraction14.equals((java.lang.Object) false);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction14.plus(aDTFraction32);
        int int34 = aDTFraction32.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction16.times(0);
        java.lang.String str19 = aDTFraction16.toString();
        float float20 = aDTFraction16.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0/1" + "'", str19, "0/1");
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction14.times((int) '#');
        boolean boolean23 = aDTFraction5.equals((java.lang.Object) aDTFraction22);
        int int24 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        int int33 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction27.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        int int44 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction38.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        boolean boolean56 = aDTFraction52.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction52.times((int) (byte) 100);
        float float59 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction38.plus(aDTFraction52);
        boolean boolean61 = aDTFraction27.equals((java.lang.Object) aDTFraction52);
        boolean boolean62 = aDTFraction22.equals((java.lang.Object) aDTFraction27);
        java.lang.String str63 = aDTFraction22.toString();
        java.lang.String str64 = aDTFraction22.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-1" + "'", str64, "0/-1");
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.reciprocal();
        int int11 = aDTFraction5.denominator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 10);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times((int) (byte) 100);
        java.lang.Class<?> wildcardClass6 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.numerator();
        java.lang.String str5 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction8.times(aDTFraction14);
        int int18 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        java.lang.String str27 = aDTFraction21.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction31.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction32.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        int int47 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction37.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction54.times((int) 'a');
        int int59 = aDTFraction58.denominator();
        java.lang.String str60 = aDTFraction58.toString();
        boolean boolean62 = aDTFraction58.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int66 = aDTFraction65.denominator();
        float float67 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction65.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction58.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction37.plus(aDTFraction65);
        int int71 = aDTFraction65.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction14.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction73.plus(aDTFraction74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/10" + "'", str3, "-1/10");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1/10" + "'", str5, "-1/10");
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + 1.0f + "'", float67 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        int int14 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction8.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        int int27 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction17.times(aDTFraction21);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction28.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int35 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction28.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int52 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction39.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction39.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction54.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction36.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction54.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction2.times(aDTFraction57);
        java.lang.Class<?> wildcardClass59 = aDTFraction58.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 1.0f + "'", float5 == 1.0f);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        java.lang.String str3 = aDTFraction2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "35/32" + "'", str3, "35/32");
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (-10000));
        int int3 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-10000) + "'", int3 == (-10000));
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times((-2));
        org.junit.Assert.assertNotNull(aDTFraction4);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction2.plus(aDTFraction7);
        float float15 = aDTFraction14.value();
        java.lang.String str16 = aDTFraction14.toString();
        int int17 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int21 = aDTFraction20.denominator();
        float float22 = aDTFraction20.value();
        float float23 = aDTFraction20.value();
        int int24 = aDTFraction20.numerator();
        boolean boolean25 = aDTFraction14.equals((java.lang.Object) int24);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-100/-100" + "'", str16, "-100/-100");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-100) + "'", int17 == (-100));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(0);
        int int71 = aDTFraction56.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction56.times(1);
        int int74 = aDTFraction56.numerator();
        java.lang.String str75 = aDTFraction56.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-1" + "'", str75, "0/-1");
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        java.lang.String str23 = aDTFraction22.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int39 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction26.times(aDTFraction38);
        float float41 = aDTFraction26.value();
        float float42 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction22.plus(aDTFraction26);
        float float44 = aDTFraction26.value();
        java.lang.String str45 = aDTFraction26.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/1" + "'", str23, "0/1");
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-1.0f) + "'", float41 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-1.0f) + "'", float42 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-1.0f) + "'", float44 == (-1.0f));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1/1" + "'", str45, "-1/1");
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        java.lang.String str20 = aDTFraction17.toString();
        java.lang.String str21 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction17.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction17.times((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction51);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 10);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times((int) (byte) 100);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        int int15 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction9.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        float float30 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction9.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction9.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction5.times(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction5.times(10);
        int int37 = aDTFraction5.denominator();
        java.lang.Class<?> wildcardClass38 = aDTFraction5.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 1000.0f + "'", float6 == 1000.0f);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        float float14 = aDTFraction5.value();
        int int15 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction21.times((int) (byte) 100);
        java.lang.String str28 = aDTFraction21.toString();
        int int29 = aDTFraction21.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction21.times((int) ' ');
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        boolean boolean42 = aDTFraction38.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (byte) 100);
        java.lang.String str45 = aDTFraction38.toString();
        int int46 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int62 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction49.times(aDTFraction61);
        int int64 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        boolean boolean74 = aDTFraction70.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction70.times((int) (byte) 100);
        java.lang.String str77 = aDTFraction70.toString();
        int int78 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction70.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction49.plus(aDTFraction80);
        int int82 = aDTFraction80.denominator();
        boolean boolean84 = aDTFraction80.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction38.times(aDTFraction80);
        boolean boolean86 = aDTFraction31.equals((java.lang.Object) aDTFraction85);
        int int87 = aDTFraction85.numerator();
        boolean boolean88 = aDTFraction5.equals((java.lang.Object) int87);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = new com.thealgorithms.maths.ADTFraction(1, (int) (byte) 100);
        java.lang.String str92 = aDTFraction91.toString();
        float float93 = aDTFraction91.value();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction5.times(aDTFraction91);
        int int95 = aDTFraction94.numerator();
        int int96 = aDTFraction94.denominator();
        int int97 = aDTFraction94.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0/-1" + "'", str77, "0/-1");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1/100" + "'", str92, "1/100");
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + 0.01f + "'", float93 == 0.01f);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-100) + "'", int96 == (-100));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction8.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        int int25 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean30 = aDTFraction28.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction33.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction54.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction33.times(aDTFraction69);
        boolean boolean71 = aDTFraction28.equals((java.lang.Object) aDTFraction70);
        boolean boolean72 = aDTFraction15.equals((java.lang.Object) aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction15.plus(aDTFraction75);
        boolean boolean77 = aDTFraction12.equals((java.lang.Object) aDTFraction75);
        int int78 = aDTFraction75.denominator();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        int int37 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction31.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction31.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction31.times(52);
        int int45 = aDTFraction31.denominator();
        int int46 = aDTFraction31.numerator();
        java.lang.Class<?> wildcardClass47 = aDTFraction31.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        int int34 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction33.times((-32));
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int52 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction39.times(aDTFraction51);
        java.lang.String str54 = aDTFraction51.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction60.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction51.plus(aDTFraction60);
        int int77 = aDTFraction51.numerator();
        java.lang.String str78 = aDTFraction51.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction36.plus(aDTFraction51);
        java.lang.String str80 = aDTFraction36.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "100/100" + "'", str54, "100/100");
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "100/100" + "'", str78, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "0/-1" + "'", str80, "0/-1");
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction9.denominator();
        java.lang.String str11 = aDTFraction9.toString();
        boolean boolean13 = aDTFraction9.equals((java.lang.Object) (byte) 10);
        int int14 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        int int42 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction29.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        java.lang.Class<?> wildcardClass52 = aDTFraction49.getClass();
        boolean boolean53 = aDTFraction29.equals((java.lang.Object) aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        boolean boolean63 = aDTFraction59.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.times((int) (byte) 100);
        java.lang.String str66 = aDTFraction59.toString();
        int int67 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction49.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction17.times(aDTFraction68);
        java.lang.String str70 = aDTFraction17.toString();
        float float71 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction9.plus(aDTFraction17);
        int int73 = aDTFraction9.denominator();
        int int74 = aDTFraction9.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction9.times((int) (short) 100);
        int int77 = aDTFraction9.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-1/1" + "'", str70, "-1/1");
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-1.0f) + "'", float71 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        int int19 = aDTFraction18.denominator();
        float float20 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction46.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction18.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        int int64 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction65.reciprocal();
        int int67 = aDTFraction65.numerator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3500 + "'", int67 == 3500);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = aDTFraction22.equals(obj23);
        float float25 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) ' ', (int) ' ');
        int int29 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction30.times(970000);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times((int) (byte) 10);
        java.lang.String str7 = aDTFraction6.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction13.times((int) 'a');
        int int18 = aDTFraction17.denominator();
        java.lang.String str19 = aDTFraction17.toString();
        boolean boolean21 = aDTFraction17.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        float float26 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction24.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction17.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction6.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction24.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction41.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int54 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction38.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        boolean boolean66 = aDTFraction62.equals((java.lang.Object) ' ');
        boolean boolean68 = aDTFraction62.equals((java.lang.Object) "");
        java.lang.String str69 = aDTFraction62.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction56.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int78 = aDTFraction77.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction77.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction83.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction84.times(52);
        float float87 = aDTFraction86.value();
        boolean boolean88 = aDTFraction77.equals((java.lang.Object) aDTFraction86);
        java.lang.String str89 = aDTFraction86.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction86.times(2);
        boolean boolean92 = aDTFraction30.equals((java.lang.Object) aDTFraction86);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction86.reciprocal();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-10/1" + "'", str7, "-10/1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0/-1" + "'", str19, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 1.0f + "'", float26 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + 166.4f + "'", float87 == 166.4f);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1664/10" + "'", str89, "1664/10");
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(aDTFraction93);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, 10000);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        int int12 = aDTFraction6.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction6.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        int int25 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction15.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str30 = aDTFraction29.toString();
        boolean boolean31 = aDTFraction15.equals((java.lang.Object) aDTFraction29);
        java.lang.String str32 = aDTFraction15.toString();
        int int33 = aDTFraction15.numerator();
        int int34 = aDTFraction15.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        boolean boolean47 = aDTFraction43.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction43.times((int) (byte) 100);
        float float50 = aDTFraction43.value();
        boolean boolean51 = aDTFraction37.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        boolean boolean61 = aDTFraction57.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction57.times((int) (byte) 100);
        java.lang.String str64 = aDTFraction57.toString();
        int int65 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction57.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction43.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction15.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int85 = aDTFraction84.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction72.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction72.reciprocal();
        int int88 = aDTFraction87.numerator();
        float float89 = aDTFraction87.value();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction69.plus(aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction2.plus(aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction87.reciprocal();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1/10000" + "'", str3, "1/10000");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1/10" + "'", str30, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0/-1" + "'", str32, "0/-1");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-1" + "'", str64, "0/-1");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-1.0f) + "'", float89 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction92);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction53.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(100, (-100));
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction55.times(aDTFraction58);
        int int60 = aDTFraction58.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-100) + "'", int60 == (-100));
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction21.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        int int35 = aDTFraction31.numerator();
        java.lang.String str36 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction22.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction37.times((int) (short) 0);
        boolean boolean40 = aDTFraction11.equals((java.lang.Object) aDTFraction39);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        java.lang.String str27 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction2.times(32);
        float float30 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(32, 35);
        java.lang.String str34 = aDTFraction33.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction2.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction33.times(0);
        java.lang.String str38 = aDTFraction37.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "32/35" + "'", str34, "32/35");
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/35" + "'", str38, "0/35");
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 10);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100/10" + "'", str3, "100/10");
        org.junit.Assert.assertNotNull(aDTFraction4);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, 10000);
        java.lang.String str3 = aDTFraction2.toString();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times((-17));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1/10000" + "'", str3, "1/10000");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1/10000" + "'", str4, "1/10000");
        org.junit.Assert.assertNotNull(aDTFraction6);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        boolean boolean18 = aDTFraction14.equals((java.lang.Object) 'a');
        java.lang.String str19 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction27.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction51.equals((java.lang.Object) ' ');
        boolean boolean57 = aDTFraction51.equals((java.lang.Object) "");
        java.lang.String str58 = aDTFraction51.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction45.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int67 = aDTFraction66.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.times(aDTFraction66);
        int int69 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction14.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction66.times(aDTFraction71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0/-1" + "'", str19, "0/-1");
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertNotNull(aDTFraction70);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        int int13 = aDTFraction12.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction24.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction21.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        java.lang.String str52 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction39.times(aDTFraction45);
        float float54 = aDTFraction53.value();
        java.lang.String str55 = aDTFraction53.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction12.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.times(0);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-100" + "'", str55, "0/-100");
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction58);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        java.lang.String str23 = aDTFraction15.toString();
        java.lang.String str24 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int28 = aDTFraction27.denominator();
        float float29 = aDTFraction27.value();
        float float30 = aDTFraction27.value();
        int int31 = aDTFraction27.denominator();
        boolean boolean32 = aDTFraction15.equals((java.lang.Object) aDTFraction27);
        int int33 = aDTFraction15.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10000), (int) (byte) 100);
        java.lang.String str3 = aDTFraction2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-10000/100" + "'", str3, "-10000/100");
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction6.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction13.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction20.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        java.lang.Class<?> wildcardClass41 = aDTFraction40.getClass();
        boolean boolean42 = aDTFraction20.equals((java.lang.Object) aDTFraction40);
        int int43 = aDTFraction20.numerator();
        boolean boolean44 = aDTFraction13.equals((java.lang.Object) aDTFraction20);
        java.lang.String str45 = aDTFraction20.toString();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        float float16 = aDTFraction5.value();
        float float17 = aDTFraction5.value();
        int int18 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(100, (int) (byte) -1);
        boolean boolean22 = aDTFraction5.equals((java.lang.Object) (byte) -1);
        int int23 = aDTFraction5.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        int int39 = aDTFraction35.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction26.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        java.lang.Class<?> wildcardClass49 = aDTFraction46.getClass();
        boolean boolean50 = aDTFraction26.equals((java.lang.Object) aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction56.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction46.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction22.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction71.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int84 = aDTFraction83.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction71.times(aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction71.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction86.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction68.plus(aDTFraction87);
        float float89 = aDTFraction68.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + 0.0f + "'", float89 == 0.0f);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        java.lang.String str28 = aDTFraction11.toString();
        int int29 = aDTFraction11.numerator();
        int int30 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        boolean boolean43 = aDTFraction39.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction39.times((int) (byte) 100);
        float float46 = aDTFraction39.value();
        boolean boolean47 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction53.times((int) (byte) 100);
        java.lang.String str60 = aDTFraction53.toString();
        int int61 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction39.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction11.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction68.reciprocal();
        int int84 = aDTFraction83.numerator();
        float float85 = aDTFraction83.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction65.plus(aDTFraction83);
        int int87 = aDTFraction65.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-1.0f) + "'", float85 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(32, 1);
        int int3 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        int int17 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        boolean boolean34 = aDTFraction26.equals((java.lang.Object) aDTFraction32);
        java.lang.String str35 = aDTFraction32.toString();
        java.lang.String str36 = aDTFraction32.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction39);
        boolean boolean42 = aDTFraction7.equals((java.lang.Object) aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction2.times(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(10);
        float float46 = aDTFraction2.value();
        java.lang.Class<?> wildcardClass47 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        java.lang.String str18 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction22.times(aDTFraction28);
        int int32 = aDTFraction28.numerator();
        int int33 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        boolean boolean43 = aDTFraction39.equals((java.lang.Object) ' ');
        boolean boolean45 = aDTFraction39.equals((java.lang.Object) "");
        float float46 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction28.times(aDTFraction39);
        int int48 = aDTFraction47.numerator();
        int int49 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction2.times(aDTFraction47);
        float float51 = aDTFraction47.value();
        int int52 = aDTFraction47.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1/1" + "'", str18, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction50.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int63 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction50.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction47.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        boolean boolean75 = aDTFraction71.equals((java.lang.Object) ' ');
        boolean boolean77 = aDTFraction71.equals((java.lang.Object) "");
        java.lang.String str78 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction39.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction80.times(10000);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction80.times((-1));
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction84.times(3200);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int90 = aDTFraction89.denominator();
        float float91 = aDTFraction89.value();
        float float92 = aDTFraction89.value();
        float float93 = aDTFraction89.value();
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction89.times((int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction86.plus(aDTFraction89);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0/-1" + "'", str78, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + (-0.0f) + "'", float91 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + (-0.0f) + "'", float92 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + (-0.0f) + "'", float93 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction96);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 10);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times((int) (byte) 100);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        int int15 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction9.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        float float30 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction9.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction9.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction5.times(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction5.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(97, (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        boolean boolean45 = aDTFraction42.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction42.times(aDTFraction48);
        int int50 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (-52));
        java.lang.String str54 = aDTFraction53.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction42.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction39.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction36.times(aDTFraction56);
        java.lang.Class<?> wildcardClass58 = aDTFraction57.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 1000.0f + "'", float6 == 1000.0f);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-1/-52" + "'", str54, "-1/-52");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        int int36 = aDTFraction32.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction32.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction20.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction32.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction48.times(aDTFraction54);
        int int58 = aDTFraction57.denominator();
        java.lang.String str59 = aDTFraction57.toString();
        float float60 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction66.times((int) 'a');
        int int71 = aDTFraction70.denominator();
        java.lang.String str72 = aDTFraction70.toString();
        boolean boolean74 = aDTFraction70.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int78 = aDTFraction77.denominator();
        float float79 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction77.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction70.plus(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction81.reciprocal();
        java.lang.String str83 = aDTFraction81.toString();
        boolean boolean84 = aDTFraction57.equals((java.lang.Object) aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction45.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction42.plus(aDTFraction85);
        java.lang.String str87 = aDTFraction86.toString();
        int int88 = aDTFraction86.denominator();
        java.lang.Class<?> wildcardClass89 = aDTFraction86.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0/-1" + "'", str59, "0/-1");
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0/-1" + "'", str72, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 1.0f + "'", float79 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "-100/-100" + "'", str83, "-100/-100");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "-1/35" + "'", str87, "-1/35");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, 10000);
        java.lang.String str3 = aDTFraction2.toString();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction7.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        int int26 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction16.times(aDTFraction20);
        java.lang.String str28 = aDTFraction20.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        float float33 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction44.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int57 = aDTFraction56.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction44.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction41.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction41.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction31.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction41.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction41.times((int) (short) -1);
        int int67 = aDTFraction66.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction20.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction2.times(aDTFraction66);
        java.lang.String str70 = aDTFraction69.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1/10000" + "'", str3, "1/10000");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1/10000" + "'", str4, "1/10000");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/10000" + "'", str70, "0/10000");
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction12.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str39 = aDTFraction38.toString();
        int int40 = aDTFraction38.denominator();
        boolean boolean41 = aDTFraction12.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction47.reciprocal();
        java.lang.String str49 = aDTFraction47.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times(aDTFraction47);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction38.plus(aDTFraction44);
        float float54 = aDTFraction44.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1/1" + "'", str39, "-1/1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "100/100" + "'", str49, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "10/97" + "'", str51, "10/97");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 0.10309278f + "'", float54 == 0.10309278f);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        int int18 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.reciprocal();
        java.lang.Class<?> wildcardClass20 = aDTFraction19.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "100/100" + "'", str17, "100/100");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        java.lang.String str15 = aDTFraction8.toString();
        int int16 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        int int52 = aDTFraction50.denominator();
        boolean boolean54 = aDTFraction50.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction8.times(aDTFraction50);
        int int56 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction2.plus(aDTFraction50);
        int int58 = aDTFraction57.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction18.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction19.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int41 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction40);
        int int43 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction24.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction47.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction40.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction15.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction59.times(10000);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction59.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction61);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        java.lang.Class<?> wildcardClass13 = aDTFraction12.getClass();
        boolean boolean14 = aDTFraction2.equals((java.lang.Object) aDTFraction12);
        java.lang.String str15 = aDTFraction2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-1.0f) + "'", float4 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1/1" + "'", str15, "-1/1");
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        java.lang.String str40 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction46.times((int) 'a');
        int int51 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction50.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction39.plus(aDTFraction53);
        int int55 = aDTFraction39.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0/-1" + "'", str40, "0/-1");
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction25.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction25.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction40.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) 'a', (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction45.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        int int56 = aDTFraction50.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction50.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        boolean boolean68 = aDTFraction64.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction64.times((int) (byte) 100);
        float float71 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction50.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction45.plus(aDTFraction64);
        java.lang.String str74 = aDTFraction73.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction40.times(aDTFraction73);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-97/1" + "'", str74, "-97/1");
        org.junit.Assert.assertNotNull(aDTFraction75);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        float float7 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction18.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction15.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction15.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction5.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction15.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction2.times(350);
        int int43 = aDTFraction42.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + (-0.0f) + "'", float7 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-350) + "'", int43 == (-350));
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.times(aDTFraction42);
        java.lang.String str45 = aDTFraction39.toString();
        java.lang.Class<?> wildcardClass46 = aDTFraction39.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '#', 1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times((-35));
        org.junit.Assert.assertNotNull(aDTFraction4);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction8.times((int) 'a');
        int int13 = aDTFraction12.denominator();
        java.lang.String str14 = aDTFraction12.toString();
        boolean boolean16 = aDTFraction12.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int20 = aDTFraction19.denominator();
        float float21 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction19.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction12.plus(aDTFraction19);
        int int24 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction2.plus(aDTFraction23);
        java.lang.String str26 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0/-1" + "'", str14, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-100) + "'", int24 == (-100));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100/35" + "'", str26, "100/35");
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        java.lang.String str28 = aDTFraction11.toString();
        int int29 = aDTFraction11.numerator();
        int int30 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        boolean boolean43 = aDTFraction39.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction39.times((int) (byte) 100);
        float float46 = aDTFraction39.value();
        boolean boolean47 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction53.times((int) (byte) 100);
        java.lang.String str60 = aDTFraction53.toString();
        int int61 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction39.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction11.plus(aDTFraction63);
        java.lang.String str66 = aDTFraction65.toString();
        java.lang.String str67 = aDTFraction65.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/1" + "'", str66, "0/1");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/1" + "'", str67, "0/1");
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        int int38 = aDTFraction34.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction8.times(aDTFraction25);
        java.lang.String str41 = aDTFraction8.toString();
        float float42 = aDTFraction8.value();
        float float43 = aDTFraction8.value();
        int int44 = aDTFraction8.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times((int) (short) -1);
        org.junit.Assert.assertNotNull(aDTFraction4);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction28.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        boolean boolean46 = aDTFraction42.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction42.times((int) (byte) 100);
        float float49 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction28.plus(aDTFraction42);
        java.lang.Class<?> wildcardClass51 = aDTFraction50.getClass();
        boolean boolean52 = aDTFraction25.equals((java.lang.Object) aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction25.times(1);
        float float55 = aDTFraction25.value();
        java.lang.String str56 = aDTFraction25.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 0.0f + "'", float55 == 0.0f);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0/100" + "'", str56, "0/100");
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) ' ', 2);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int58 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction45.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction59);
        int int61 = aDTFraction59.denominator();
        boolean boolean62 = aDTFraction34.equals((java.lang.Object) aDTFraction59);
        int int63 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction65.times((int) (short) 1);
        int int68 = aDTFraction67.numerator();
        int int69 = aDTFraction67.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-100) + "'", int63 == (-100));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction12.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction2.plus(aDTFraction34);
        int int36 = aDTFraction35.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction35.plus(aDTFraction37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        float float7 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction18.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction15.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction15.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction5.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction15.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.plus(aDTFraction15);
        float float40 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction41.times(3200);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + (-0.0f) + "'", float7 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction17.numerator();
        int int19 = aDTFraction17.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        java.lang.String str32 = aDTFraction25.toString();
        int int33 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction25.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction25.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction17.plus(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0/-1" + "'", str32, "0/-1");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction9.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction13.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction14.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction9.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction16.reciprocal();
        int int19 = aDTFraction18.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1664 + "'", int19 == 1664);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction11.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int24 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction11.times(aDTFraction23);
        int int26 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        java.lang.String str39 = aDTFraction32.toString();
        int int40 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction32.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction11.plus(aDTFraction42);
        int int44 = aDTFraction42.denominator();
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        int int54 = aDTFraction48.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction48.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction42.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int63 = aDTFraction62.denominator();
        boolean boolean65 = aDTFraction62.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction58.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction8.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction67.times((int) (byte) 100);
        java.lang.String str70 = aDTFraction67.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction67.times(1000000);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(97, (int) (byte) 100);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction67.times(aDTFraction77);
        float float80 = aDTFraction77.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-10000" + "'", str70, "0/-10000");
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 0.97f + "'", float78 == 0.97f);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + 0.97f + "'", float80 == 0.97f);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction33.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction48.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction30.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction48.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction65.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction62.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int75 = aDTFraction74.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction62.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction59.times(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float84 = aDTFraction83.value();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction80.plus(aDTFraction83);
        boolean boolean87 = aDTFraction83.equals((java.lang.Object) ' ');
        boolean boolean89 = aDTFraction83.equals((java.lang.Object) "");
        java.lang.String str90 = aDTFraction83.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction77.times(aDTFraction83);
        float float92 = aDTFraction91.value();
        java.lang.String str93 = aDTFraction91.toString();
        java.lang.String str94 = aDTFraction91.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction91.times((int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction51.times(aDTFraction91);
        int int98 = aDTFraction97.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + (-0.0f) + "'", float84 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0/-1" + "'", str90, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + (-0.0f) + "'", float92 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "0/-100" + "'", str93, "0/-100");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "0/-100" + "'", str94, "0/-100");
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-100) + "'", int98 == (-100));
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, 32);
        int int3 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(20000, 35);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(aDTFraction7);
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.times((int) (short) -1);
        int int20 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction19.times(20000);
        java.lang.Class<?> wildcardClass23 = aDTFraction22.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction29.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        int int54 = aDTFraction48.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction48.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        int int65 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction59.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        boolean boolean77 = aDTFraction73.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction73.times((int) (byte) 100);
        float float80 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction59.plus(aDTFraction73);
        boolean boolean82 = aDTFraction48.equals((java.lang.Object) aDTFraction73);
        float float83 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction29.times(aDTFraction48);
        float float85 = aDTFraction48.value();
        float float86 = aDTFraction48.value();
        int int87 = aDTFraction48.denominator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        int int25 = aDTFraction16.numerator();
        java.lang.String str26 = aDTFraction16.toString();
        int int27 = aDTFraction16.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        boolean boolean40 = aDTFraction36.equals((java.lang.Object) ' ');
        boolean boolean42 = aDTFraction36.equals((java.lang.Object) "");
        java.lang.String str43 = aDTFraction36.toString();
        int int44 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        boolean boolean54 = aDTFraction50.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction50.times((int) (byte) 100);
        java.lang.String str57 = aDTFraction50.toString();
        int int58 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction50.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction50.times((int) (byte) 10);
        boolean boolean63 = aDTFraction36.equals((java.lang.Object) aDTFraction62);
        int int64 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction74.times(aDTFraction80);
        int int84 = aDTFraction80.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction71.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction80.times((int) (byte) 0);
        int int88 = aDTFraction87.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction67.times(aDTFraction87);
        float float90 = aDTFraction89.value();
        java.lang.String str91 = aDTFraction89.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction62.plus(aDTFraction89);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction30.times(aDTFraction92);
        boolean boolean94 = aDTFraction16.equals((java.lang.Object) aDTFraction30);
        int int95 = aDTFraction16.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-1.0f) + "'", float68 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + float90 + "' != '" + (-0.0f) + "'", float90 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0/-1" + "'", str91, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        int int14 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction8.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        int int27 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction17.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        boolean boolean45 = aDTFraction37.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction48.equals((java.lang.Object) 10);
        boolean boolean56 = aDTFraction43.equals((java.lang.Object) aDTFraction48);
        boolean boolean57 = aDTFraction21.equals((java.lang.Object) boolean56);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction2.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction21.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction21.times(aDTFraction65);
        java.lang.Object obj67 = null;
        boolean boolean68 = aDTFraction21.equals(obj67);
        int int69 = aDTFraction21.denominator();
        int int70 = aDTFraction21.numerator();
        java.lang.String str71 = aDTFraction21.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(200, 350);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-52), (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction17.plus(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction21);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) '#');
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times((-32));
        java.lang.Class<?> wildcardClass6 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 2.857143f + "'", float3 == 2.857143f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        int int33 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        boolean boolean39 = aDTFraction36.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction36.times(aDTFraction42);
        int int44 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction36);
        int int46 = aDTFraction45.numerator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction45.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction42.reciprocal();
        float float45 = aDTFraction42.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 1.0f + "'", float45 == 1.0f);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction39.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean46 = aDTFraction44.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction52.times(aDTFraction58);
        int int62 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction49.times(aDTFraction58);
        int int64 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction74.times(aDTFraction80);
        int int84 = aDTFraction80.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction71.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction80.times((int) (byte) 0);
        int int88 = aDTFraction87.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction67.times(aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction58.plus(aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction44.plus(aDTFraction58);
        boolean boolean92 = aDTFraction39.equals((java.lang.Object) aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = new com.thealgorithms.maths.ADTFraction(32, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction39.plus(aDTFraction95);
        int int97 = aDTFraction96.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-1.0f) + "'", float68 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-100) + "'", int97 == (-100));
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        java.lang.String str8 = aDTFraction7.toString();
        float float9 = aDTFraction7.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/1" + "'", str8, "0/1");
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction14.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction14.times(35);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "100/100" + "'", str17, "100/100");
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction29.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction56.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction51.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction66.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction29.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction69.times((int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(1664, 1664);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction69.plus(aDTFraction74);
        int int76 = aDTFraction69.numerator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction39.times((int) (short) 1);
        java.lang.String str42 = aDTFraction41.toString();
        java.lang.String str43 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean51 = aDTFraction49.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        int int64 = aDTFraction54.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        boolean boolean81 = aDTFraction73.equals((java.lang.Object) aDTFraction79);
        java.lang.String str82 = aDTFraction79.toString();
        java.lang.String str83 = aDTFraction79.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float87 = aDTFraction86.value();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction79.times(aDTFraction86);
        boolean boolean89 = aDTFraction54.equals((java.lang.Object) aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction49.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction46.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction41.plus(aDTFraction54);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction41.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-100" + "'", str42, "0/-100");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-100" + "'", str43, "0/-100");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0/-1" + "'", str82, "0/-1");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0/-1" + "'", str83, "0/-1");
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + (-0.0f) + "'", float87 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction92);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction68.times(aDTFraction71);
        int int73 = aDTFraction68.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float83 = aDTFraction82.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction79.plus(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction76.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float89 = aDTFraction88.value();
        boolean boolean90 = aDTFraction82.equals((java.lang.Object) aDTFraction88);
        java.lang.String str91 = aDTFraction88.toString();
        java.lang.String str92 = aDTFraction88.toString();
        float float93 = aDTFraction88.value();
        int int94 = aDTFraction88.numerator();
        java.lang.Class<?> wildcardClass95 = aDTFraction88.getClass();
        boolean boolean96 = aDTFraction68.equals((java.lang.Object) aDTFraction88);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-0.0f) + "'", float89 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0/-1" + "'", str91, "0/-1");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "0/-1" + "'", str92, "0/-1");
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + (-0.0f) + "'", float93 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) '4');
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str7 = aDTFraction6.toString();
        java.lang.String str8 = aDTFraction6.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction6);
        java.lang.Class<?> wildcardClass10 = aDTFraction6.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100/52" + "'", str3, "100/52");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0/-1" + "'", str7, "0/-1");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/-1" + "'", str8, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) -1);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) 1.625f);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, (-10000));
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times(10000);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100/-10000" + "'", str3, "100/-10000");
        org.junit.Assert.assertNotNull(aDTFraction5);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(166400, (-10000));
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times((-17));
        org.junit.Assert.assertNotNull(aDTFraction4);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 350);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        float float25 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction27.plus(aDTFraction30);
        float float32 = aDTFraction31.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 35.0f + "'", float32 == 35.0f);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction16.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.times((int) (byte) 10);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction20.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        boolean boolean33 = aDTFraction29.equals((java.lang.Object) ' ');
        boolean boolean35 = aDTFraction29.equals((java.lang.Object) "");
        java.lang.String str36 = aDTFraction29.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        int int58 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction48.times(aDTFraction52);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction29.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction64.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction65.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction29.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction71.times(10000);
        boolean boolean75 = aDTFraction20.equals((java.lang.Object) aDTFraction71);
        int int76 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction20.times(520);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 0.0f + "'", float60 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction78);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction50.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int63 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction50.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction47.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        boolean boolean75 = aDTFraction71.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction71.times((int) (byte) 100);
        java.lang.String str78 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction47.times(aDTFraction71);
        int int80 = aDTFraction79.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction31.times(aDTFraction79);
        int int82 = aDTFraction81.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0/-1" + "'", str78, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        int int49 = aDTFraction46.numerator();
        int int50 = aDTFraction46.denominator();
        java.lang.String str51 = aDTFraction46.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction46.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        boolean boolean63 = aDTFraction59.equals((java.lang.Object) ' ');
        boolean boolean65 = aDTFraction59.equals((java.lang.Object) "");
        int int66 = aDTFraction59.denominator();
        java.lang.String str67 = aDTFraction59.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction59.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(97, 1);
        boolean boolean75 = aDTFraction59.equals((java.lang.Object) 97);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(20000, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction59.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction46.plus(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "100/100" + "'", str51, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        int int28 = aDTFraction25.denominator();
        int int29 = aDTFraction25.denominator();
        int int30 = aDTFraction25.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        int int46 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction52.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction53.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean59 = aDTFraction55.equals((java.lang.Object) aDTFraction58);
        int int60 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction49.times(aDTFraction58);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction42.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction63.plus(aDTFraction64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 0.028571429f + "'", float62 == 0.028571429f);
        org.junit.Assert.assertNotNull(aDTFraction63);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction50);
        float float53 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction50.plus(aDTFraction56);
        float float58 = aDTFraction57.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.028571429f) + "'", float58 == (-0.028571429f));
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction14.times((int) '#');
        boolean boolean23 = aDTFraction5.equals((java.lang.Object) aDTFraction22);
        int int24 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(10000, 1024);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction22.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction28.times(10000);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction30);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction19.reciprocal();
        float float35 = aDTFraction19.value();
        int int36 = aDTFraction19.numerator();
        float float37 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        boolean boolean47 = aDTFraction43.equals((java.lang.Object) ' ');
        boolean boolean49 = aDTFraction43.equals((java.lang.Object) "");
        java.lang.String str50 = aDTFraction43.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction62.times(aDTFraction66);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction43.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction73.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction19.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction19.times((-32));
        int int81 = aDTFraction80.numerator();
        float float82 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction14.times(aDTFraction80);
        int int84 = aDTFraction83.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-1.0f) + "'", float35 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-1.0f) + "'", float37 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 32 + "'", int81 == 32);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + 32.0f + "'", float82 == 32.0f);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction14.times(aDTFraction18);
        java.lang.String str26 = aDTFraction18.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction18.times((int) (byte) -1);
        int int29 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction2.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction33.reciprocal();
        int int35 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction33.reciprocal();
        int int37 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction28.times(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 32 + "'", int37 == 32);
        org.junit.Assert.assertNotNull(aDTFraction38);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) (byte) 100);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction27.times((-1));
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction29.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) ' ', (int) 'a');
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, (-100));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        java.lang.String str15 = aDTFraction8.toString();
        int int16 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction8.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction21.times(aDTFraction27);
        int int31 = aDTFraction27.numerator();
        int int32 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        boolean boolean42 = aDTFraction38.equals((java.lang.Object) ' ');
        boolean boolean44 = aDTFraction38.equals((java.lang.Object) "");
        float float45 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction27.times(aDTFraction38);
        boolean boolean47 = aDTFraction18.equals((java.lang.Object) aDTFraction27);
        int int48 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(aDTFraction18);
        java.lang.Class<?> wildcardClass50 = aDTFraction49.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction11.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int24 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction11.times(aDTFraction23);
        int int26 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        java.lang.String str39 = aDTFraction32.toString();
        int int40 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction32.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction11.plus(aDTFraction42);
        int int44 = aDTFraction42.denominator();
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        int int54 = aDTFraction48.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction48.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction42.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int63 = aDTFraction62.denominator();
        boolean boolean65 = aDTFraction62.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction58.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction8.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction67.times(97000);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction69);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        java.lang.String str20 = aDTFraction17.toString();
        java.lang.String str21 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction24);
        int int27 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        boolean boolean44 = aDTFraction36.equals((java.lang.Object) aDTFraction42);
        java.lang.String str45 = aDTFraction42.toString();
        java.lang.String str46 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        boolean boolean68 = aDTFraction60.equals((java.lang.Object) aDTFraction66);
        java.lang.String str69 = aDTFraction66.toString();
        java.lang.String str70 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction66.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction42.plus(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction72.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction26.times(aDTFraction75);
        boolean boolean77 = aDTFraction2.equals((java.lang.Object) aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction26.times(9700);
        float float80 = aDTFraction26.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/-1" + "'", str46, "0/-1");
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + 0.0f + "'", float80 == 0.0f);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction43.reciprocal();
        int int45 = aDTFraction43.numerator();
        java.lang.String str46 = aDTFraction43.toString();
        float float47 = aDTFraction43.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-52) + "'", int45 == (-52));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-52/-52" + "'", str46, "-52/-52");
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 1.0f + "'", float47 == 1.0f);
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        boolean boolean30 = aDTFraction26.equals((java.lang.Object) ' ');
        boolean boolean32 = aDTFraction26.equals((java.lang.Object) "");
        int int33 = aDTFraction26.denominator();
        java.lang.String str34 = aDTFraction26.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction26.plus(aDTFraction37);
        int int39 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction37.times((int) (byte) 10);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction41.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction20.plus(aDTFraction44);
        float float46 = aDTFraction44.value();
        int int47 = aDTFraction44.denominator();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.0f + "'", float42 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 0.0f + "'", float46 == 0.0f);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int16 = aDTFraction15.denominator();
        float float17 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction5.plus(aDTFraction15);
        float float19 = aDTFraction18.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 1.0f + "'", float17 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-3190), (int) (byte) 10);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.reciprocal();
        int int7 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times((int) 'a');
        int int10 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction16.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int42 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction29.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction26.times(aDTFraction43);
        int int45 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        java.lang.String str54 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times((int) (byte) 100);
        java.lang.String str67 = aDTFraction60.toString();
        int int68 = aDTFraction60.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction60.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction48.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction43.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction16.plus(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction16.times((-52));
        java.lang.String str76 = aDTFraction75.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/1" + "'", str76, "0/1");
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, 52);
        int int3 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction19.equals((java.lang.Object) 10);
        boolean boolean27 = aDTFraction14.equals((java.lang.Object) aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        int int43 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        java.lang.Class<?> wildcardClass53 = aDTFraction50.getClass();
        boolean boolean54 = aDTFraction30.equals((java.lang.Object) aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction50.times(aDTFraction66);
        boolean boolean68 = aDTFraction19.equals((java.lang.Object) aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction66.times(10);
        int int71 = aDTFraction66.numerator();
        java.lang.Class<?> wildcardClass72 = aDTFraction66.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        boolean boolean28 = aDTFraction22.equals((java.lang.Object) "");
        int int29 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        boolean boolean46 = aDTFraction38.equals((java.lang.Object) aDTFraction44);
        java.lang.String str47 = aDTFraction44.toString();
        java.lang.String str48 = aDTFraction44.toString();
        float float49 = aDTFraction44.value();
        boolean boolean50 = aDTFraction22.equals((java.lang.Object) float49);
        int int51 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction22.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction11.times(aDTFraction53);
        int int55 = aDTFraction53.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction8);
        int int10 = aDTFraction8.denominator();
        int int11 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction22.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction17.plus(aDTFraction31);
        java.lang.String str33 = aDTFraction32.toString();
        boolean boolean34 = aDTFraction8.equals((java.lang.Object) str33);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction8.reciprocal();
        int int36 = aDTFraction8.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/1" + "'", str33, "0/1");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32 + "'", int36 == 32);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass37 = aDTFraction34.getClass();
        boolean boolean38 = aDTFraction14.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction53);
        java.lang.String str55 = aDTFraction2.toString();
        float float56 = aDTFraction2.value();
        java.lang.String str57 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1/1" + "'", str55, "-1/1");
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-1.0f) + "'", float56 == (-1.0f));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1/1" + "'", str57, "-1/1");
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        boolean boolean15 = aDTFraction11.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction11.times((int) (byte) 100);
        java.lang.String str18 = aDTFraction11.toString();
        int int19 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        int int35 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        boolean boolean47 = aDTFraction41.equals((java.lang.Object) "");
        float float48 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction30.times(aDTFraction41);
        boolean boolean50 = aDTFraction21.equals((java.lang.Object) aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction62.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction21.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction2.plus(aDTFraction74);
        int int76 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction2.times((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction78.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction78);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction33.times((int) 'a');
        int int38 = aDTFraction37.numerator();
        float float39 = aDTFraction37.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(2, 10);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction8);
        int int10 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction8.times((int) (byte) 10);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction12.plus(aDTFraction14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 10.9375f + "'", float13 == 10.9375f);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (byte) 100);
        float float11 = aDTFraction2.value();
        java.lang.String str12 = aDTFraction2.toString();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100/100" + "'", str7, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.10309278f + "'", float11 == 0.10309278f);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10/97" + "'", str12, "10/97");
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction5.denominator();
        java.lang.String str9 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        float float17 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int41 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction25.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction15.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction25.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction12.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction5.times(aDTFraction12);
        int int51 = aDTFraction50.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0/-1" + "'", str9, "0/-1");
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int20 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction7.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction7.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction28.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction7.times(aDTFraction43);
        boolean boolean45 = aDTFraction2.equals((java.lang.Object) aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.times(97);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction2.reciprocal();
        int int49 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction16.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction30.times(1);
        java.lang.String str38 = aDTFraction37.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction18.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction18.times((-520));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction8.times((int) 'a');
        int int13 = aDTFraction12.denominator();
        java.lang.String str14 = aDTFraction12.toString();
        boolean boolean16 = aDTFraction12.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int20 = aDTFraction19.denominator();
        float float21 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction19.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction12.plus(aDTFraction19);
        int int24 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction2.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction23.times(970000);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0/-1" + "'", str14, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-100) + "'", int24 == (-100));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        int int25 = aDTFraction16.numerator();
        java.lang.String str26 = aDTFraction16.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        boolean boolean40 = aDTFraction36.equals((java.lang.Object) ' ');
        boolean boolean42 = aDTFraction36.equals((java.lang.Object) "");
        int int43 = aDTFraction36.denominator();
        java.lang.String str44 = aDTFraction36.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction36.plus(aDTFraction47);
        int int49 = aDTFraction48.numerator();
        boolean boolean51 = aDTFraction48.equals((java.lang.Object) 10.0f);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        boolean boolean61 = aDTFraction57.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction57.times((int) (byte) 100);
        java.lang.String str64 = aDTFraction57.toString();
        int int65 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction57.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction57.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction72.plus(aDTFraction75);
        java.lang.Class<?> wildcardClass78 = aDTFraction77.getClass();
        boolean boolean79 = aDTFraction57.equals((java.lang.Object) aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction48.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction29.plus(aDTFraction57);
        java.lang.String str82 = aDTFraction29.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-1" + "'", str64, "0/-1");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "-1/-1" + "'", str82, "-1/-1");
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-10.0f) + "'", float3 == (-10.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "10/-1" + "'", str4, "10/-1");
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        int int91 = aDTFraction2.denominator();
        int int92 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction93.reciprocal();
        java.lang.String str95 = aDTFraction93.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "100/100" + "'", str95, "100/100");
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int13 = aDTFraction12.denominator();
        float float14 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction12.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        float float20 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction28.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction18.times(aDTFraction28);
        int int50 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction15.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        boolean boolean61 = aDTFraction57.equals((java.lang.Object) ' ');
        boolean boolean63 = aDTFraction57.equals((java.lang.Object) "");
        float float64 = aDTFraction57.value();
        boolean boolean65 = aDTFraction15.equals((java.lang.Object) aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction8.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction66.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction67.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction67.reciprocal();
        java.lang.String str71 = aDTFraction70.toString();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "20000/10000" + "'", str71, "20000/10000");
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, (int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction6.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int16 = aDTFraction15.denominator();
        float float17 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction15.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        float float23 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction34.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction31.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction31.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction21.times(aDTFraction31);
        int int53 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction18.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        boolean boolean66 = aDTFraction60.equals((java.lang.Object) "");
        float float67 = aDTFraction60.value();
        boolean boolean68 = aDTFraction18.equals((java.lang.Object) aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction11.plus(aDTFraction18);
        java.lang.String str70 = aDTFraction69.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction2.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction69.reciprocal();
        int int73 = aDTFraction69.denominator();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 1.0f + "'", float17 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "20000/10000" + "'", str70, "20000/10000");
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10000 + "'", int73 == 10000);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        int int91 = aDTFraction2.denominator();
        int int92 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction2.times((-10000));
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction2.reciprocal();
        int int96 = aDTFraction95.numerator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 100 + "'", int96 == 100);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction18.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction19.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int41 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction40);
        int int43 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction24.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction47.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction40.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction15.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction59.times(10000);
        java.lang.String str62 = aDTFraction59.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0/100" + "'", str62, "0/100");
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        java.lang.String str49 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction48.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(32, (int) (byte) -1);
        int int55 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        java.lang.Class<?> wildcardClass57 = aDTFraction54.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/1000000" + "'", str49, "0/1000000");
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        int int38 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction44.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction23.plus(aDTFraction54);
        int int56 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        int int65 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction59.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        int int76 = aDTFraction70.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction70.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float85 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction81.plus(aDTFraction84);
        boolean boolean88 = aDTFraction84.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction84.times((int) (byte) 100);
        float float91 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction70.plus(aDTFraction84);
        boolean boolean93 = aDTFraction59.equals((java.lang.Object) aDTFraction84);
        boolean boolean94 = aDTFraction54.equals((java.lang.Object) aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction59.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction14.plus(aDTFraction59);
        java.lang.String str98 = aDTFraction14.toString();
        java.lang.Class<?> wildcardClass99 = aDTFraction14.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + (-0.0f) + "'", float91 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "0/-1" + "'", str98, "0/-1");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times((int) (byte) 10);
        java.lang.String str7 = aDTFraction6.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction13.times((int) 'a');
        int int18 = aDTFraction17.denominator();
        java.lang.String str19 = aDTFraction17.toString();
        boolean boolean21 = aDTFraction17.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        float float26 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction24.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction17.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction6.plus(aDTFraction24);
        java.lang.Class<?> wildcardClass30 = aDTFraction6.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-10/1" + "'", str7, "-10/1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0/-1" + "'", str19, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 1.0f + "'", float26 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        int int16 = aDTFraction12.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.String str25 = aDTFraction19.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        int int42 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction29.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction12.times(aDTFraction29);
        java.lang.String str45 = aDTFraction12.toString();
        float float46 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.times(aDTFraction12);
        int int48 = aDTFraction47.denominator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/10" + "'", str3, "-1/10");
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0/-1" + "'", str25, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-10) + "'", int48 == (-10));
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction50);
        float float53 = aDTFraction52.value();
        int int54 = aDTFraction52.denominator();
        int int55 = aDTFraction52.numerator();
        float float56 = aDTFraction52.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        int int33 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction31.times((int) (byte) 1);
        int int36 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        int int56 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction43.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction52.times((int) (byte) 0);
        int int60 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction39.times(aDTFraction59);
        float float62 = aDTFraction61.value();
        java.lang.String str63 = aDTFraction61.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction31.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (-52));
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction61.times(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction68);
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction20.times((-52));
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction23.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(97, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(1000);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        int int20 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction7.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction16.times((int) (byte) 0);
        int int24 = aDTFraction23.denominator();
        float float25 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int49 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction36.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction33.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction51.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction23.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        int int69 = aDTFraction68.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction64.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction73.reciprocal();
        int int75 = aDTFraction73.denominator();
        boolean boolean76 = aDTFraction68.equals((java.lang.Object) aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction4.plus(aDTFraction73);
        float float78 = aDTFraction77.value();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 97001.0f + "'", float78 == 97001.0f);
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction34.times((int) (byte) 100);
        java.lang.String str41 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction10.times(aDTFraction34);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction2.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction47.times(aDTFraction53);
        int int57 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        java.lang.String str66 = aDTFraction60.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction53.plus(aDTFraction60);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction67.times((int) '4');
        int int71 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction2.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int76 = aDTFraction75.denominator();
        boolean boolean78 = aDTFraction75.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction75.times(aDTFraction81);
        int int83 = aDTFraction81.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction81.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction85.times((-10));
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction87.times(1664);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction87);
        int int91 = aDTFraction87.denominator();
        int int92 = aDTFraction87.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 32 + "'", int83 == 32);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 32 + "'", int91 == 32);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-3500) + "'", int92 == (-3500));
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(35, (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction14.times(aDTFraction18);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction25.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction25.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int49 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction36.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction36.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction25.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction2.plus(aDTFraction36);
        int int57 = aDTFraction56.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction56.reciprocal();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-17) + "'", int57 == (-17));
        org.junit.Assert.assertNotNull(aDTFraction58);
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 10);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times((int) (byte) 100);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        int int15 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction9.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        float float30 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction9.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction9.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction5.times(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        int int50 = aDTFraction46.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction37.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        java.lang.Class<?> wildcardClass60 = aDTFraction57.getClass();
        boolean boolean61 = aDTFraction37.equals((java.lang.Object) aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        boolean boolean71 = aDTFraction67.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction67.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction57.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction34.times(aDTFraction78);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction34.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 1000.0f + "'", float6 == 1000.0f);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        int int16 = aDTFraction12.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.String str25 = aDTFraction19.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        int int42 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction29.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction12.times(aDTFraction29);
        java.lang.String str45 = aDTFraction12.toString();
        float float46 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.times(aDTFraction12);
        int int48 = aDTFraction12.numerator();
        int int49 = aDTFraction12.numerator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/10" + "'", str3, "-1/10");
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0/-1" + "'", str25, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.times((int) '#');
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        int int24 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction11.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        java.lang.Class<?> wildcardClass34 = aDTFraction31.getClass();
        boolean boolean35 = aDTFraction11.equals((java.lang.Object) aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction31.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction51);
        float float53 = aDTFraction51.value();
        boolean boolean54 = aDTFraction2.equals((java.lang.Object) float53);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-1.0f) + "'", float5 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 1.0f + "'", float53 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (-1));
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        boolean boolean20 = aDTFraction12.equals((java.lang.Object) aDTFraction18);
        java.lang.String str21 = aDTFraction18.toString();
        java.lang.String str22 = aDTFraction18.toString();
        float float23 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction18);
        float float25 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0/-1" + "'", str22, "0/-1");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-1.0f) + "'", float25 == (-1.0f));
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        java.lang.Class<?> wildcardClass7 = aDTFraction6.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/10" + "'", str3, "-1/10");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        float float16 = aDTFraction5.value();
        float float17 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        int int33 = aDTFraction29.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction29.times((int) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        boolean boolean42 = aDTFraction39.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction39.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction5.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction39.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int62 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction49.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction49.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction67.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction72.plus(aDTFraction75);
        boolean boolean79 = aDTFraction75.equals((java.lang.Object) ' ');
        boolean boolean81 = aDTFraction75.equals((java.lang.Object) "");
        float float82 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction85.reciprocal();
        int int87 = aDTFraction85.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction75.plus(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction67.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction89.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction46.times(aDTFraction91);
        int int93 = aDTFraction92.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction2.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction17.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean32 = aDTFraction30.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        int int45 = aDTFraction35.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction48.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        boolean boolean62 = aDTFraction54.equals((java.lang.Object) aDTFraction60);
        java.lang.String str63 = aDTFraction60.toString();
        java.lang.String str64 = aDTFraction60.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction60.times(aDTFraction67);
        boolean boolean70 = aDTFraction35.equals((java.lang.Object) aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction30.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction17.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction2.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) ' ');
        int int77 = aDTFraction76.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction2.plus(aDTFraction76);
        java.lang.String str79 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-1" + "'", str64, "0/-1");
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 32 + "'", int77 == 32);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "-1/1" + "'", str79, "-1/1");
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction12.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction12.times((int) (short) -1);
        int int38 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction37.times(10);
        java.lang.String str41 = aDTFraction37.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/1" + "'", str41, "0/1");
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(3200, (-52));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, 10);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction11.times(aDTFraction17);
        int int21 = aDTFraction17.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction17.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction24.times((int) '#');
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        float float32 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int56 = aDTFraction55.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction43.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction40.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction40.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction30.times(aDTFraction40);
        java.lang.String str62 = aDTFraction61.toString();
        boolean boolean63 = aDTFraction26.equals((java.lang.Object) aDTFraction61);
        float float64 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction5.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction2.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction66.times(3200);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0/-1" + "'", str62, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction68);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1000, 52);
        int int3 = aDTFraction2.numerator();
        java.lang.Class<?> wildcardClass4 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1664, 10000);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        int int46 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction42.times((int) (byte) 10);
        boolean boolean50 = aDTFraction42.equals((java.lang.Object) "3500/3200");
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction12.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction2.plus(aDTFraction34);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction34.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        int int31 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(10, 1664);
        java.lang.String str35 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction34.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction37.times(20000);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction28.plus(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "10/1664" + "'", str35, "10/1664");
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) 'a', (int) (short) 100);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "97/100" + "'", str3, "97/100");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times(aDTFraction28);
        java.lang.String str30 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction28.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int56 = aDTFraction55.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction43.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction40.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        boolean boolean68 = aDTFraction64.equals((java.lang.Object) ' ');
        boolean boolean70 = aDTFraction64.equals((java.lang.Object) "");
        java.lang.String str71 = aDTFraction64.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction58.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction58.times(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction32.times(aDTFraction76);
        int int78 = aDTFraction76.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/10" + "'", str30, "0/10");
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10000 + "'", int78 == 10000);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        int int5 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.reciprocal();
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.reciprocal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(aDTFraction9);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) '#');
        int int3 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float7 = aDTFraction6.value();
        java.lang.String str8 = aDTFraction6.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction6.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction2.plus(aDTFraction11);
        boolean boolean15 = aDTFraction11.equals((java.lang.Object) "32/35");
        java.lang.Class<?> wildcardClass16 = aDTFraction11.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + (-0.0f) + "'", float7 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/-1" + "'", str8, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        float float10 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction5.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction19.times((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction19.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction21);
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        int int5 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        int int14 = aDTFraction8.numerator();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) (short) 1);
        java.lang.String str17 = aDTFraction8.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction8.times((int) 'a');
        boolean boolean20 = aDTFraction2.equals((java.lang.Object) aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction2.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        boolean boolean39 = aDTFraction31.equals((java.lang.Object) aDTFraction37);
        java.lang.String str40 = aDTFraction37.toString();
        java.lang.String str41 = aDTFraction37.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        boolean boolean63 = aDTFraction55.equals((java.lang.Object) aDTFraction61);
        java.lang.String str64 = aDTFraction61.toString();
        java.lang.String str65 = aDTFraction61.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction61.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction37.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction68.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction68.times(1000);
        boolean boolean73 = aDTFraction2.equals((java.lang.Object) 1000);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0/-1" + "'", str40, "0/-1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-1" + "'", str64, "0/-1");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0/-1" + "'", str65, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        float float19 = aDTFraction11.value();
        java.lang.String str20 = aDTFraction11.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction38.times(52);
        java.lang.String str42 = aDTFraction38.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int67 = aDTFraction66.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction54.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction51.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction69.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction69.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction42.times(aDTFraction69);
        java.lang.String str86 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction2.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction2.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction89.times(3200);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction91.times(aDTFraction94);
        int int96 = aDTFraction91.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 3200 + "'", int96 == 3200);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        int int44 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str48 = aDTFraction47.toString();
        int int49 = aDTFraction47.denominator();
        boolean boolean50 = aDTFraction42.equals((java.lang.Object) aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction42.times(1000);
        java.lang.Class<?> wildcardClass53 = aDTFraction42.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-1/1" + "'", str48, "-1/1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction2.plus(aDTFraction7);
        float float15 = aDTFraction14.value();
        java.lang.String str16 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction22.times(aDTFraction28);
        int int32 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        java.lang.Class<?> wildcardClass42 = aDTFraction39.getClass();
        boolean boolean43 = aDTFraction19.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        boolean boolean53 = aDTFraction49.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction49.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction39.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        boolean boolean66 = aDTFraction62.equals((java.lang.Object) ' ');
        boolean boolean68 = aDTFraction62.equals((java.lang.Object) "");
        int int69 = aDTFraction62.denominator();
        java.lang.String str70 = aDTFraction62.toString();
        java.lang.String str71 = aDTFraction62.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction39.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction62.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction62.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction14.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction76.plus(aDTFraction78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-100/-100" + "'", str16, "-100/-100");
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction37.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction38.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction34.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction43.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        boolean boolean63 = aDTFraction55.equals((java.lang.Object) aDTFraction61);
        java.lang.String str64 = aDTFraction61.toString();
        java.lang.String str65 = aDTFraction61.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction61.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction70.times(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int83 = aDTFraction82.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction70.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction70.reciprocal();
        int int86 = aDTFraction85.numerator();
        float float87 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction67.times(aDTFraction85);
        java.lang.String str89 = aDTFraction85.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction43.times(aDTFraction85);
        java.lang.String str91 = aDTFraction85.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-1" + "'", str64, "0/-1");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0/-1" + "'", str65, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + (-1.0f) + "'", float87 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1/-1" + "'", str89, "1/-1");
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1/-1" + "'", str91, "1/-1");
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) 'a');
        int int18 = aDTFraction17.numerator();
        java.lang.Class<?> wildcardClass19 = aDTFraction17.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        int int9 = aDTFraction7.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction15.reciprocal();
        java.lang.String str17 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction12.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction7.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction19.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction19.times((-350));
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "100/100" + "'", str17, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        java.lang.String str24 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction14.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times((int) (byte) -1);
        java.lang.String str29 = aDTFraction14.toString();
        float float30 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction14.times(aDTFraction31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction57.times(aDTFraction63);
        int int67 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction54.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        java.lang.Class<?> wildcardClass77 = aDTFraction74.getClass();
        boolean boolean78 = aDTFraction54.equals((java.lang.Object) aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float85 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction81.plus(aDTFraction84);
        boolean boolean88 = aDTFraction84.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction84.times((int) (byte) 100);
        java.lang.String str91 = aDTFraction84.toString();
        int int92 = aDTFraction84.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction74.plus(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction42.times(aDTFraction93);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction25.plus(aDTFraction42);
        int int96 = aDTFraction95.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0/-1" + "'", str91, "0/-1");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-100) + "'", int96 == (-100));
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (byte) 100);
        float float11 = aDTFraction2.value();
        int int12 = aDTFraction2.denominator();
        int int13 = aDTFraction2.denominator();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100/100" + "'", str7, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.10309278f + "'", float11 == 0.10309278f);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(32);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction7.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction8.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean14 = aDTFraction10.equals((java.lang.Object) aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int30 = aDTFraction29.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction29);
        int int32 = aDTFraction29.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction13.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        int int42 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction36.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction36.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction29.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction47.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction47.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction4.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction52.times(0);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction54);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        java.lang.String str27 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction2.times(32);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction35.times((int) (byte) 100);
        java.lang.String str42 = aDTFraction35.toString();
        int int43 = aDTFraction35.denominator();
        int int44 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        boolean boolean54 = aDTFraction50.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction50.times((int) (byte) 100);
        java.lang.String str57 = aDTFraction50.toString();
        int int58 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction50.times((int) ' ');
        int int61 = aDTFraction60.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction35.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction29.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction62.times((int) (short) 1);
        int int66 = aDTFraction62.numerator();
        java.lang.String str67 = aDTFraction62.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/1" + "'", str67, "0/1");
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(1, 10000);
        java.lang.String str14 = aDTFraction13.toString();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction18.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        int int37 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction27.times(aDTFraction31);
        java.lang.String str39 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        float float44 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int68 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction52.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction52.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction42.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction52.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction52.times((int) (short) -1);
        int int78 = aDTFraction77.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction31.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction13.times(aDTFraction77);
        float float81 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction2.plus(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100/100" + "'", str7, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1/10000" + "'", str14, "1/10000");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1/10000" + "'", str15, "1/10000");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + 1.0E-4f + "'", float81 == 1.0E-4f);
        org.junit.Assert.assertNotNull(aDTFraction82);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction20.times(aDTFraction37);
        int int39 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        java.lang.String str48 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction54.times((int) (byte) 100);
        java.lang.String str61 = aDTFraction54.toString();
        int int62 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction54.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction42.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction37.times(aDTFraction65);
        int int67 = aDTFraction65.numerator();
        boolean boolean68 = aDTFraction12.equals((java.lang.Object) int67);
        float float69 = aDTFraction12.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 0.0f + "'", float69 == 0.0f);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        boolean boolean42 = aDTFraction34.equals((java.lang.Object) aDTFraction40);
        java.lang.String str43 = aDTFraction40.toString();
        java.lang.String str44 = aDTFraction40.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction52.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        boolean boolean66 = aDTFraction58.equals((java.lang.Object) aDTFraction64);
        java.lang.String str67 = aDTFraction64.toString();
        java.lang.String str68 = aDTFraction64.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction64.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float83 = aDTFraction82.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction79.plus(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction76.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float89 = aDTFraction88.value();
        boolean boolean90 = aDTFraction82.equals((java.lang.Object) aDTFraction88);
        java.lang.String str91 = aDTFraction88.toString();
        java.lang.String str92 = aDTFraction88.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction88.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction64.plus(aDTFraction94);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction49.times(aDTFraction64);
        boolean boolean97 = aDTFraction40.equals((java.lang.Object) aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction24.plus(aDTFraction40);
        int int99 = aDTFraction98.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0/-1" + "'", str68, "0/-1");
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-0.0f) + "'", float89 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0/-1" + "'", str91, "0/-1");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "0/-1" + "'", str92, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-100) + "'", int99 == (-100));
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times(aDTFraction28);
        java.lang.String str30 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        int int48 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction54.times((int) (byte) 100);
        java.lang.String str61 = aDTFraction54.toString();
        int int62 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction54.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction33.plus(aDTFraction64);
        int int66 = aDTFraction64.denominator();
        int int67 = aDTFraction64.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        int int76 = aDTFraction70.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction70.plus(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction64.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int85 = aDTFraction84.denominator();
        boolean boolean87 = aDTFraction84.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction80.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction28.times(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction28.times((int) (short) 100);
        float float92 = aDTFraction91.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/10" + "'", str30, "0/10");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + 0.0f + "'", float92 == 0.0f);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(5200, 5200);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(97000, (-13500));
        float float3 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-7.185185f) + "'", float3 == (-7.185185f));
    }
}


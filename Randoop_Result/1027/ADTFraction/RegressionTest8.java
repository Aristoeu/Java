package ADTFraction;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test4001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4001");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-52), (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction18.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction15.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction15.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction15.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction5.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.plus(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0/-1" + "'", str7, "0/-1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
    }

    @Test
    public void test4002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4002");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (byte) 10);
        int int3 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        boolean boolean20 = aDTFraction12.equals((java.lang.Object) aDTFraction18);
        java.lang.String str21 = aDTFraction18.toString();
        java.lang.String str22 = aDTFraction18.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction18.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction27.reciprocal();
        int int43 = aDTFraction42.numerator();
        float float44 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction24.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int49 = aDTFraction48.denominator();
        float float50 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction48.reciprocal();
        int int52 = aDTFraction51.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction45.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction45);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction54.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0/-1" + "'", str22, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-1.0f) + "'", float44 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 1.0f + "'", float50 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
    }

    @Test
    public void test4003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4003");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction33.times(aDTFraction49);
        int int51 = aDTFraction49.denominator();
        java.lang.String str52 = aDTFraction49.toString();
        int int53 = aDTFraction49.numerator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/1" + "'", str52, "0/1");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test4004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4004");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) '4');
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str7 = aDTFraction6.toString();
        java.lang.String str8 = aDTFraction6.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction6);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        float float14 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int38 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction22.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction22.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction12.times(aDTFraction22);
        int int44 = aDTFraction43.numerator();
        int int45 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction43.times((int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction2.plus(aDTFraction47);
        float float49 = aDTFraction47.value();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100/52" + "'", str3, "100/52");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0/-1" + "'", str7, "0/-1");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/-1" + "'", str8, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
    }

    @Test
    public void test4005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4005");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        int int17 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        boolean boolean34 = aDTFraction26.equals((java.lang.Object) aDTFraction32);
        java.lang.String str35 = aDTFraction32.toString();
        java.lang.String str36 = aDTFraction32.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction39);
        boolean boolean42 = aDTFraction7.equals((java.lang.Object) aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction2.times(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(10);
        int int46 = aDTFraction45.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        boolean boolean67 = aDTFraction63.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction63.times((int) (byte) 100);
        float float70 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction49.plus(aDTFraction63);
        int int72 = aDTFraction49.denominator();
        int int73 = aDTFraction49.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction45.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction74.times(0);
        java.lang.Object obj77 = null;
        boolean boolean78 = aDTFraction74.equals(obj77);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test4006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4006");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        int int18 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.times(aDTFraction30);
        int int36 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        int int56 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction43.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction52.times((int) (byte) 0);
        int int60 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction39.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction30.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction5.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, 32);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) (byte) 100);
        boolean boolean70 = aDTFraction66.equals((java.lang.Object) (byte) 0);
        float float71 = aDTFraction66.value();
        boolean boolean72 = aDTFraction5.equals((java.lang.Object) float71);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + 0.0f + "'", float71 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test4007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4007");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        int int34 = aDTFraction33.numerator();
        int int35 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction33.times((int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction33.times((int) '#');
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction39);
    }

    @Test
    public void test4008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4008");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        int int14 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction8.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        int int27 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction17.times(aDTFraction21);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction28.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int35 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction28.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int52 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction39.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction39.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction54.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction36.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction54.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction2.times(aDTFraction57);
        java.lang.String str59 = aDTFraction57.toString();
        java.lang.String str60 = aDTFraction57.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 1.0f + "'", float5 == 1.0f);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-1/1" + "'", str59, "-1/1");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-1/1" + "'", str60, "-1/1");
    }

    @Test
    public void test4009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4009");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-100), (int) (short) -1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times(32);
        java.lang.Class<?> wildcardClass6 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 100.0f + "'", float3 == 100.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test4010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4010");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        int int28 = aDTFraction11.numerator();
        java.lang.String str29 = aDTFraction11.toString();
        java.lang.String str30 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction33.reciprocal();
        java.lang.String str35 = aDTFraction33.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction11.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int52 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction39.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction39.reciprocal();
        java.lang.String str55 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction39.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction33.times(aDTFraction39);
        java.lang.Class<?> wildcardClass59 = aDTFraction33.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "100/100" + "'", str35, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1/1" + "'", str55, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test4011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4011");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-104), (-2));
    }

    @Test
    public void test4012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4012");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        boolean boolean46 = aDTFraction38.equals((java.lang.Object) aDTFraction44);
        java.lang.String str47 = aDTFraction44.toString();
        java.lang.String str48 = aDTFraction44.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction44.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction56.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        boolean boolean70 = aDTFraction62.equals((java.lang.Object) aDTFraction68);
        java.lang.String str71 = aDTFraction68.toString();
        java.lang.String str72 = aDTFraction68.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction68.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction44.plus(aDTFraction74);
        float float76 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction79.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction44.plus(aDTFraction79);
        boolean boolean83 = aDTFraction28.equals((java.lang.Object) aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction79.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0/-1" + "'", str72, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(aDTFraction84);
    }

    @Test
    public void test4013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4013");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, 10);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) '#');
        int int8 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        java.lang.String str13 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction11.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction7.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction7.times(3200);
        boolean boolean21 = aDTFraction2.equals((java.lang.Object) 3200);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/10" + "'", str3, "0/10");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test4014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4014");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        boolean boolean28 = aDTFraction25.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction25.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        java.lang.String str35 = aDTFraction33.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction33.plus(aDTFraction38);
        int int40 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction46.reciprocal();
        java.lang.String str48 = aDTFraction46.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction43.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction38.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction25.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction38.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction52.reciprocal();
        java.lang.Class<?> wildcardClass54 = aDTFraction52.getClass();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "100/100" + "'", str48, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test4015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4015");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, (-17));
    }

    @Test
    public void test4016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4016");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) ' ', 10);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        java.lang.String str4 = aDTFraction3.toString();
        int int5 = aDTFraction3.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction13.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction31.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction47.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int60 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction47.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction47.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction65.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction76.plus(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction73.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction68.plus(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction47.times(aDTFraction83);
        boolean boolean85 = aDTFraction31.equals((java.lang.Object) aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float92 = aDTFraction91.value();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction88.plus(aDTFraction91);
        int int94 = aDTFraction88.numerator();
        int int95 = aDTFraction88.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction31.plus(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction3.times(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "10/32" + "'", str4, "10/32");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + (-0.0f) + "'", float92 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction97);
    }

    @Test
    public void test4017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4017");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction29.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction56.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction51.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction66.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction29.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction69.times((int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(1664, 1664);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction69.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction74.reciprocal();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
    }

    @Test
    public void test4018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4018");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        int int45 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        java.lang.String str54 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.plus(aDTFraction48);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction32.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction32.times(2);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction32.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction61);
    }

    @Test
    public void test4019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4019");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        float float25 = aDTFraction16.value();
        java.lang.String str26 = aDTFraction16.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        java.lang.String str39 = aDTFraction32.toString();
        int int40 = aDTFraction32.denominator();
        int int41 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.times((int) ' ');
        int int58 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction32.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction65.times((int) 'a');
        int int70 = aDTFraction69.denominator();
        java.lang.String str71 = aDTFraction69.toString();
        boolean boolean73 = aDTFraction69.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int77 = aDTFraction76.denominator();
        float float78 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction76.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction69.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction59.plus(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction81.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction16.times(aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction83.reciprocal();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 1.0f + "'", float78 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
    }

    @Test
    public void test4020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4020");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        float float35 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int59 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction46.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction43.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction43.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction33.times(aDTFraction43);
        int int65 = aDTFraction64.numerator();
        int int66 = aDTFraction64.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction64.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction28.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction72.plus(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction72.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction78.times(aDTFraction81);
        boolean boolean84 = aDTFraction82.equals((java.lang.Object) (byte) 0);
        boolean boolean85 = aDTFraction69.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction69.times((-52));
        int int88 = aDTFraction87.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test4021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4021");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        int int39 = aDTFraction35.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction26.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        java.lang.Class<?> wildcardClass49 = aDTFraction46.getClass();
        boolean boolean50 = aDTFraction26.equals((java.lang.Object) aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction56.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction46.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction22.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction71.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int84 = aDTFraction83.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction71.times(aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction71.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction86.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction68.plus(aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        int int90 = aDTFraction89.denominator();
        java.lang.String str91 = aDTFraction89.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction89.reciprocal();
        java.lang.Class<?> wildcardClass93 = aDTFraction89.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-52) + "'", int90 == (-52));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "52/-52" + "'", str91, "52/-52");
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test4022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4022");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(166400, 3500);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int6 = aDTFraction5.denominator();
        float float7 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction5.reciprocal();
        int int9 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        int int22 = aDTFraction12.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean27 = aDTFraction25.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        int int40 = aDTFraction30.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        boolean boolean57 = aDTFraction49.equals((java.lang.Object) aDTFraction55);
        java.lang.String str58 = aDTFraction55.toString();
        java.lang.String str59 = aDTFraction55.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction62);
        boolean boolean65 = aDTFraction30.equals((java.lang.Object) aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction25.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction12.times(aDTFraction66);
        boolean boolean68 = aDTFraction8.equals((java.lang.Object) aDTFraction66);
        java.lang.String str69 = aDTFraction66.toString();
        java.lang.String str70 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction66.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction73.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction2.times(aDTFraction75);
        int int77 = aDTFraction76.denominator();
        int int78 = aDTFraction76.denominator();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0/-1" + "'", str59, "0/-1");
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 350000 + "'", int77 == 350000);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 350000 + "'", int78 == 350000);
    }

    @Test
    public void test4023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4023");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        float float6 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        int int16 = aDTFraction10.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction10.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        int int29 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction19.times(aDTFraction23);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        int int47 = aDTFraction43.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction34.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        java.lang.Class<?> wildcardClass57 = aDTFraction54.getClass();
        boolean boolean58 = aDTFraction34.equals((java.lang.Object) aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        boolean boolean68 = aDTFraction64.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction64.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction54.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction30.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction76.plus(aDTFraction79);
        int int81 = aDTFraction79.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction79.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction2.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction83.times(166400);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction85.times(90);
        java.lang.Class<?> wildcardClass88 = aDTFraction87.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 1.0f + "'", float6 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.0f + "'", float31 == 0.0f);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test4024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4024");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str7 = aDTFraction6.toString();
        int int8 = aDTFraction6.denominator();
        float float9 = aDTFraction6.value();
        float float10 = aDTFraction6.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction6.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction3.plus(aDTFraction6);
        int int14 = aDTFraction3.numerator();
        int int15 = aDTFraction3.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction3.reciprocal();
        int int17 = aDTFraction16.denominator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1/1" + "'", str7, "-1/1");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-1.0f) + "'", float9 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-1.0f) + "'", float10 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
    }

    @Test
    public void test4025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4025");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(3045, (-17));
    }

    @Test
    public void test4026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4026");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction40.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction41.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction5.times(aDTFraction43);
        int int45 = aDTFraction44.numerator();
        java.lang.Class<?> wildcardClass46 = aDTFraction44.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test4027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4027");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        int int4 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        java.lang.String str6 = aDTFraction5.toString();
        int int7 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(100, (-100));
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction22.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int35 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction22.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction19.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        boolean boolean47 = aDTFraction43.equals((java.lang.Object) ' ');
        boolean boolean49 = aDTFraction43.equals((java.lang.Object) "");
        java.lang.String str50 = aDTFraction43.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction37.times(aDTFraction43);
        float float52 = aDTFraction51.value();
        java.lang.String str53 = aDTFraction51.toString();
        int int54 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.times((int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        java.lang.Class<?> wildcardClass58 = aDTFraction56.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "32/10" + "'", str6, "32/10");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-100" + "'", str53, "0/-100");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-100) + "'", int54 == (-100));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test4028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4028");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        java.lang.String str49 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction48.times((int) (short) 100);
        int int52 = aDTFraction51.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/1000000" + "'", str49, "0/1000000");
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test4029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4029");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        java.lang.String str8 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction20.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        boolean boolean50 = aDTFraction44.equals((java.lang.Object) "");
        java.lang.String str51 = aDTFraction44.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction38.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction38.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int60 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.times(aDTFraction59);
        int int62 = aDTFraction59.numerator();
        int int63 = aDTFraction59.denominator();
        java.lang.String str64 = aDTFraction59.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction59.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction2.plus(aDTFraction59);
        java.lang.Class<?> wildcardClass68 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/-1" + "'", str8, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "100/100" + "'", str64, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test4030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4030");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        float float19 = aDTFraction14.value();
        int int20 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction23.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction24.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean30 = aDTFraction26.equals((java.lang.Object) aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        int int39 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction29.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction14.times(aDTFraction29);
        float float42 = aDTFraction41.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
    }

    @Test
    public void test4031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4031");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        int int39 = aDTFraction35.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction26.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        java.lang.Class<?> wildcardClass49 = aDTFraction46.getClass();
        boolean boolean50 = aDTFraction26.equals((java.lang.Object) aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction56.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction46.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction22.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction66.times(35);
        int int71 = aDTFraction66.denominator();
        float float72 = aDTFraction66.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + 1.0f + "'", float72 == 1.0f);
    }

    @Test
    public void test4032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4032");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        int int28 = aDTFraction11.numerator();
        java.lang.String str29 = aDTFraction11.toString();
        java.lang.String str30 = aDTFraction11.toString();
        int int31 = aDTFraction11.denominator();
        int int32 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        int int41 = aDTFraction35.numerator();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) (short) 1);
        java.lang.String str44 = aDTFraction35.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction35.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction11.times(aDTFraction35);
        java.lang.Class<?> wildcardClass48 = aDTFraction11.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test4033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4033");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean12 = aDTFraction10.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction24);
        int int30 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        int int50 = aDTFraction46.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction37.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction46.times((int) (byte) 0);
        int int54 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction33.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction24.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction10.plus(aDTFraction24);
        boolean boolean58 = aDTFraction7.equals((java.lang.Object) aDTFraction24);
        int int59 = aDTFraction24.denominator();
        java.lang.Class<?> wildcardClass60 = aDTFraction24.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-1.0f) + "'", float34 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test4034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4034");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction8.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        boolean boolean22 = aDTFraction14.equals((java.lang.Object) aDTFraction20);
        java.lang.String str23 = aDTFraction20.toString();
        java.lang.String str24 = aDTFraction20.toString();
        float float25 = aDTFraction20.value();
        int int26 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int50 = aDTFraction49.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction37.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction34.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction20.plus(aDTFraction51);
        java.lang.String str54 = aDTFraction51.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction3.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        java.lang.String str64 = aDTFraction58.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        boolean boolean74 = aDTFraction70.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction70.times((int) (byte) 100);
        java.lang.String str77 = aDTFraction70.toString();
        int int78 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction70.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction58.plus(aDTFraction70);
        java.lang.String str82 = aDTFraction70.toString();
        boolean boolean83 = aDTFraction55.equals((java.lang.Object) aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction86.times(0);
        int int89 = aDTFraction86.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction70.times(aDTFraction86);
        java.lang.Class<?> wildcardClass91 = aDTFraction90.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-100/100" + "'", str54, "-100/100");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-1" + "'", str64, "0/-1");
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0/-1" + "'", str77, "0/-1");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0/-1" + "'", str82, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test4035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4035");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(97, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(1000);
        int int5 = aDTFraction2.numerator();
        java.lang.Class<?> wildcardClass6 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test4036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4036");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction44.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction50.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int63 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction50.times(aDTFraction62);
        float float65 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction47.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction47.times((-2));
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-1.0f) + "'", float65 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction68);
    }

    @Test
    public void test4037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4037");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        boolean boolean48 = aDTFraction40.equals((java.lang.Object) aDTFraction46);
        java.lang.String str49 = aDTFraction46.toString();
        java.lang.String str50 = aDTFraction46.toString();
        float float51 = aDTFraction46.value();
        int int52 = aDTFraction46.numerator();
        boolean boolean53 = aDTFraction30.equals((java.lang.Object) int52);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test4038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4038");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction34.times((int) (byte) 100);
        java.lang.String str41 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction10.times(aDTFraction34);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction2.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction47.times(aDTFraction53);
        int int57 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        java.lang.String str66 = aDTFraction60.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction53.plus(aDTFraction60);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction67.times((int) '4');
        int int71 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction2.times(aDTFraction67);
        java.lang.String str73 = aDTFraction67.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction67.times((int) (short) 0);
        float float76 = aDTFraction67.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0/1" + "'", str73, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + 0.0f + "'", float76 == 0.0f);
    }

    @Test
    public void test4039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4039");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction20.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction21.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction26.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction49.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction17.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        boolean boolean71 = aDTFraction67.equals((java.lang.Object) ' ');
        boolean boolean73 = aDTFraction67.equals((java.lang.Object) "");
        java.lang.String str74 = aDTFraction67.toString();
        int int75 = aDTFraction67.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction61.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction67.times((-17));
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-1" + "'", str74, "0/-1");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction78);
    }

    @Test
    public void test4040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4040");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction37.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction38.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction34.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction43.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction43.reciprocal();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
    }

    @Test
    public void test4041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4041");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times((-52));
        int int7 = aDTFraction6.denominator();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test4042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4042");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (-10000));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction5.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction5.plus(aDTFraction19);
        float float28 = aDTFraction19.value();
        java.lang.String str29 = aDTFraction19.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((-1));
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction2.times(aDTFraction31);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction31.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
    }

    @Test
    public void test4043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4043");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-100), (int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction3.plus(aDTFraction6);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction13.times((int) 'a');
        int int18 = aDTFraction17.denominator();
        java.lang.String str19 = aDTFraction17.toString();
        int int20 = aDTFraction17.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.times(9700);
        int int23 = aDTFraction22.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, 100);
        java.lang.String str27 = aDTFraction26.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction26.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction22.times(aDTFraction28);
        boolean boolean30 = aDTFraction7.equals((java.lang.Object) aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0/-1" + "'", str19, "0/-1");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-1/100" + "'", str27, "-1/100");
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test4044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4044");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        java.lang.String str23 = aDTFraction22.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction44.times((int) (byte) 10);
        java.lang.Object obj47 = new java.lang.Object();
        boolean boolean48 = aDTFraction46.equals(obj47);
        float float49 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.times(10000);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction22.plus(aDTFraction46);
        float float53 = aDTFraction46.value();
        java.lang.String str54 = aDTFraction46.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/1" + "'", str23, "0/1");
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/1" + "'", str54, "0/1");
    }

    @Test
    public void test4045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4045");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction46.reciprocal();
        float float50 = aDTFraction49.value();
        int int51 = aDTFraction49.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 1.0f + "'", float50 == 1.0f);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
    }

    @Test
    public void test4046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4046");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int30 = aDTFraction29.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction29);
        int int32 = aDTFraction17.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        boolean boolean42 = aDTFraction38.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (byte) 100);
        java.lang.String str45 = aDTFraction38.toString();
        int int46 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction38.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction17.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction52.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction53.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean59 = aDTFraction55.equals((java.lang.Object) aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction49.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction58.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction14.times(aDTFraction58);
        boolean boolean63 = aDTFraction2.equals((java.lang.Object) aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(1000000, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction2.plus(aDTFraction66);
        int int68 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test4047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4047");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction14.times((int) '#');
        boolean boolean23 = aDTFraction5.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        int int32 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction26.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction35.times(aDTFraction39);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction5.times(aDTFraction46);
        java.lang.Class<?> wildcardClass49 = aDTFraction5.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test4048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4048");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction8.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        boolean boolean22 = aDTFraction14.equals((java.lang.Object) aDTFraction20);
        java.lang.String str23 = aDTFraction20.toString();
        java.lang.String str24 = aDTFraction20.toString();
        float float25 = aDTFraction20.value();
        int int26 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int50 = aDTFraction49.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction37.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction34.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction20.plus(aDTFraction51);
        java.lang.String str54 = aDTFraction51.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction3.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        java.lang.String str64 = aDTFraction58.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        boolean boolean74 = aDTFraction70.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction70.times((int) (byte) 100);
        java.lang.String str77 = aDTFraction70.toString();
        int int78 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction70.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction58.plus(aDTFraction70);
        java.lang.String str82 = aDTFraction70.toString();
        boolean boolean83 = aDTFraction55.equals((java.lang.Object) aDTFraction70);
        float float84 = aDTFraction70.value();
        float float85 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction70.times(9700);
        java.lang.Class<?> wildcardClass88 = aDTFraction87.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-100/100" + "'", str54, "-100/100");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-1" + "'", str64, "0/-1");
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0/-1" + "'", str77, "0/-1");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0/-1" + "'", str82, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + (-0.0f) + "'", float84 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test4049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4049");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction5.times((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction5.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction34);
    }

    @Test
    public void test4050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4050");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10000, (int) (byte) 100);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times(970000);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        java.lang.Class<?> wildcardClass7 = aDTFraction6.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "10000/100" + "'", str3, "10000/100");
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test4051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4051");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times((int) (byte) 1);
        java.lang.String str5 = aDTFraction4.toString();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1/-1" + "'", str5, "-1/-1");
    }

    @Test
    public void test4052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4052");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10000), (-17));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        java.lang.String str11 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        boolean boolean21 = aDTFraction17.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction17.times((int) (byte) 100);
        java.lang.String str24 = aDTFraction17.toString();
        int int25 = aDTFraction17.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction17.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction5.plus(aDTFraction17);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction28.times((-13500));
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction2.plus(aDTFraction31);
        int int33 = aDTFraction31.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test4053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4053");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(198336, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4054");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        int int6 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean24 = aDTFraction22.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        int int37 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        boolean boolean54 = aDTFraction46.equals((java.lang.Object) aDTFraction52);
        java.lang.String str55 = aDTFraction52.toString();
        java.lang.String str56 = aDTFraction52.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction52.times(aDTFraction59);
        boolean boolean62 = aDTFraction27.equals((java.lang.Object) aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction22.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction9.times(aDTFraction63);
        boolean boolean65 = aDTFraction5.equals((java.lang.Object) aDTFraction63);
        java.lang.String str66 = aDTFraction63.toString();
        java.lang.String str67 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction63.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction70.reciprocal();
        java.lang.Class<?> wildcardClass73 = aDTFraction72.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0/-1" + "'", str56, "0/-1");
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test4055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4055");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str10 = aDTFraction9.toString();
        int int11 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction9.reciprocal();
        java.lang.String str13 = aDTFraction12.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction6.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        java.lang.String str19 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction17.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        int int32 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction26.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        float float47 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction26.plus(aDTFraction40);
        int int49 = aDTFraction26.numerator();
        java.lang.String str50 = aDTFraction26.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction26.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction56.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction57.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean63 = aDTFraction59.equals((java.lang.Object) aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction62.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction53.plus(aDTFraction62);
        java.lang.String str75 = aDTFraction74.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction81.times((int) 'a');
        float float86 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float93 = aDTFraction92.value();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction89.plus(aDTFraction92);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction81.times(aDTFraction94);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction74.times(aDTFraction95);
        int int97 = aDTFraction74.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction12.plus(aDTFraction74);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/10" + "'", str3, "-1/10");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1/10" + "'", str10, "-1/10");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "10/-1" + "'", str13, "10/-1");
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0/-1" + "'", str19, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-100/-100" + "'", str75, "-100/-100");
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + (-0.0f) + "'", float93 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-100) + "'", int97 == (-100));
        org.junit.Assert.assertNotNull(aDTFraction98);
    }

    @Test
    public void test4056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4056");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(32, 35);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "32/35" + "'", str3, "32/35");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
    }

    @Test
    public void test4057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4057");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction9.denominator();
        java.lang.String str11 = aDTFraction9.toString();
        int int12 = aDTFraction9.numerator();
        java.lang.String str13 = aDTFraction9.toString();
        int int14 = aDTFraction9.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test4058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4058");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction18.times((int) '#');
        int int21 = aDTFraction20.denominator();
        int int22 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int38 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction37);
        int int40 = aDTFraction25.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        boolean boolean50 = aDTFraction46.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction46.times((int) (byte) 100);
        java.lang.String str53 = aDTFraction46.toString();
        int int54 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction46.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction25.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        int int84 = aDTFraction82.denominator();
        boolean boolean85 = aDTFraction57.equals((java.lang.Object) aDTFraction82);
        int int86 = aDTFraction82.numerator();
        boolean boolean87 = aDTFraction20.equals((java.lang.Object) aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction82.reciprocal();
        int int89 = aDTFraction82.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction92.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction82.plus(aDTFraction93);
        java.lang.Class<?> wildcardClass95 = aDTFraction94.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-100) + "'", int86 == (-100));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test4059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4059");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (-35));
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(3045);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        boolean boolean14 = aDTFraction10.equals((java.lang.Object) ' ');
        boolean boolean16 = aDTFraction10.equals((java.lang.Object) "");
        float float17 = aDTFraction10.value();
        java.lang.String str18 = aDTFraction10.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        boolean boolean28 = aDTFraction24.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction24.times((int) (byte) 100);
        java.lang.String str31 = aDTFraction24.toString();
        int int32 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction24.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        int int47 = aDTFraction43.numerator();
        int int48 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        boolean boolean60 = aDTFraction54.equals((java.lang.Object) "");
        float float61 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction43.times(aDTFraction54);
        boolean boolean63 = aDTFraction34.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction66.plus(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float83 = aDTFraction82.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction79.plus(aDTFraction82);
        int int85 = aDTFraction79.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction75.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction34.plus(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction10.plus(aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction4.plus(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
    }

    @Test
    public void test4060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4060");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.denominator();
        int int9 = aDTFraction2.denominator();
        int int10 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test4061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4061");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction12.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str39 = aDTFraction38.toString();
        int int40 = aDTFraction38.denominator();
        boolean boolean41 = aDTFraction12.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int68 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction52.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        boolean boolean80 = aDTFraction76.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction76.times((int) (byte) 100);
        java.lang.String str83 = aDTFraction76.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction52.times(aDTFraction76);
        java.lang.String str85 = aDTFraction84.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction44.times(aDTFraction84);
        java.lang.String str87 = aDTFraction44.toString();
        int int88 = aDTFraction44.numerator();
        boolean boolean89 = aDTFraction38.equals((java.lang.Object) aDTFraction44);
        int int90 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction38.times((int) (short) 1);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1/1" + "'", str39, "-1/1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0/-1" + "'", str83, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0/-1" + "'", str85, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "100/100" + "'", str87, "100/100");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(aDTFraction92);
    }

    @Test
    public void test4062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4062");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(9700, 970000);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.01f + "'", float3 == 0.01f);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "9700/970000" + "'", str4, "9700/970000");
    }

    @Test
    public void test4063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4063");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        java.lang.String str11 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        java.lang.String str24 = aDTFraction20.toString();
        int int25 = aDTFraction20.numerator();
        int int26 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction2.plus(aDTFraction20);
        float float28 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
    }

    @Test
    public void test4064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4064");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, 1);
        int int3 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test4065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4065");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-104), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4066");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction46.reciprocal();
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction49.reciprocal();
        int int52 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction51.times(0);
        int int55 = aDTFraction51.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 1.0f + "'", float50 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
    }

    @Test
    public void test4067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4067");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (-10));
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test4068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4068");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10), 52);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times((int) (short) 0);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction5.times(1000);
        java.lang.Class<?> wildcardClass9 = aDTFraction5.getClass();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.1923077f) + "'", float3 == (-0.1923077f));
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 0.0f + "'", float6 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test4069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4069");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, 9700);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(10, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 1);
        int int10 = aDTFraction9.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.plus(aDTFraction9);
        java.lang.String str12 = aDTFraction11.toString();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-25/35" + "'", str12, "-25/35");
    }

    @Test
    public void test4070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4070");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        int int21 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction5.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int41 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction40);
        int int43 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        boolean boolean53 = aDTFraction49.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction49.times((int) (byte) 100);
        java.lang.String str56 = aDTFraction49.toString();
        int int57 = aDTFraction49.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction49.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction28.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        int int69 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction63.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        boolean boolean81 = aDTFraction77.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction77.times((int) (byte) 100);
        float float84 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction63.plus(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction63.times((int) 'a');
        int int88 = aDTFraction87.numerator();
        boolean boolean89 = aDTFraction60.equals((java.lang.Object) int88);
        int int90 = aDTFraction60.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction25.times(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0/-1" + "'", str56, "0/-1");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + (-0.0f) + "'", float84 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction91);
    }

    @Test
    public void test4071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4071");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction5.reciprocal();
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) "10/1664");
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction12.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        boolean boolean37 = aDTFraction33.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction33.times((int) (byte) 100);
        java.lang.String str40 = aDTFraction33.toString();
        int int41 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction33.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction12.plus(aDTFraction43);
        int int45 = aDTFraction44.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(10, (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.times(aDTFraction48);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction53.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int66 = aDTFraction65.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction53.times(aDTFraction65);
        int int68 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction49.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction49.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction5.times(aDTFraction49);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/10" + "'", str3, "-1/10");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0/-1" + "'", str40, "0/-1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-1.0f) + "'", float50 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
    }

    @Test
    public void test4072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4072");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        float float23 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        float float43 = aDTFraction38.value();
        int int44 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int68 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction52.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction38.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        java.lang.String str76 = aDTFraction74.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction74.plus(aDTFraction79);
        boolean boolean81 = aDTFraction38.equals((java.lang.Object) aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(100, (int) '4');
        boolean boolean85 = aDTFraction38.equals((java.lang.Object) aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction20.times(aDTFraction84);
        float float87 = aDTFraction20.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/-1" + "'", str76, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + 0.0f + "'", float87 == 0.0f);
    }

    @Test
    public void test4073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4073");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction50);
        float float53 = aDTFraction52.value();
        int int54 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction57.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction57.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        java.lang.String str70 = aDTFraction68.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction68.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction57.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        boolean boolean83 = aDTFraction80.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction80.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction77.plus(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction85.reciprocal();
        boolean boolean87 = aDTFraction52.equals((java.lang.Object) aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction85.times((int) '#');
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(aDTFraction89);
    }

    @Test
    public void test4074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4074");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction14.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        int int51 = aDTFraction45.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction45.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        int int64 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction54.times(aDTFraction58);
        int int66 = aDTFraction54.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction42.plus(aDTFraction54);
        java.lang.String str68 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction14.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction14.reciprocal();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "100/100" + "'", str17, "100/100");
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1/35" + "'", str68, "1/35");
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
    }

    @Test
    public void test4075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4075");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        int int16 = aDTFraction12.numerator();
        java.lang.String str17 = aDTFraction12.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction3.plus(aDTFraction12);
        float float19 = aDTFraction18.value();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 3.2f + "'", float19 == 3.2f);
    }

    @Test
    public void test4076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4076");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        java.lang.String str91 = aDTFraction2.toString();
        java.lang.Class<?> wildcardClass92 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "100/100" + "'", str91, "100/100");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test4077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4077");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction14.times((int) '#');
        boolean boolean23 = aDTFraction5.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        int int32 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction26.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction35.times(aDTFraction39);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction5.times(aDTFraction46);
        int int49 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        int int65 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction52.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        java.lang.Class<?> wildcardClass75 = aDTFraction72.getClass();
        boolean boolean76 = aDTFraction52.equals((java.lang.Object) aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction48.times(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(aDTFraction77);
    }

    @Test
    public void test4078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4078");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        int int43 = aDTFraction39.numerator();
        int int44 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int68 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction52.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        boolean boolean80 = aDTFraction76.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction76.times((int) (byte) 100);
        java.lang.String str83 = aDTFraction76.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction52.times(aDTFraction76);
        int int85 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction39.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction22.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = new com.thealgorithms.maths.ADTFraction(52, (int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction87.plus(aDTFraction90);
        int int92 = aDTFraction90.denominator();
        float float93 = aDTFraction90.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0/-1" + "'", str83, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + 52.0f + "'", float93 == 52.0f);
    }

    @Test
    public void test4079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4079");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(32000000, (int) (byte) 10);
    }

    @Test
    public void test4080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4080");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        int int42 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        boolean boolean52 = aDTFraction48.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction48.times((int) (byte) 100);
        java.lang.String str55 = aDTFraction48.toString();
        int int56 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction48.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction27.plus(aDTFraction58);
        boolean boolean60 = aDTFraction2.equals((java.lang.Object) aDTFraction58);
        int int61 = aDTFraction58.numerator();
        float float62 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction58.times(32);
        int int65 = aDTFraction64.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction64.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test4081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4081");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        int int31 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        java.lang.String str44 = aDTFraction37.toString();
        int int45 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction16.plus(aDTFraction47);
        int int49 = aDTFraction47.denominator();
        int int50 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction47.times(aDTFraction63);
        int int65 = aDTFraction63.denominator();
        java.lang.String str66 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction5.times(aDTFraction63);
        float float68 = aDTFraction63.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/1" + "'", str66, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
    }

    @Test
    public void test4082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4082");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (-10));
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times((int) '#');
        int int5 = aDTFraction4.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(10000, 1024);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(1, 10000);
        java.lang.String str12 = aDTFraction11.toString();
        java.lang.String str13 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.plus(aDTFraction19);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.plus(aDTFraction20);
        boolean boolean24 = aDTFraction22.equals((java.lang.Object) 0.6730769f);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        boolean boolean34 = aDTFraction30.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction30.times((int) (byte) 100);
        java.lang.String str37 = aDTFraction30.toString();
        int int38 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction41.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int54 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.times(aDTFraction53);
        int int56 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        boolean boolean66 = aDTFraction62.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction62.times((int) (byte) 100);
        java.lang.String str69 = aDTFraction62.toString();
        int int70 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction62.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction41.plus(aDTFraction72);
        int int74 = aDTFraction72.denominator();
        boolean boolean76 = aDTFraction72.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction30.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction22.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction8.plus(aDTFraction30);
        boolean boolean80 = aDTFraction4.equals((java.lang.Object) aDTFraction79);
        java.lang.String str81 = aDTFraction4.toString();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 350 + "'", int5 == 350);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1/10000" + "'", str12, "1/10000");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1/10000" + "'", str13, "1/10000");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0/-1" + "'", str37, "0/-1");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "350/-10" + "'", str81, "350/-10");
    }

    @Test
    public void test4083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4083");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(5200, (-10000));
    }

    @Test
    public void test4084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4084");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) ' ', (int) ' ');
        int int3 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertNotNull(aDTFraction4);
    }

    @Test
    public void test4085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4085");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(350, (int) ' ');
    }

    @Test
    public void test4086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4086");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        int int24 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        int int33 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction27.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        int int46 = aDTFraction40.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction36.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str51 = aDTFraction50.toString();
        boolean boolean52 = aDTFraction36.equals((java.lang.Object) aDTFraction50);
        boolean boolean53 = aDTFraction23.equals((java.lang.Object) boolean52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction23.times(35);
        int int56 = aDTFraction23.denominator();
        java.lang.Class<?> wildcardClass57 = aDTFraction23.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-1/10" + "'", str51, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test4087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4087");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        java.lang.String str49 = aDTFraction48.toString();
        int int50 = aDTFraction48.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) ' ');
        boolean boolean54 = aDTFraction48.equals((java.lang.Object) ' ');
        java.lang.Class<?> wildcardClass55 = aDTFraction48.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/1000000" + "'", str49, "0/1000000");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test4088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4088");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10), 52);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times((int) (short) 0);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction5.times(1000);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction8.times(1000000);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.1923077f) + "'", float3 == (-0.1923077f));
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 0.0f + "'", float6 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
    }

    @Test
    public void test4089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4089");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.times(aDTFraction6);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction13.reciprocal();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction10.times(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction10.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        float float23 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction34.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction31.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction31.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction21.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction31.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction31.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction10.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction6.plus(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "100/100" + "'", str15, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
    }

    @Test
    public void test4090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4090");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int3 = aDTFraction2.denominator();
        java.lang.Class<?> wildcardClass4 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test4091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4091");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        float float25 = aDTFraction16.value();
        int int26 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction16.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        boolean boolean32 = aDTFraction16.equals((java.lang.Object) aDTFraction31);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test4092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4092");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(20000, 1024);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times(aDTFraction5);
        java.lang.String str7 = aDTFraction6.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(1, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        boolean boolean22 = aDTFraction16.equals((java.lang.Object) "");
        float float23 = aDTFraction16.value();
        java.lang.String str24 = aDTFraction16.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        boolean boolean34 = aDTFraction30.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction30.times((int) (byte) 100);
        java.lang.String str37 = aDTFraction30.toString();
        int int38 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction30.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction49);
        int int53 = aDTFraction49.numerator();
        int int54 = aDTFraction49.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        boolean boolean66 = aDTFraction60.equals((java.lang.Object) "");
        float float67 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction49.times(aDTFraction60);
        boolean boolean69 = aDTFraction40.equals((java.lang.Object) aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction72.plus(aDTFraction75);
        int int78 = aDTFraction72.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction72.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float89 = aDTFraction88.value();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction85.plus(aDTFraction88);
        int int91 = aDTFraction85.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction81.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction40.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction16.plus(aDTFraction93);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction10.times(aDTFraction16);
        boolean boolean96 = aDTFraction6.equals((java.lang.Object) aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-20000/10240" + "'", str7, "-20000/10240");
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0/-1" + "'", str37, "0/-1");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-0.0f) + "'", float89 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test4093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4093");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        int int52 = aDTFraction50.denominator();
        int int53 = aDTFraction50.denominator();
        java.lang.String str54 = aDTFraction50.toString();
        java.lang.Object obj55 = null;
        boolean boolean56 = aDTFraction50.equals(obj55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction50.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction8.plus(aDTFraction50);
        int int60 = aDTFraction8.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test4094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4094");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, 5200);
    }

    @Test
    public void test4095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4095");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        java.lang.String str34 = aDTFraction33.toString();
        java.lang.String str35 = aDTFraction33.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
    }

    @Test
    public void test4096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4096");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction12.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction17.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction18.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        float float25 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int49 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction36.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction33.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction33.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction23.times(aDTFraction33);
        java.lang.String str55 = aDTFraction54.toString();
        float float56 = aDTFraction54.value();
        float float57 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction18.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int62 = aDTFraction61.denominator();
        float float63 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction61.reciprocal();
        int int65 = aDTFraction64.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction64.reciprocal();
        boolean boolean67 = aDTFraction54.equals((java.lang.Object) aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction12.times(aDTFraction66);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 1.0f + "'", float63 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(aDTFraction68);
    }

    @Test
    public void test4097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4097");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) (byte) -1);
        int int3 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test4098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4098");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        java.lang.String str9 = aDTFraction8.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        java.lang.String str14 = aDTFraction12.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction12.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction21.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int34 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.times(aDTFraction33);
        int int36 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        boolean boolean46 = aDTFraction42.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction42.times((int) (byte) 100);
        java.lang.String str49 = aDTFraction42.toString();
        int int50 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction42.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction21.plus(aDTFraction52);
        int int54 = aDTFraction52.denominator();
        int int55 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        int int64 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction58.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction52.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int73 = aDTFraction72.denominator();
        boolean boolean75 = aDTFraction72.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction68.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction18.times(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction77.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction8.plus(aDTFraction77);
        java.lang.String str81 = aDTFraction80.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-100/-100" + "'", str9, "-100/-100");
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0/-1" + "'", str14, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1000000/1000000" + "'", str81, "1000000/1000000");
    }

    @Test
    public void test4099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4099");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        java.lang.String str18 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(35, 52);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction22.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction22.times(32);
        int int27 = aDTFraction22.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1/1" + "'", str18, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
    }

    @Test
    public void test4100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4100");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction16.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        boolean boolean28 = aDTFraction24.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction24.times((int) (byte) 100);
        java.lang.String str31 = aDTFraction24.toString();
        int int32 = aDTFraction24.denominator();
        int int33 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        boolean boolean43 = aDTFraction39.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction39.times((int) (byte) 100);
        java.lang.String str46 = aDTFraction39.toString();
        int int47 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.times((int) ' ');
        int int50 = aDTFraction49.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction24.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction16.times(aDTFraction24);
        int int53 = aDTFraction24.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/-1" + "'", str46, "0/-1");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test4101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4101");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (-520));
    }

    @Test
    public void test4102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4102");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        float float40 = aDTFraction39.value();
        java.lang.String str41 = aDTFraction39.toString();
        int int42 = aDTFraction39.denominator();
        int int43 = aDTFraction39.numerator();
        int int44 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        boolean boolean55 = aDTFraction47.equals((java.lang.Object) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction39.plus(aDTFraction47);
        java.lang.String str57 = aDTFraction47.toString();
        int int58 = aDTFraction47.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-100" + "'", str41, "0/-100");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-100) + "'", int42 == (-100));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-100) + "'", int44 == (-100));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test4103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4103");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction19.equals((java.lang.Object) 10);
        boolean boolean27 = aDTFraction14.equals((java.lang.Object) aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        int int43 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        java.lang.Class<?> wildcardClass53 = aDTFraction50.getClass();
        boolean boolean54 = aDTFraction30.equals((java.lang.Object) aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction50.times(aDTFraction66);
        boolean boolean68 = aDTFraction19.equals((java.lang.Object) aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction66.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction70.times((-10));
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(100, (int) '#');
        int int76 = aDTFraction75.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        java.lang.String str81 = aDTFraction79.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction79.plus(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction75.plus(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction86.times(9700);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction72.times(aDTFraction86);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0/-1" + "'", str81, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
    }

    @Test
    public void test4104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4104");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (-52));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction34.times((int) (byte) 100);
        java.lang.String str41 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction10.times(aDTFraction34);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction49.times((int) 'a');
        int int54 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction53.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction42.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction60.times(aDTFraction66);
        int int70 = aDTFraction66.numerator();
        int int71 = aDTFraction66.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        boolean boolean81 = aDTFraction77.equals((java.lang.Object) ' ');
        boolean boolean83 = aDTFraction77.equals((java.lang.Object) "");
        float float84 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction66.times(aDTFraction77);
        int int86 = aDTFraction85.numerator();
        int int87 = aDTFraction85.numerator();
        int int88 = aDTFraction85.numerator();
        int int89 = aDTFraction85.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction57.plus(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction2.times(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + (-0.0f) + "'", float84 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction91);
    }

    @Test
    public void test4105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4105");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        java.lang.String str7 = aDTFraction5.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/10" + "'", str3, "-1/10");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10/-1" + "'", str7, "10/-1");
    }

    @Test
    public void test4106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4106");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10), 53);
    }

    @Test
    public void test4107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4107");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-13500), 20000);
    }

    @Test
    public void test4108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4108");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        int int33 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction31.times((int) (byte) 1);
        int int36 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        boolean boolean53 = aDTFraction45.equals((java.lang.Object) aDTFraction51);
        java.lang.String str54 = aDTFraction51.toString();
        java.lang.String str55 = aDTFraction51.toString();
        float float56 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction31.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction60.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        boolean boolean74 = aDTFraction66.equals((java.lang.Object) aDTFraction72);
        java.lang.String str75 = aDTFraction72.toString();
        java.lang.String str76 = aDTFraction72.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction79);
        boolean boolean82 = aDTFraction51.equals((java.lang.Object) aDTFraction72);
        int int83 = aDTFraction51.numerator();
        java.lang.String str84 = aDTFraction51.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-1" + "'", str75, "0/-1");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/-1" + "'", str76, "0/-1");
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/-1" + "'", str84, "0/-1");
    }

    @Test
    public void test4109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4109");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction10.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        boolean boolean21 = aDTFraction17.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction17.times((int) (byte) 100);
        java.lang.String str24 = aDTFraction17.toString();
        int int25 = aDTFraction17.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction17.times((int) ' ');
        int int28 = aDTFraction17.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction10.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(5200);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
    }

    @Test
    public void test4110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4110");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        int int52 = aDTFraction42.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        boolean boolean69 = aDTFraction61.equals((java.lang.Object) aDTFraction67);
        java.lang.String str70 = aDTFraction67.toString();
        java.lang.String str71 = aDTFraction67.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction74);
        boolean boolean77 = aDTFraction42.equals((java.lang.Object) aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction39.times(aDTFraction42);
        int int79 = aDTFraction42.numerator();
        int int80 = aDTFraction42.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test4111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4111");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        java.lang.String str8 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        boolean boolean18 = aDTFraction14.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (byte) 100);
        java.lang.String str21 = aDTFraction14.toString();
        int int22 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction14.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction2.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-52), (int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int48 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction35.times(aDTFraction47);
        java.lang.String str50 = aDTFraction47.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction61.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction56.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction47.plus(aDTFraction56);
        boolean boolean73 = aDTFraction32.equals((java.lang.Object) aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction32.times((-10000));
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction32.times(1024);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction77.times((-52));
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction14.times(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/-1" + "'", str8, "0/-1");
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "100/100" + "'", str50, "100/100");
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
    }

    @Test
    public void test4112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4112");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        int int25 = aDTFraction22.denominator();
        java.lang.String str26 = aDTFraction22.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction22.times(52);
        java.lang.String str29 = aDTFraction28.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
    }

    @Test
    public void test4113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4113");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        boolean boolean28 = aDTFraction24.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction24.times((int) (byte) 100);
        java.lang.String str31 = aDTFraction24.toString();
        int int32 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction24.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction24.times((int) (byte) 10);
        java.lang.String str37 = aDTFraction36.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction11.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int42 = aDTFraction41.denominator();
        boolean boolean44 = aDTFraction41.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction41.times(aDTFraction47);
        int int49 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction47.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction65.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction62.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction57.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction72.times((int) (byte) 10);
        java.lang.Object obj75 = new java.lang.Object();
        boolean boolean76 = aDTFraction74.equals(obj75);
        float float77 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.times(10000);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction82.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction82.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction79.plus(aDTFraction82);
        boolean boolean87 = aDTFraction51.equals((java.lang.Object) aDTFraction82);
        java.lang.String str88 = aDTFraction51.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction38.plus(aDTFraction51);
        int int90 = aDTFraction38.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0/-1" + "'", str37, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 32 + "'", int49 == 32);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + 0.0f + "'", float77 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "350/32" + "'", str88, "350/32");
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test4114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4114");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        float float40 = aDTFraction39.value();
        java.lang.String str41 = aDTFraction39.toString();
        int int42 = aDTFraction39.denominator();
        int int43 = aDTFraction39.numerator();
        int int44 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        float float49 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction60.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int73 = aDTFraction72.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction60.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction57.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction57.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction47.times(aDTFraction57);
        float float79 = aDTFraction57.value();
        int int80 = aDTFraction57.denominator();
        int int81 = aDTFraction57.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction39.times(aDTFraction57);
        int int83 = aDTFraction39.numerator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction39.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-100" + "'", str41, "0/-100");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-100) + "'", int42 == (-100));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-100) + "'", int44 == (-100));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 0.0f + "'", float79 == 0.0f);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test4115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4115");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str7 = aDTFraction6.toString();
        int int8 = aDTFraction6.denominator();
        float float9 = aDTFraction6.value();
        float float10 = aDTFraction6.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction6.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction3.plus(aDTFraction6);
        java.lang.Class<?> wildcardClass14 = aDTFraction3.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1/1" + "'", str7, "-1/1");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-1.0f) + "'", float9 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-1.0f) + "'", float10 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test4116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4116");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        int int41 = aDTFraction37.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        java.lang.Class<?> wildcardClass51 = aDTFraction48.getClass();
        boolean boolean52 = aDTFraction28.equals((java.lang.Object) aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        boolean boolean62 = aDTFraction58.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction58.times((int) (byte) 100);
        java.lang.String str65 = aDTFraction58.toString();
        int int66 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction48.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction67.times(52);
        boolean boolean70 = aDTFraction25.equals((java.lang.Object) aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction15.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction25.reciprocal();
        java.lang.Class<?> wildcardClass73 = aDTFraction72.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0/-1" + "'", str65, "0/-1");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test4117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4117");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10), 52);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(32, (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction11.times(aDTFraction17);
        int int21 = aDTFraction17.numerator();
        int int22 = aDTFraction17.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        boolean boolean32 = aDTFraction28.equals((java.lang.Object) ' ');
        boolean boolean34 = aDTFraction28.equals((java.lang.Object) "");
        float float35 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction17.times(aDTFraction28);
        int int37 = aDTFraction36.numerator();
        int int38 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int42 = aDTFraction41.denominator();
        float float43 = aDTFraction41.value();
        float float44 = aDTFraction41.value();
        int int45 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction36.plus(aDTFraction41);
        java.lang.String str47 = aDTFraction46.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction8.plus(aDTFraction46);
        float float49 = aDTFraction46.value();
        java.lang.Class<?> wildcardClass50 = aDTFraction46.getClass();
        boolean boolean51 = aDTFraction5.equals((java.lang.Object) aDTFraction46);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.1923077f) + "'", float3 == (-0.1923077f));
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test4118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4118");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        int int7 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        int int24 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction11.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        java.lang.Class<?> wildcardClass34 = aDTFraction31.getClass();
        boolean boolean35 = aDTFraction11.equals((java.lang.Object) aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction31.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction52.reciprocal();
        int int54 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction8.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction2.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str60 = aDTFraction59.toString();
        int int61 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction59.reciprocal();
        java.lang.String str63 = aDTFraction62.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction62);
        java.lang.Class<?> wildcardClass65 = aDTFraction64.getClass();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-52) + "'", int54 == (-52));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-1/10" + "'", str60, "-1/10");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "10/-1" + "'", str63, "10/-1");
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test4119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4119");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        boolean boolean28 = aDTFraction25.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction25.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        boolean boolean43 = aDTFraction39.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction39.times((int) (byte) 100);
        float float46 = aDTFraction39.value();
        boolean boolean47 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction53.times((int) (byte) 100);
        java.lang.String str60 = aDTFraction53.toString();
        int int61 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction39.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction22.times(aDTFraction64);
        int int66 = aDTFraction65.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction65.times((int) (short) -1);
        int int69 = aDTFraction68.denominator();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test4120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4120");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (short) -1);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(aDTFraction14);
    }

    @Test
    public void test4121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4121");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        boolean boolean28 = aDTFraction22.equals((java.lang.Object) "");
        int int29 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        boolean boolean46 = aDTFraction38.equals((java.lang.Object) aDTFraction44);
        java.lang.String str47 = aDTFraction44.toString();
        java.lang.String str48 = aDTFraction44.toString();
        float float49 = aDTFraction44.value();
        boolean boolean50 = aDTFraction22.equals((java.lang.Object) float49);
        int int51 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction22.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction11.times(aDTFraction53);
        int int55 = aDTFraction54.denominator();
        float float56 = aDTFraction54.value();
        int int57 = aDTFraction54.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test4122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4122");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction14.times((int) '#');
        boolean boolean23 = aDTFraction5.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        int int32 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction26.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction35.times(aDTFraction39);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction5.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction48.times(0);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction50.times((int) (byte) -1);
        int int54 = aDTFraction50.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test4123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4123");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        int int7 = aDTFraction5.denominator();
        float float8 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + (-1.0f) + "'", float8 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction9);
    }

    @Test
    public void test4124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4124");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(97, (int) (byte) 100);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float8 = aDTFraction7.value();
        float float9 = aDTFraction7.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int33 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction17.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction17.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction7.times(aDTFraction17);
        boolean boolean39 = aDTFraction4.equals((java.lang.Object) aDTFraction17);
        java.lang.Class<?> wildcardClass40 = aDTFraction4.getClass();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.97f + "'", float3 == 0.97f);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + (-0.0f) + "'", float8 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test4125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4125");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction7.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        int int26 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction16.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str31 = aDTFraction30.toString();
        boolean boolean32 = aDTFraction16.equals((java.lang.Object) aDTFraction30);
        java.lang.String str33 = aDTFraction16.toString();
        int int34 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (byte) 100);
        java.lang.String str48 = aDTFraction41.toString();
        int int49 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction41.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction41.times((int) (byte) 10);
        boolean boolean54 = aDTFraction35.equals((java.lang.Object) aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction53.times(520);
        java.lang.String str57 = aDTFraction53.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1/10" + "'", str31, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
    }

    @Test
    public void test4126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4126");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        float float26 = aDTFraction7.value();
        int int27 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int45 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction32.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction32.reciprocal();
        java.lang.String str48 = aDTFraction32.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction32.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction52.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int65 = aDTFraction64.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction52.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction52.reciprocal();
        int int68 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction52.times((-10));
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction49.plus(aDTFraction52);
        java.lang.String str72 = aDTFraction71.toString();
        java.lang.String str73 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction7.times(aDTFraction71);
        int int75 = aDTFraction71.numerator();
        int int76 = aDTFraction71.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-1/1" + "'", str48, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2/-1" + "'", str72, "2/-1");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2/-1" + "'", str73, "2/-1");
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test4127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4127");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction8);
        int int10 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test4128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4128");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.plus(aDTFraction10);
        int int12 = aDTFraction10.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction18.reciprocal();
        java.lang.String str20 = aDTFraction18.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction15.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction10.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction2.plus(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0/-1" + "'", str7, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100/100" + "'", str20, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
    }

    @Test
    public void test4129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4129");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction22.times((int) (byte) 100);
        java.lang.String str29 = aDTFraction22.toString();
        int int30 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction22.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction8.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(1, (int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean41 = aDTFraction39.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction44.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int57 = aDTFraction56.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction44.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction44.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction70.times(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction65.plus(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction44.times(aDTFraction80);
        boolean boolean82 = aDTFraction39.equals((java.lang.Object) aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction81.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction36.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction8.times(aDTFraction81);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
    }

    @Test
    public void test4130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4130");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        boolean boolean41 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        java.lang.String str42 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.times((int) (short) -1);
        boolean boolean45 = aDTFraction2.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.times(3200);
        java.lang.String str48 = aDTFraction47.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-3200/1" + "'", str48, "-3200/1");
    }

    @Test
    public void test4131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4131");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        int int25 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        java.lang.String str34 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction41.times(aDTFraction47);
        int int51 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction38.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction21.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction11.times(aDTFraction53);
        int int55 = aDTFraction11.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test4132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4132");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1664, 1024);
        int int3 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1024 + "'", int3 == 1024);
    }

    @Test
    public void test4133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4133");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.reciprocal();
        java.lang.String str7 = aDTFraction2.toString();
        int int8 = aDTFraction2.denominator();
        float float9 = aDTFraction2.value();
        int int10 = aDTFraction2.numerator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1/1" + "'", str7, "-1/1");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-1.0f) + "'", float9 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test4134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4134");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        int int31 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        java.lang.String str44 = aDTFraction37.toString();
        int int45 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction16.plus(aDTFraction47);
        int int49 = aDTFraction47.denominator();
        int int50 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction47.times(aDTFraction63);
        int int65 = aDTFraction63.denominator();
        java.lang.String str66 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction5.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction70.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction71.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction5.plus(aDTFraction73);
        int int75 = aDTFraction5.denominator();
        java.lang.String str76 = aDTFraction5.toString();
        boolean boolean78 = aDTFraction5.equals((java.lang.Object) "1000000/1");
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/1" + "'", str66, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/-1" + "'", str76, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test4135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4135");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) ' ', (int) (byte) 100);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        int int12 = aDTFraction6.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction2.plus(aDTFraction6);
        java.lang.String str14 = aDTFraction13.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.32f + "'", float3 == 0.32f);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-32/-100" + "'", str14, "-32/-100");
    }

    @Test
    public void test4136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4136");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int20 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction7.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction7.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction28.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction7.times(aDTFraction43);
        boolean boolean45 = aDTFraction2.equals((java.lang.Object) aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        int int54 = aDTFraction48.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction48.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        int int67 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction57.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str72 = aDTFraction71.toString();
        boolean boolean73 = aDTFraction57.equals((java.lang.Object) aDTFraction71);
        java.lang.String str74 = aDTFraction57.toString();
        int int75 = aDTFraction57.numerator();
        int int76 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction44.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction44.plus(aDTFraction80);
        float float82 = aDTFraction44.value();
        int int83 = aDTFraction44.denominator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-1/10" + "'", str72, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-1" + "'", str74, "0/-1");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + 0.0f + "'", float82 == 0.0f);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test4137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4137");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        float float19 = aDTFraction14.value();
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction14.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction14.times(200);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction49);
    }

    @Test
    public void test4138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4138");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        int int39 = aDTFraction35.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction26.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        java.lang.Class<?> wildcardClass49 = aDTFraction46.getClass();
        boolean boolean50 = aDTFraction26.equals((java.lang.Object) aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction56.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction46.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction22.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction72.reciprocal();
        float float74 = aDTFraction73.value();
        float float75 = aDTFraction73.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 3.2f + "'", float74 == 3.2f);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 3.2f + "'", float75 == 3.2f);
    }

    @Test
    public void test4139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4139");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, (-520));
    }

    @Test
    public void test4140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4140");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction24.times(1);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        boolean boolean45 = aDTFraction37.equals((java.lang.Object) aDTFraction43);
        java.lang.String str46 = aDTFraction43.toString();
        java.lang.String str47 = aDTFraction43.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        boolean boolean69 = aDTFraction61.equals((java.lang.Object) aDTFraction67);
        java.lang.String str70 = aDTFraction67.toString();
        java.lang.String str71 = aDTFraction67.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction67.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction43.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction73.times(52);
        int int77 = aDTFraction73.denominator();
        java.lang.String str78 = aDTFraction73.toString();
        float float79 = aDTFraction73.value();
        float float80 = aDTFraction73.value();
        int int81 = aDTFraction73.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction73.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction27.times(aDTFraction83);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/-1" + "'", str46, "0/-1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0/-1" + "'", str78, "0/-1");
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
    }

    @Test
    public void test4141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4141");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(166400);
        org.junit.Assert.assertNotNull(aDTFraction4);
    }

    @Test
    public void test4142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4142");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        int int26 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        java.lang.String str35 = aDTFraction29.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (byte) 100);
        java.lang.String str48 = aDTFraction41.toString();
        int int49 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction41.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction29.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction24.times(aDTFraction52);
        int int54 = aDTFraction52.numerator();
        int int55 = aDTFraction52.numerator();
        float float56 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction52.times((-10));
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction58);
    }

    @Test
    public void test4143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4143");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction7.reciprocal();
        int int9 = aDTFraction8.numerator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/10" + "'", str3, "-1/10");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test4144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4144");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean17 = aDTFraction15.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int33 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction20.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction41.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction20.times(aDTFraction56);
        boolean boolean58 = aDTFraction15.equals((java.lang.Object) aDTFraction57);
        boolean boolean59 = aDTFraction2.equals((java.lang.Object) aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction2.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int67 = aDTFraction66.denominator();
        float float68 = aDTFraction66.value();
        float float69 = aDTFraction66.value();
        boolean boolean70 = aDTFraction63.equals((java.lang.Object) aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, 100);
        boolean boolean74 = aDTFraction66.equals((java.lang.Object) aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction73.times((-17));
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, 32);
        int int80 = aDTFraction79.numerator();
        int int81 = aDTFraction79.denominator();
        java.lang.Class<?> wildcardClass82 = aDTFraction79.getClass();
        boolean boolean83 = aDTFraction76.equals((java.lang.Object) wildcardClass82);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 1.0f + "'", float68 == 1.0f);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 1.0f + "'", float69 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 32 + "'", int81 == 32);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test4145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4145");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        boolean boolean21 = aDTFraction17.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction17.times((int) (byte) 100);
        java.lang.String str24 = aDTFraction17.toString();
        int int25 = aDTFraction17.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction17.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        int int40 = aDTFraction36.numerator();
        int int41 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        boolean boolean53 = aDTFraction47.equals((java.lang.Object) "");
        float float54 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction36.times(aDTFraction47);
        boolean boolean56 = aDTFraction27.equals((java.lang.Object) aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        int int65 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction59.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction72.plus(aDTFraction75);
        int int78 = aDTFraction72.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction68.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction27.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(0);
        int int83 = aDTFraction68.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction68.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction11.times(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1/1" + "'", str7, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
    }

    @Test
    public void test4146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4146");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int13 = aDTFraction12.denominator();
        float float14 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction12.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        float float20 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction28.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction18.times(aDTFraction28);
        int int50 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction15.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        boolean boolean61 = aDTFraction57.equals((java.lang.Object) ' ');
        boolean boolean63 = aDTFraction57.equals((java.lang.Object) "");
        float float64 = aDTFraction57.value();
        boolean boolean65 = aDTFraction15.equals((java.lang.Object) aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction8.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int70 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction69.reciprocal();
        int int72 = aDTFraction69.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        int int81 = aDTFraction75.numerator();
        boolean boolean83 = aDTFraction75.equals((java.lang.Object) (short) 1);
        java.lang.String str84 = aDTFraction75.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction75.times((int) 'a');
        boolean boolean87 = aDTFraction69.equals((java.lang.Object) aDTFraction86);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction69.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction8.plus(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/-1" + "'", str84, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
    }

    @Test
    public void test4147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4147");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, 1);
        float float3 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
    }

    @Test
    public void test4148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4148");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction14.denominator();
        java.lang.String str16 = aDTFraction14.toString();
        float float17 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction23.times((int) 'a');
        int int28 = aDTFraction27.denominator();
        java.lang.String str29 = aDTFraction27.toString();
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int35 = aDTFraction34.denominator();
        float float36 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction34.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction27.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction38.reciprocal();
        java.lang.String str40 = aDTFraction38.toString();
        boolean boolean41 = aDTFraction14.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction2.plus(aDTFraction14);
        java.lang.String str43 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 1.0f + "'", float36 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-100/-100" + "'", str40, "-100/-100");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1/35" + "'", str43, "-1/35");
    }

    @Test
    public void test4149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4149");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-52), 32);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction22.equals((java.lang.Object) 10);
        boolean boolean30 = aDTFraction17.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        int int46 = aDTFraction42.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction42);
        float float48 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(35, 52);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction51.reciprocal();
        int int53 = aDTFraction51.numerator();
        float float54 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction42.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction22.plus(aDTFraction55);
        float float57 = aDTFraction55.value();
        float float58 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction2.times(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 0.6730769f + "'", float54 == 0.6730769f);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
    }

    @Test
    public void test4150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4150");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        int int29 = aDTFraction24.denominator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
    }

    @Test
    public void test4151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4151");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction19.times((-52));
        java.lang.String str23 = aDTFraction22.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-5200/100" + "'", str23, "-5200/100");
    }

    @Test
    public void test4152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4152");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times(aDTFraction28);
        java.lang.String str30 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        int int48 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction54.times((int) (byte) 100);
        java.lang.String str61 = aDTFraction54.toString();
        int int62 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction54.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction33.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float83 = aDTFraction82.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction79.plus(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction76.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int89 = aDTFraction88.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction76.times(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction73.times(aDTFraction90);
        int int92 = aDTFraction90.denominator();
        boolean boolean93 = aDTFraction65.equals((java.lang.Object) aDTFraction90);
        boolean boolean94 = aDTFraction28.equals((java.lang.Object) aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction28.times(350000);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/10" + "'", str30, "0/10");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(aDTFraction96);
    }

    @Test
    public void test4153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4153");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        float float14 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction30.times((int) (byte) 0);
        int int38 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction17.times(aDTFraction37);
        java.lang.String str40 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction17.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction5.times(aDTFraction42);
        float float44 = aDTFraction42.value();
        float float45 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int49 = aDTFraction48.denominator();
        boolean boolean51 = aDTFraction48.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction48.times(aDTFraction54);
        int int56 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (-52));
        java.lang.String str60 = aDTFraction59.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction48.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction42.times(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-1.0f) + "'", float18 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1/1" + "'", str40, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-100.0f) + "'", float44 == (-100.0f));
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-100.0f) + "'", float45 == (-100.0f));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-1/-52" + "'", str60, "-1/-52");
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
    }

    @Test
    public void test4154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4154");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction12.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction27.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int53 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction40.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction37.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        boolean boolean65 = aDTFraction61.equals((java.lang.Object) ' ');
        boolean boolean67 = aDTFraction61.equals((java.lang.Object) "");
        java.lang.String str68 = aDTFraction61.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction61);
        float float70 = aDTFraction69.value();
        java.lang.String str71 = aDTFraction69.toString();
        int int72 = aDTFraction69.denominator();
        boolean boolean73 = aDTFraction27.equals((java.lang.Object) int72);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction76.plus(aDTFraction79);
        int int82 = aDTFraction76.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction76.plus(aDTFraction85);
        boolean boolean87 = aDTFraction27.equals((java.lang.Object) aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction6.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0/-1" + "'", str68, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-100" + "'", str71, "0/-100");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-100) + "'", int72 == (-100));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
    }

    @Test
    public void test4155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4155");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        boolean boolean68 = aDTFraction60.equals((java.lang.Object) aDTFraction66);
        java.lang.String str69 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction51.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction8.times(aDTFraction51);
        int int73 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str78 = aDTFraction77.toString();
        int int79 = aDTFraction77.denominator();
        float float80 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction74.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction84.reciprocal();
        int int86 = aDTFraction84.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction84.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction77.plus(aDTFraction87);
        int int89 = aDTFraction77.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction77.times((int) 'a');
        int int92 = aDTFraction77.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-1/1" + "'", str78, "-1/1");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-1.0f) + "'", float80 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test4156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4156");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction38.times((int) 'a');
        int int43 = aDTFraction42.denominator();
        java.lang.String str44 = aDTFraction42.toString();
        boolean boolean46 = aDTFraction42.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int50 = aDTFraction49.denominator();
        float float51 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction49.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction42.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction32.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction53.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction55.times((-32));
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 1.0f + "'", float51 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
    }

    @Test
    public void test4157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4157");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        float float12 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction20.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction20.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction5.plus(aDTFraction20);
        java.lang.String str54 = aDTFraction20.toString();
        float float55 = aDTFraction20.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/1" + "'", str54, "0/1");
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 0.0f + "'", float55 == 0.0f);
    }

    @Test
    public void test4158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4158");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        float float4 = aDTFraction3.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-13500), (int) ' ');
        boolean boolean8 = aDTFraction3.equals((java.lang.Object) aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction3.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction13.reciprocal();
        java.lang.String str15 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction14.times((int) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction10.plus(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.01f) + "'", float4 == (-0.01f));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1/100" + "'", str15, "-1/100");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
    }

    @Test
    public void test4159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4159");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction34.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(10, (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.times(aDTFraction38);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int56 = aDTFraction55.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction43.times(aDTFraction55);
        int int58 = aDTFraction43.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction39.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction39.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((-100), (-17));
        java.lang.String str64 = aDTFraction63.toString();
        boolean boolean65 = aDTFraction60.equals((java.lang.Object) aDTFraction63);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-100/-17" + "'", str64, "-100/-17");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test4160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4160");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        int int11 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        int int24 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        java.lang.String str33 = aDTFraction27.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.plus(aDTFraction27);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        int int44 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction38.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        boolean boolean56 = aDTFraction52.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction52.times((int) (byte) 100);
        float float59 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction38.plus(aDTFraction52);
        int int61 = aDTFraction38.numerator();
        java.lang.String str62 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction34.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction2.plus(aDTFraction63);
        java.lang.String str65 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0/-1" + "'", str62, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0/-1" + "'", str65, "0/-1");
    }

    @Test
    public void test4161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4161");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        int int37 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction31.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction31.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction31.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        boolean boolean54 = aDTFraction50.equals((java.lang.Object) ' ');
        boolean boolean56 = aDTFraction50.equals((java.lang.Object) "");
        float float57 = aDTFraction50.value();
        java.lang.String str58 = aDTFraction50.toString();
        boolean boolean59 = aDTFraction31.equals((java.lang.Object) aDTFraction50);
        float float60 = aDTFraction50.value();
        boolean boolean62 = aDTFraction50.equals((java.lang.Object) "10/32");
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test4162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4162");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction46.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(100, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction49.times(aDTFraction52);
        java.lang.Class<?> wildcardClass54 = aDTFraction53.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test4163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4163");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-35), 32000000);
    }

    @Test
    public void test4164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4164");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        int int45 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        java.lang.String str54 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.plus(aDTFraction48);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction32.plus(aDTFraction55);
        java.lang.String str60 = aDTFraction59.toString();
        int int61 = aDTFraction59.denominator();
        boolean boolean63 = aDTFraction59.equals((java.lang.Object) 1000.0f);
        java.lang.String str64 = aDTFraction59.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/1" + "'", str60, "0/1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/1" + "'", str64, "0/1");
    }

    @Test
    public void test4165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4165");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        int int7 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean12 = aDTFraction10.equals((java.lang.Object) 100.0d);
        boolean boolean13 = aDTFraction5.equals((java.lang.Object) boolean12);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.reciprocal();
        java.lang.String str15 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        int int35 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction22.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction31.times((int) (byte) 0);
        int int39 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction18.times(aDTFraction38);
        float float41 = aDTFraction40.value();
        int int42 = aDTFraction40.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction40.times((int) 'a');
        boolean boolean45 = aDTFraction14.equals((java.lang.Object) aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1/-1" + "'", str15, "1/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-1.0f) + "'", float19 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test4166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4166");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        int int4 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        java.lang.String str6 = aDTFraction5.toString();
        java.lang.Class<?> wildcardClass7 = aDTFraction5.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "32/10" + "'", str6, "32/10");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test4167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4167");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (short) 1);
        int int3 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test4168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4168");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, 430);
    }

    @Test
    public void test4169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4169");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction35.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        float float44 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int68 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction52.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction52.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction42.times(aDTFraction52);
        boolean boolean74 = aDTFraction39.equals((java.lang.Object) aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((-10000), (int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, 32);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction78.times(aDTFraction81);
        float float83 = aDTFraction82.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
    }

    @Test
    public void test4170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4170");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-35), (-10000));
    }

    @Test
    public void test4171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4171");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (-32));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction5.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        int int22 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction16.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        boolean boolean34 = aDTFraction30.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction30.times((int) (byte) 100);
        float float37 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction16.plus(aDTFraction30);
        boolean boolean39 = aDTFraction5.equals((java.lang.Object) aDTFraction30);
        float float40 = aDTFraction5.value();
        int int41 = aDTFraction5.denominator();
        java.lang.String str42 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction2.times(aDTFraction5);
        float float44 = aDTFraction5.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
    }

    @Test
    public void test4172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4172");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        boolean boolean14 = aDTFraction8.equals((java.lang.Object) "");
        int int15 = aDTFraction8.denominator();
        java.lang.String str16 = aDTFraction8.toString();
        java.lang.String str17 = aDTFraction8.toString();
        int int18 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction2.plus(aDTFraction8);
        java.lang.String str20 = aDTFraction2.toString();
        int int21 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction2.times((-13500));
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/32" + "'", str20, "0/32");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction23);
    }

    @Test
    public void test4173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4173");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) '#');
        int int3 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        boolean boolean13 = aDTFraction9.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction9.times((int) (byte) 100);
        java.lang.String str16 = aDTFraction9.toString();
        int int17 = aDTFraction9.denominator();
        int int18 = aDTFraction9.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        boolean boolean28 = aDTFraction24.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction24.times((int) (byte) 100);
        java.lang.String str31 = aDTFraction24.toString();
        int int32 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction24.times((int) ' ');
        int int35 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction9.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction2.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        boolean boolean47 = aDTFraction43.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction43.times((int) (byte) 100);
        java.lang.String str50 = aDTFraction43.toString();
        int int51 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction43.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction43.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction2.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        java.lang.String str61 = aDTFraction59.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int85 = aDTFraction84.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction72.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction69.times(aDTFraction86);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction69.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction69.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction59.plus(aDTFraction91);
        boolean boolean93 = aDTFraction56.equals((java.lang.Object) aDTFraction91);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction91.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test4174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4174");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        java.lang.String str18 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times(22);
        int int23 = aDTFraction22.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1/1" + "'", str18, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-2200) + "'", int23 == (-2200));
    }

    @Test
    public void test4175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4175");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        int int19 = aDTFraction18.denominator();
        float float20 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction46.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction18.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        int int64 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction68.reciprocal();
        int int70 = aDTFraction68.denominator();
        boolean boolean71 = aDTFraction63.equals((java.lang.Object) aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction74.times(aDTFraction80);
        int int84 = aDTFraction80.numerator();
        java.lang.String str85 = aDTFraction80.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction80.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction63.times(aDTFraction87);
        java.lang.String str89 = aDTFraction63.toString();
        int int90 = aDTFraction63.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0/-1" + "'", str85, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "35/32" + "'", str89, "35/32");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 32 + "'", int90 == 32);
    }

    @Test
    public void test4176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4176");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        int int25 = aDTFraction10.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        int int39 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction31.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction10.plus(aDTFraction41);
        int int43 = aDTFraction41.denominator();
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) '4');
        boolean boolean46 = aDTFraction5.equals((java.lang.Object) boolean45);
        int int47 = aDTFraction5.denominator();
        int int48 = aDTFraction5.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test4177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4177");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(32);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(35, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction7.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction12.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction13.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean19 = aDTFraction15.equals((java.lang.Object) aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        int int28 = aDTFraction22.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction18.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction29.times(1024);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction9.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction4.times(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        boolean boolean50 = aDTFraction42.equals((java.lang.Object) aDTFraction48);
        java.lang.String str51 = aDTFraction48.toString();
        java.lang.String str52 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction48.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction57.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int70 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction57.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction57.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction57.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction54.plus(aDTFraction57);
        int int78 = aDTFraction54.numerator();
        boolean boolean79 = aDTFraction33.equals((java.lang.Object) int78);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test4178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4178");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-104), (int) (short) -1);
    }

    @Test
    public void test4179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4179");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction30.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        boolean boolean60 = aDTFraction54.equals((java.lang.Object) "");
        java.lang.String str61 = aDTFraction54.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction48.times(aDTFraction54);
        float float63 = aDTFraction62.value();
        java.lang.String str64 = aDTFraction62.toString();
        int int65 = aDTFraction62.denominator();
        boolean boolean66 = aDTFraction20.equals((java.lang.Object) int65);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        int int75 = aDTFraction69.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction69.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        int int88 = aDTFraction82.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction78.times(aDTFraction82);
        java.lang.String str90 = aDTFraction82.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction82.times((int) (byte) -1);
        int int93 = aDTFraction92.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction20.plus(aDTFraction92);
        float float95 = aDTFraction20.value();
        java.lang.String str96 = aDTFraction20.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-100" + "'", str64, "0/-100");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-100) + "'", int65 == (-100));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0/-1" + "'", str90, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertTrue("'" + float95 + "' != '" + 0.0f + "'", float95 == 0.0f);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "0/1" + "'", str96, "0/1");
    }

    @Test
    public void test4180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4180");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        int int25 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        java.lang.String str34 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction41.times(aDTFraction47);
        int int51 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction38.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction21.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction11.times(aDTFraction53);
        float float55 = aDTFraction11.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
    }

    @Test
    public void test4181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4181");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction12.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str39 = aDTFraction38.toString();
        int int40 = aDTFraction38.denominator();
        boolean boolean41 = aDTFraction12.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction38.reciprocal();
        java.lang.String str43 = aDTFraction38.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1/1" + "'", str39, "-1/1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1/1" + "'", str43, "-1/1");
    }

    @Test
    public void test4182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4182");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 10);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times((int) (byte) 100);
        float float6 = aDTFraction5.value();
        int int7 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        int int16 = aDTFraction10.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction10.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        boolean boolean28 = aDTFraction24.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction24.times((int) (byte) 100);
        float float31 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction10.plus(aDTFraction24);
        float float33 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        int int46 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean51 = aDTFraction49.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        int int64 = aDTFraction54.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        boolean boolean81 = aDTFraction73.equals((java.lang.Object) aDTFraction79);
        java.lang.String str82 = aDTFraction79.toString();
        java.lang.String str83 = aDTFraction79.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float87 = aDTFraction86.value();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction79.times(aDTFraction86);
        boolean boolean89 = aDTFraction54.equals((java.lang.Object) aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction49.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction36.times(aDTFraction90);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction24.times(aDTFraction90);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction90.times((int) (short) 10);
        boolean boolean95 = aDTFraction5.equals((java.lang.Object) aDTFraction94);
        int int96 = aDTFraction94.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 1000.0f + "'", float6 == 1000.0f);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0/-1" + "'", str82, "0/-1");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0/-1" + "'", str83, "0/-1");
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + (-0.0f) + "'", float87 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test4183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4183");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(0);
        int int71 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction70.times(1664);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(1, (int) (byte) 100);
        java.lang.String str77 = aDTFraction76.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.times(aDTFraction76);
        float float79 = aDTFraction76.value();
        java.lang.Class<?> wildcardClass80 = aDTFraction76.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1/100" + "'", str77, "1/100");
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 0.01f + "'", float79 == 0.01f);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test4184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4184");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        java.lang.String str11 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        java.lang.String str16 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        int int29 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction23.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        float float44 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction23.plus(aDTFraction37);
        int int46 = aDTFraction23.numerator();
        java.lang.String str47 = aDTFraction23.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction53.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction54.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        int int69 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction59.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction50.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction2.times(aDTFraction59);
        java.lang.Class<?> wildcardClass73 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test4185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4185");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        int int19 = aDTFraction18.denominator();
        float float20 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction46.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction18.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        int int64 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction68.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction69.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean75 = aDTFraction71.equals((java.lang.Object) aDTFraction74);
        int int76 = aDTFraction74.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction59.plus(aDTFraction74);
        int int78 = aDTFraction74.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.reciprocal();
        java.lang.Class<?> wildcardClass80 = aDTFraction79.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test4186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4186");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int45 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction32.times(aDTFraction44);
        int int47 = aDTFraction32.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction53.times((int) (byte) 100);
        java.lang.String str60 = aDTFraction53.toString();
        int int61 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction32.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction75.times(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int88 = aDTFraction87.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction75.times(aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction72.times(aDTFraction89);
        int int91 = aDTFraction89.denominator();
        boolean boolean92 = aDTFraction64.equals((java.lang.Object) aDTFraction89);
        int int93 = aDTFraction89.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction96 = new com.thealgorithms.maths.ADTFraction(10, (int) (byte) 10);
        boolean boolean97 = aDTFraction89.equals((java.lang.Object) aDTFraction96);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction96.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction99 = aDTFraction25.plus(aDTFraction98);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-100) + "'", int93 == (-100));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertNotNull(aDTFraction99);
    }

    @Test
    public void test4187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4187");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction46.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        boolean boolean59 = aDTFraction55.equals((java.lang.Object) ' ');
        boolean boolean61 = aDTFraction55.equals((java.lang.Object) "");
        int int62 = aDTFraction55.denominator();
        java.lang.String str63 = aDTFraction55.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction55.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction66.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction46.times(aDTFraction69);
        float float71 = aDTFraction70.value();
        java.lang.String str72 = aDTFraction70.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + 0.0f + "'", float71 == 0.0f);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0/1000" + "'", str72, "0/1000");
    }

    @Test
    public void test4188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4188");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        int int13 = aDTFraction12.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction24.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction21.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        java.lang.String str52 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction39.times(aDTFraction45);
        float float54 = aDTFraction53.value();
        java.lang.String str55 = aDTFraction53.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction12.times(aDTFraction53);
        int int57 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction53.times((int) (byte) 10);
        int int60 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction53.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, 198336);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction53.times(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-100" + "'", str55, "0/-100");
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction66);
    }

    @Test
    public void test4189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4189");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 1);
        int int3 = aDTFraction2.numerator();
        int int4 = aDTFraction2.numerator();
        int int5 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    @Test
    public void test4190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4190");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        int int9 = aDTFraction7.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction15.reciprocal();
        java.lang.String str17 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction12.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction7.times(aDTFraction15);
        int int20 = aDTFraction7.denominator();
        java.lang.String str21 = aDTFraction7.toString();
        int int22 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int38 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction25.reciprocal();
        int int41 = aDTFraction40.numerator();
        int int42 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction7.times(aDTFraction40);
        int int44 = aDTFraction40.numerator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "100/100" + "'", str17, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100/100" + "'", str21, "100/100");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test4191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4191");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction6.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) aDTFraction11);
        int int13 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int38 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction22.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        boolean boolean50 = aDTFraction46.equals((java.lang.Object) ' ');
        boolean boolean52 = aDTFraction46.equals((java.lang.Object) "");
        java.lang.String str53 = aDTFraction46.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction40.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int62 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction61.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction67.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction68.times(52);
        float float71 = aDTFraction70.value();
        boolean boolean72 = aDTFraction61.equals((java.lang.Object) aDTFraction70);
        java.lang.String str73 = aDTFraction70.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction11.times(aDTFraction70);
        float float75 = aDTFraction70.value();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + 166.4f + "'", float71 == 166.4f);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1664/10" + "'", str73, "1664/10");
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 166.4f + "'", float75 == 166.4f);
    }

    @Test
    public void test4192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4192");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        java.lang.String str29 = aDTFraction24.toString();
        int int30 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction24.times(32);
        float float33 = aDTFraction24.value();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100/100" + "'", str29, "100/100");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
    }

    @Test
    public void test4193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4193");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        float float35 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int59 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction46.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction43.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction43.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction33.times(aDTFraction43);
        int int65 = aDTFraction64.numerator();
        int int66 = aDTFraction64.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction64.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction28.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction72.plus(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction72.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction78.times(aDTFraction81);
        boolean boolean84 = aDTFraction82.equals((java.lang.Object) (byte) 0);
        boolean boolean85 = aDTFraction69.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction69.times((-52));
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction69.times((-52));
        java.lang.Class<?> wildcardClass90 = aDTFraction89.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test4194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4194");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        int int6 = aDTFraction5.denominator();
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction5.reciprocal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100/100" + "'", str7, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction8);
    }

    @Test
    public void test4195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4195");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        int int9 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        boolean boolean19 = aDTFraction15.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction15.times((int) (byte) 100);
        java.lang.String str22 = aDTFraction15.toString();
        int int23 = aDTFraction15.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        int int38 = aDTFraction34.numerator();
        int int39 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        float float52 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.times(aDTFraction45);
        boolean boolean54 = aDTFraction25.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        int int63 = aDTFraction57.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction57.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        int int76 = aDTFraction70.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction66.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction25.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (byte) 1);
        java.lang.Class<?> wildcardClass82 = aDTFraction81.getClass();
        boolean boolean83 = aDTFraction25.equals((java.lang.Object) wildcardClass82);
        boolean boolean84 = aDTFraction2.equals((java.lang.Object) aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0/-1" + "'", str22, "0/-1");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test4196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4196");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 10000);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction7.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction8.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean14 = aDTFraction10.equals((java.lang.Object) aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int30 = aDTFraction29.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction29);
        int int32 = aDTFraction29.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction13.times(aDTFraction29);
        java.lang.String str34 = aDTFraction29.toString();
        int int35 = aDTFraction29.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction29.times(32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction4.plus(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100/100" + "'", str34, "100/100");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
    }

    @Test
    public void test4197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4197");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        int int13 = aDTFraction12.denominator();
        int int14 = aDTFraction12.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction17.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction18.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        int int33 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction23.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction12.plus(aDTFraction23);
        float float36 = aDTFraction12.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction12.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
    }

    @Test
    public void test4198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4198");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        int int29 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction35.times((int) (byte) 100);
        java.lang.String str42 = aDTFraction35.toString();
        int int43 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction35.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction14.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction49.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction50.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean56 = aDTFraction52.equals((java.lang.Object) aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction46.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction11.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction11.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction((int) 'a', (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(35, 52);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction67.reciprocal();
        int int69 = aDTFraction67.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction67.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction70.times(1664);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction64.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction11.times(aDTFraction73);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
    }

    @Test
    public void test4199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4199");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(97, (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int6 = aDTFraction5.denominator();
        boolean boolean8 = aDTFraction5.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction5.times(aDTFraction11);
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (-52));
        java.lang.String str17 = aDTFraction16.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction5.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction2.plus(aDTFraction16);
        float float20 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1/-52" + "'", str17, "-1/-52");
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-97.0f) + "'", float20 == (-97.0f));
    }

    @Test
    public void test4200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4200");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction7.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int17 = aDTFraction16.denominator();
        float float18 = aDTFraction16.value();
        float float19 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        java.lang.String str32 = aDTFraction25.toString();
        int int33 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction25.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction38.times(aDTFraction44);
        int int48 = aDTFraction44.numerator();
        int int49 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        boolean boolean59 = aDTFraction55.equals((java.lang.Object) ' ');
        boolean boolean61 = aDTFraction55.equals((java.lang.Object) "");
        float float62 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction44.times(aDTFraction55);
        boolean boolean64 = aDTFraction35.equals((java.lang.Object) aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        int int73 = aDTFraction67.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction67.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float84 = aDTFraction83.value();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction80.plus(aDTFraction83);
        int int86 = aDTFraction80.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction76.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction35.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction16.plus(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction89.times((int) (byte) 0);
        boolean boolean92 = aDTFraction7.equals((java.lang.Object) aDTFraction89);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction2.times(aDTFraction7);
        int int94 = aDTFraction93.denominator();
        java.lang.Class<?> wildcardClass95 = aDTFraction93.getClass();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0/-1" + "'", str32, "0/-1");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + (-0.0f) + "'", float84 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 52 + "'", int94 == 52);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test4201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4201");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(1, 10000);
        java.lang.String str34 = aDTFraction33.toString();
        java.lang.String str35 = aDTFraction33.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction38.plus(aDTFraction41);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction33.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction22.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction48.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int61 = aDTFraction60.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction48.times(aDTFraction60);
        int int63 = aDTFraction48.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        boolean boolean73 = aDTFraction69.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction69.times((int) (byte) 100);
        java.lang.String str76 = aDTFraction69.toString();
        int int77 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction69.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction48.plus(aDTFraction79);
        int int81 = aDTFraction80.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(10, (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction80.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(52, (-1));
        float float89 = aDTFraction88.value();
        int int90 = aDTFraction88.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction84.times(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction45.plus(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction92.reciprocal();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1/10000" + "'", str34, "1/10000");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1/10000" + "'", str35, "1/10000");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/-1" + "'", str76, "0/-1");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-52.0f) + "'", float89 == (-52.0f));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 52 + "'", int90 == 52);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
    }

    @Test
    public void test4202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4202");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        int int91 = aDTFraction2.denominator();
        int int92 = aDTFraction2.numerator();
        float float93 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction96 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (-10000));
        boolean boolean97 = aDTFraction2.equals((java.lang.Object) (-10000));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + 1.0f + "'", float93 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test4203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4203");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        java.lang.String str86 = aDTFraction84.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/1" + "'", str86, "0/1");
    }

    @Test
    public void test4204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4204");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        int int5 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        int int14 = aDTFraction8.numerator();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) (short) 1);
        java.lang.String str17 = aDTFraction8.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction8.times((int) 'a');
        boolean boolean20 = aDTFraction2.equals((java.lang.Object) aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(100, (int) '4');
        int int25 = aDTFraction24.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction28.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction28.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction24.plus(aDTFraction28);
        int int33 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 10);
        int int38 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction37.times((int) (byte) 100);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        int int50 = aDTFraction44.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction44.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        boolean boolean62 = aDTFraction58.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction58.times((int) (byte) 100);
        float float65 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction44.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction44.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction40.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction44.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction2.times(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 1000.0f + "'", float41 == 1000.0f);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
    }

    @Test
    public void test4205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4205");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction2.times((int) 'a');
        int int27 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        boolean boolean37 = aDTFraction33.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction33.times((int) (byte) 100);
        java.lang.String str40 = aDTFraction33.toString();
        int int41 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction33.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction33.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction51.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction51.times((int) (byte) 100);
        java.lang.String str58 = aDTFraction51.toString();
        int int59 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction51.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction64.times(aDTFraction70);
        int int74 = aDTFraction70.numerator();
        int int75 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        boolean boolean85 = aDTFraction81.equals((java.lang.Object) ' ');
        boolean boolean87 = aDTFraction81.equals((java.lang.Object) "");
        float float88 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction70.times(aDTFraction81);
        boolean boolean90 = aDTFraction61.equals((java.lang.Object) aDTFraction70);
        boolean boolean91 = aDTFraction45.equals((java.lang.Object) aDTFraction70);
        float float92 = aDTFraction70.value();
        boolean boolean93 = aDTFraction26.equals((java.lang.Object) float92);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction26.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction26.times(200);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0/-1" + "'", str40, "0/-1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + (-0.0f) + "'", float88 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + (-0.0f) + "'", float92 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction97);
    }

    @Test
    public void test4206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4206");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        float float15 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int39 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction26.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction23.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction23.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction13.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction23.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction23.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction23.times((-52));
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100/100" + "'", str7, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction51);
    }

    @Test
    public void test4207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4207");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times(aDTFraction28);
        java.lang.String str30 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), (-10));
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction28.times(aDTFraction33);
        int int35 = aDTFraction28.denominator();
        int int36 = aDTFraction28.numerator();
        java.lang.Class<?> wildcardClass37 = aDTFraction28.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/10" + "'", str30, "0/10");
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test4208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4208");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        int int17 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        boolean boolean34 = aDTFraction26.equals((java.lang.Object) aDTFraction32);
        java.lang.String str35 = aDTFraction32.toString();
        java.lang.String str36 = aDTFraction32.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction39);
        boolean boolean42 = aDTFraction7.equals((java.lang.Object) aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction2.times(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(10);
        float float46 = aDTFraction2.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
    }

    @Test
    public void test4209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4209");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        int int31 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        java.lang.String str44 = aDTFraction37.toString();
        int int45 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction16.plus(aDTFraction47);
        int int49 = aDTFraction47.denominator();
        int int50 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction47.times(aDTFraction63);
        int int65 = aDTFraction63.denominator();
        java.lang.String str66 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction5.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction70.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction71.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction5.plus(aDTFraction73);
        int int75 = aDTFraction5.denominator();
        int int76 = aDTFraction5.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/1" + "'", str66, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test4210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4210");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        float float10 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction21.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int34 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction18.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction18.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction8.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction18.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction5.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction2.times(aDTFraction18);
        java.lang.String str44 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction2.times(32000000);
        int int47 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(350000);
        int int50 = aDTFraction49.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/35" + "'", str44, "0/35");
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test4211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4211");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        float float25 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        int int38 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean43 = aDTFraction41.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        int int56 = aDTFraction46.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        boolean boolean73 = aDTFraction65.equals((java.lang.Object) aDTFraction71);
        java.lang.String str74 = aDTFraction71.toString();
        java.lang.String str75 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction71.times(aDTFraction78);
        boolean boolean81 = aDTFraction46.equals((java.lang.Object) aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction41.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction28.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction16.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction82.times((int) (short) 10);
        int int87 = aDTFraction82.numerator();
        float float88 = aDTFraction82.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction82.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-1" + "'", str74, "0/-1");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-1" + "'", str75, "0/-1");
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + (-0.0f) + "'", float88 == (-0.0f));
    }

    @Test
    public void test4212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4212");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str7 = aDTFraction6.toString();
        int int8 = aDTFraction6.denominator();
        float float9 = aDTFraction6.value();
        float float10 = aDTFraction6.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction6.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction3.plus(aDTFraction6);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(35);
        float float16 = aDTFraction15.value();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1/1" + "'", str7, "-1/1");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-1.0f) + "'", float9 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-1.0f) + "'", float10 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-35.0f) + "'", float16 == (-35.0f));
    }

    @Test
    public void test4213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4213");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (-52));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction13.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        java.lang.String str44 = aDTFraction37.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction13.times(aDTFraction37);
        java.lang.String str46 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction5.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        int int56 = aDTFraction50.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction50.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        int int69 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction59.times(aDTFraction63);
        java.lang.String str71 = aDTFraction63.toString();
        float float72 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction45.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction2.plus(aDTFraction73);
        float float75 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction2.reciprocal();
        int int77 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/-1" + "'", str46, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.01923077f) + "'", float75 == (-0.01923077f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test4214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4214");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-52), (int) (short) 1);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction5.times(5200);
        java.lang.Class<?> wildcardClass8 = aDTFraction5.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test4215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4215");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction8.times((int) 'a');
        float float13 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        int int26 = aDTFraction22.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        java.lang.String str35 = aDTFraction29.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction22.plus(aDTFraction29);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction36.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        boolean boolean43 = aDTFraction39.equals((java.lang.Object) aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction8.times(aDTFraction39);
        int int45 = aDTFraction44.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction2.plus(aDTFraction44);
        java.lang.Class<?> wildcardClass47 = aDTFraction44.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test4216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4216");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction29.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction31.times((int) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        boolean boolean39 = aDTFraction36.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction36.times(aDTFraction42);
        int int44 = aDTFraction42.denominator();
        int int45 = aDTFraction42.numerator();
        boolean boolean46 = aDTFraction33.equals((java.lang.Object) int45);
        int int47 = aDTFraction33.denominator();
        java.lang.String str48 = aDTFraction33.toString();
        float float49 = aDTFraction33.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/1" + "'", str48, "0/1");
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
    }

    @Test
    public void test4217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4217");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        java.lang.String str8 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction13.reciprocal();
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction10.plus(aDTFraction28);
        int int31 = aDTFraction10.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/-1" + "'", str8, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test4218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4218");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        int int13 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        boolean boolean25 = aDTFraction19.equals((java.lang.Object) "");
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction8.times(aDTFraction19);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction31.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction31.reciprocal();
        java.lang.String str51 = aDTFraction50.toString();
        boolean boolean52 = aDTFraction27.equals((java.lang.Object) str51);
        int int53 = aDTFraction27.numerator();
        int int54 = aDTFraction27.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1/-1" + "'", str51, "1/-1");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test4219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4219");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        float float91 = aDTFraction2.value();
        java.lang.Object obj92 = null;
        boolean boolean93 = aDTFraction2.equals(obj92);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + 1.0f + "'", float91 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test4220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4220");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (-100));
    }

    @Test
    public void test4221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4221");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-17), 32);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction3);
    }

    @Test
    public void test4222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4222");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction16.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int42 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction29.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction26.times(aDTFraction43);
        int int45 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        java.lang.String str54 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times((int) (byte) 100);
        java.lang.String str67 = aDTFraction60.toString();
        int int68 = aDTFraction60.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction60.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction48.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction43.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction16.plus(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (-10));
        java.lang.String str77 = aDTFraction76.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        java.lang.String str82 = aDTFraction80.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction80.plus(aDTFraction85);
        java.lang.String str87 = aDTFraction86.toString();
        java.lang.Object obj88 = null;
        boolean boolean89 = aDTFraction86.equals(obj88);
        boolean boolean90 = aDTFraction76.equals(obj88);
        boolean boolean91 = aDTFraction16.equals((java.lang.Object) aDTFraction76);
        int int92 = aDTFraction76.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction76.reciprocal();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "10/-10" + "'", str77, "10/-10");
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0/-1" + "'", str82, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "-100/-100" + "'", str87, "-100/-100");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-10) + "'", int92 == (-10));
        org.junit.Assert.assertNotNull(aDTFraction93);
    }

    @Test
    public void test4223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4223");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        boolean boolean37 = aDTFraction33.equals((java.lang.Object) '4');
        int int38 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (-35));
        int int42 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction33.times(aDTFraction41);
        int int44 = aDTFraction43.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test4224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4224");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        int int39 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction31.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction44.times(aDTFraction50);
        int int54 = aDTFraction50.numerator();
        int int55 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        boolean boolean65 = aDTFraction61.equals((java.lang.Object) ' ');
        boolean boolean67 = aDTFraction61.equals((java.lang.Object) "");
        float float68 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction50.times(aDTFraction61);
        boolean boolean70 = aDTFraction41.equals((java.lang.Object) aDTFraction50);
        float float71 = aDTFraction41.value();
        boolean boolean72 = aDTFraction24.equals((java.lang.Object) aDTFraction41);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test4225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4225");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction40.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction40.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction37.plus(aDTFraction40);
        float float45 = aDTFraction40.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-1.0f) + "'", float45 == (-1.0f));
    }

    @Test
    public void test4226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4226");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(35, 52);
        boolean boolean13 = aDTFraction9.equals((java.lang.Object) 35);
        boolean boolean14 = aDTFraction2.equals((java.lang.Object) aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        java.lang.String str36 = aDTFraction30.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction49);
        int int53 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction40.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction23.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction2.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction59.reciprocal();
        int int61 = aDTFraction59.denominator();
        java.lang.String str62 = aDTFraction59.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction40.times(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "100/100" + "'", str62, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction63);
    }

    @Test
    public void test4227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4227");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        float float49 = aDTFraction48.value();
        java.lang.String str50 = aDTFraction48.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/1000000" + "'", str50, "0/1000000");
    }

    @Test
    public void test4228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4228");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction19.equals((java.lang.Object) 10);
        boolean boolean27 = aDTFraction14.equals((java.lang.Object) aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times(166400);
        java.lang.Class<?> wildcardClass30 = aDTFraction19.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test4229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4229");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (-104));
    }

    @Test
    public void test4230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4230");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction23.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction23.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction20.plus(aDTFraction23);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        java.lang.String str49 = aDTFraction47.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.plus(aDTFraction52);
        int int54 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction60.reciprocal();
        java.lang.String str62 = aDTFraction60.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction57.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction52.times(aDTFraction60);
        int int65 = aDTFraction52.denominator();
        int int66 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction43.times(aDTFraction52);
        java.lang.Class<?> wildcardClass68 = aDTFraction67.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-1.0f) + "'", float44 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "100/100" + "'", str62, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test4231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4231");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        boolean boolean42 = aDTFraction34.equals((java.lang.Object) aDTFraction40);
        java.lang.String str43 = aDTFraction40.toString();
        java.lang.String str44 = aDTFraction40.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction52.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        boolean boolean66 = aDTFraction58.equals((java.lang.Object) aDTFraction64);
        java.lang.String str67 = aDTFraction64.toString();
        java.lang.String str68 = aDTFraction64.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction64.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float83 = aDTFraction82.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction79.plus(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction76.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float89 = aDTFraction88.value();
        boolean boolean90 = aDTFraction82.equals((java.lang.Object) aDTFraction88);
        java.lang.String str91 = aDTFraction88.toString();
        java.lang.String str92 = aDTFraction88.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction88.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction64.plus(aDTFraction94);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction49.times(aDTFraction64);
        boolean boolean97 = aDTFraction40.equals((java.lang.Object) aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction24.plus(aDTFraction40);
        float float99 = aDTFraction98.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0/-1" + "'", str68, "0/-1");
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-0.0f) + "'", float89 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0/-1" + "'", str91, "0/-1");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "0/-1" + "'", str92, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertTrue("'" + float99 + "' != '" + (-1.0f) + "'", float99 == (-1.0f));
    }

    @Test
    public void test4232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4232");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        int int16 = aDTFraction15.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction22.times((int) (byte) 100);
        java.lang.String str29 = aDTFraction22.toString();
        int int30 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        int int48 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction54.times((int) (byte) 100);
        java.lang.String str61 = aDTFraction54.toString();
        int int62 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction54.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction33.plus(aDTFraction64);
        int int66 = aDTFraction64.denominator();
        boolean boolean68 = aDTFraction64.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction22.times(aDTFraction64);
        boolean boolean70 = aDTFraction15.equals((java.lang.Object) aDTFraction69);
        int int71 = aDTFraction69.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction69.times(1000);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction76.plus(aDTFraction79);
        int int82 = aDTFraction76.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction76.plus(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float93 = aDTFraction92.value();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction89.plus(aDTFraction92);
        int int95 = aDTFraction89.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction85.times(aDTFraction89);
        float float97 = aDTFraction96.value();
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction69.times(aDTFraction96);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction99 = aDTFraction96.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + (-0.0f) + "'", float93 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + float97 + "' != '" + 0.0f + "'", float97 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction98);
    }

    @Test
    public void test4233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4233");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(9700, 2);
    }

    @Test
    public void test4234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4234");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction34.times((int) (byte) 100);
        java.lang.String str41 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction10.times(aDTFraction34);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction2.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction47.times(aDTFraction53);
        int int57 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        java.lang.String str66 = aDTFraction60.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction53.plus(aDTFraction60);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction67.times((int) '4');
        int int71 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction2.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((-17), 1664);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.plus(aDTFraction75);
        int int77 = aDTFraction76.numerator();
        java.lang.Class<?> wildcardClass78 = aDTFraction76.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-17) + "'", int77 == (-17));
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test4235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4235");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction49);
        int int54 = aDTFraction34.denominator();
        float float55 = aDTFraction34.value();
        float float56 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction34.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction58.times(10000);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction60.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction66.times((-3190));
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction68.times(1000000);
        java.lang.Class<?> wildcardClass71 = aDTFraction70.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-1.0f) + "'", float55 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-1.0f) + "'", float56 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test4236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4236");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-13500), (-104));
    }

    @Test
    public void test4237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4237");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction34.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(10, (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.times(aDTFraction38);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int56 = aDTFraction55.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction43.times(aDTFraction55);
        int int58 = aDTFraction43.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction39.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction59.times(aDTFraction60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction59);
    }

    @Test
    public void test4238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4238");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        java.lang.String str14 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int20 = aDTFraction19.denominator();
        float float21 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction19.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        float float27 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction38.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int51 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction38.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction35.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction35.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction25.times(aDTFraction35);
        int int57 = aDTFraction56.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction22.plus(aDTFraction56);
        int int59 = aDTFraction56.numerator();
        int int60 = aDTFraction56.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction5.times(aDTFraction56);
        int int62 = aDTFraction61.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0/-1" + "'", str14, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test4239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4239");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) '#');
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        int int5 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.028571429f) + "'", float3 == (-0.028571429f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1/35" + "'", str4, "-1/35");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test4240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4240");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.times(aDTFraction38);
        java.lang.String str40 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction2.times(35);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction2.times(0);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1/1" + "'", str40, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
    }

    @Test
    public void test4241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4241");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        java.lang.String str8 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (byte) 10);
        int int11 = aDTFraction10.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction10.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/-1" + "'", str8, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test4242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4242");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10), 9700);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int18 = aDTFraction17.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction5.times(aDTFraction17);
        int int20 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        boolean boolean30 = aDTFraction26.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction26.times((int) (byte) 100);
        java.lang.String str33 = aDTFraction26.toString();
        int int34 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction26.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction36);
        int int38 = aDTFraction37.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(10, (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        int int55 = aDTFraction51.numerator();
        int int56 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction41.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction2.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((-10), (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction58.plus(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction62);
    }

    @Test
    public void test4243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4243");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        java.lang.String str23 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int49 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction36.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction33.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction33.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction33.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction15.times(aDTFraction33);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction15.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
    }

    @Test
    public void test4244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4244");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10000, 100);
    }

    @Test
    public void test4245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4245");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction56.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction49.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int85 = aDTFraction84.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction72.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction69.times(aDTFraction86);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction69.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction61.times(aDTFraction89);
        java.lang.String str91 = aDTFraction90.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0/-52" + "'", str91, "0/-52");
    }

    @Test
    public void test4246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4246");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        int int91 = aDTFraction2.denominator();
        int int92 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction2.reciprocal();
        int int94 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 100 + "'", int94 == 100);
    }

    @Test
    public void test4247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4247");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction14.denominator();
        java.lang.Class<?> wildcardClass18 = aDTFraction14.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test4248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4248");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        boolean boolean10 = aDTFraction2.equals((java.lang.Object) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.times((int) (short) -1);
        java.lang.Class<?> wildcardClass13 = aDTFraction12.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4249");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        boolean boolean68 = aDTFraction60.equals((java.lang.Object) aDTFraction66);
        java.lang.String str69 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction51.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction8.times(aDTFraction51);
        int int73 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str78 = aDTFraction77.toString();
        int int79 = aDTFraction77.denominator();
        float float80 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction74.times(aDTFraction77);
        java.lang.Class<?> wildcardClass82 = aDTFraction77.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-1/1" + "'", str78, "-1/1");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-1.0f) + "'", float80 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test4250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4250");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        int int44 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction38.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        boolean boolean67 = aDTFraction63.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction63.times((int) (byte) 100);
        float float70 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction49.plus(aDTFraction63);
        boolean boolean72 = aDTFraction38.equals((java.lang.Object) aDTFraction63);
        boolean boolean73 = aDTFraction33.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction38.times(0);
        java.lang.String str76 = aDTFraction38.toString();
        float float77 = aDTFraction38.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/-1" + "'", str76, "0/-1");
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
    }

    @Test
    public void test4251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4251");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int6 = aDTFraction5.denominator();
        float float7 = aDTFraction5.value();
        float float8 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        int int17 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        int int30 = aDTFraction24.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction20.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        boolean boolean48 = aDTFraction40.equals((java.lang.Object) aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction51.equals((java.lang.Object) 10);
        boolean boolean59 = aDTFraction46.equals((java.lang.Object) aDTFraction51);
        boolean boolean60 = aDTFraction24.equals((java.lang.Object) boolean59);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction5.times(aDTFraction24);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction2.times(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + (-0.0f) + "'", float7 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + (-0.0f) + "'", float8 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 0.0f + "'", float62 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction63);
    }

    @Test
    public void test4252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4252");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        int int39 = aDTFraction35.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction26.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        java.lang.Class<?> wildcardClass49 = aDTFraction46.getClass();
        boolean boolean50 = aDTFraction26.equals((java.lang.Object) aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction56.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction46.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction22.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction72.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction72.reciprocal();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
    }

    @Test
    public void test4253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4253");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10), (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        float float4 = aDTFraction3.value();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-1.0f) + "'", float4 == (-1.0f));
    }

    @Test
    public void test4254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4254");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        float float6 = aDTFraction5.value();
        int int7 = aDTFraction5.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 1.0f + "'", float6 == 1.0f);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
    }

    @Test
    public void test4255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4255");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(52);
        java.lang.String str6 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (byte) 10);
        int int10 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        boolean boolean27 = aDTFraction19.equals((java.lang.Object) aDTFraction25);
        java.lang.String str28 = aDTFraction25.toString();
        java.lang.String str29 = aDTFraction25.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction34.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction34.reciprocal();
        int int50 = aDTFraction49.numerator();
        float float51 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction31.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int56 = aDTFraction55.denominator();
        float float57 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.reciprocal();
        int int59 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction52.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction9.times(aDTFraction52);
        float float62 = aDTFraction9.value();
        boolean boolean63 = aDTFraction5.equals((java.lang.Object) aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction9.times((-100));
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1664/10" + "'", str6, "1664/10");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-1.0f) + "'", float51 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 1.0f + "'", float57 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 5.2f + "'", float62 == 5.2f);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(aDTFraction65);
    }

    @Test
    public void test4256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4256");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction9.denominator();
        java.lang.String str11 = aDTFraction9.toString();
        int int12 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.times(9700);
        int int15 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        float float20 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction28.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction18.times(aDTFraction28);
        int int50 = aDTFraction49.numerator();
        int int51 = aDTFraction49.denominator();
        java.lang.String str52 = aDTFraction49.toString();
        java.lang.String str53 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction14.times(aDTFraction49);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction49.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction54);
    }

    @Test
    public void test4257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4257");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        java.lang.String str39 = aDTFraction32.toString();
        int int40 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction22.plus(aDTFraction32);
        java.lang.Class<?> wildcardClass42 = aDTFraction22.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test4258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4258");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (-1));
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction4.times(0);
        int int7 = aDTFraction6.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test4259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4259");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        int int38 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction44.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction23.plus(aDTFraction54);
        int int56 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        int int65 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction59.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        int int76 = aDTFraction70.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction70.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float85 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction81.plus(aDTFraction84);
        boolean boolean88 = aDTFraction84.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction84.times((int) (byte) 100);
        float float91 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction70.plus(aDTFraction84);
        boolean boolean93 = aDTFraction59.equals((java.lang.Object) aDTFraction84);
        boolean boolean94 = aDTFraction54.equals((java.lang.Object) aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction59.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction14.plus(aDTFraction59);
        float float98 = aDTFraction97.value();
        java.lang.String str99 = aDTFraction97.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + (-0.0f) + "'", float91 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertTrue("'" + float98 + "' != '" + 0.0f + "'", float98 == 0.0f);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "0/1" + "'", str99, "0/1");
    }

    @Test
    public void test4260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4260");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        int int52 = aDTFraction45.denominator();
        java.lang.String str53 = aDTFraction45.toString();
        java.lang.String str54 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction22.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction55.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction65.times(100);
        int int86 = aDTFraction85.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction55.plus(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = new com.thealgorithms.maths.ADTFraction(97, (int) (byte) 100);
        boolean boolean91 = aDTFraction87.equals((java.lang.Object) (byte) 100);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test4261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4261");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction16.times((int) (byte) -1);
        java.lang.String str20 = aDTFraction16.toString();
        java.lang.String str21 = aDTFraction16.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(10000, (int) (byte) 100);
        java.lang.String str25 = aDTFraction24.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction24.times(970000);
        boolean boolean28 = aDTFraction16.equals((java.lang.Object) aDTFraction24);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/10" + "'", str20, "0/10");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/10" + "'", str21, "0/10");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "10000/100" + "'", str25, "10000/100");
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test4262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4262");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, 10000);
        java.lang.String str3 = aDTFraction2.toString();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1/10000" + "'", str3, "1/10000");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1/10000" + "'", str4, "1/10000");
        org.junit.Assert.assertNotNull(aDTFraction5);
    }

    @Test
    public void test4263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4263");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times((int) (byte) 10);
        int int7 = aDTFraction6.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction6.times((-52));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-10) + "'", int7 == (-10));
        org.junit.Assert.assertNotNull(aDTFraction9);
    }

    @Test
    public void test4264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4264");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction2.equals((java.lang.Object) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (-1));
        boolean boolean14 = aDTFraction12.equals((java.lang.Object) 10);
        java.lang.String str15 = aDTFraction12.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        boolean boolean28 = aDTFraction22.equals((java.lang.Object) "");
        java.lang.String str29 = aDTFraction22.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        int int38 = aDTFraction32.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction32.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        int int51 = aDTFraction45.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction41.times(aDTFraction45);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction22.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction57.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction58.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction22.times(aDTFraction60);
        int int62 = aDTFraction61.denominator();
        int int63 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction2.plus(aDTFraction61);
        int int65 = aDTFraction64.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-10) + "'", int62 == (-10));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-10) + "'", int63 == (-10));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test4265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4265");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction5.times(32);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(aDTFraction7);
    }

    @Test
    public void test4266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4266");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(100, (int) '#');
        int int7 = aDTFraction6.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        java.lang.String str12 = aDTFraction10.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction10.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction6.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction3.plus(aDTFraction15);
        int int19 = aDTFraction18.numerator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test4267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4267");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(198336, 32000000);
    }

    @Test
    public void test4268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4268");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean17 = aDTFraction15.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        boolean boolean47 = aDTFraction39.equals((java.lang.Object) aDTFraction45);
        java.lang.String str48 = aDTFraction45.toString();
        java.lang.String str49 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction52);
        boolean boolean55 = aDTFraction20.equals((java.lang.Object) aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction15.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction2.times(aDTFraction56);
        int int58 = aDTFraction57.denominator();
        float float59 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction57.times(10000);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int65 = aDTFraction64.denominator();
        boolean boolean67 = aDTFraction64.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction64.times(aDTFraction70);
        int int72 = aDTFraction70.denominator();
        int int73 = aDTFraction70.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction76.reciprocal();
        int int78 = aDTFraction76.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction76.times(0);
        boolean boolean81 = aDTFraction70.equals((java.lang.Object) 0);
        int int82 = aDTFraction70.denominator();
        boolean boolean83 = aDTFraction57.equals((java.lang.Object) int82);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 32 + "'", int72 == 32);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 32 + "'", int82 == 32);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test4269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4269");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-100), (int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(3500);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times((-13500));
        java.lang.Class<?> wildcardClass7 = aDTFraction6.getClass();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test4270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4270");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', 10000);
    }

    @Test
    public void test4271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4271");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        int int19 = aDTFraction18.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction18.times((int) (short) 10);
        int int22 = aDTFraction18.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        int int31 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction18.plus(aDTFraction25);
        java.lang.Class<?> wildcardClass33 = aDTFraction18.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test4272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4272");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        int int6 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean24 = aDTFraction22.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        int int37 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        boolean boolean54 = aDTFraction46.equals((java.lang.Object) aDTFraction52);
        java.lang.String str55 = aDTFraction52.toString();
        java.lang.String str56 = aDTFraction52.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction52.times(aDTFraction59);
        boolean boolean62 = aDTFraction27.equals((java.lang.Object) aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction22.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction9.times(aDTFraction63);
        boolean boolean65 = aDTFraction5.equals((java.lang.Object) aDTFraction63);
        java.lang.String str66 = aDTFraction63.toString();
        float float67 = aDTFraction63.value();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0/-1" + "'", str56, "0/-1");
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
    }

    @Test
    public void test4273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4273");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times((int) (short) 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction5);
    }

    @Test
    public void test4274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4274");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        float float25 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction31.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction33.times((int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction35.times((-10000));
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction37);
    }

    @Test
    public void test4275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4275");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-350), (int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(100, (int) '#');
        int int6 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        boolean boolean16 = aDTFraction12.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction12.times((int) (byte) 100);
        java.lang.String str19 = aDTFraction12.toString();
        int int20 = aDTFraction12.denominator();
        int int21 = aDTFraction12.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        java.lang.String str34 = aDTFraction27.toString();
        int int35 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction27.times((int) ' ');
        int int38 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction12.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction5.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        boolean boolean50 = aDTFraction46.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction46.times((int) (byte) 100);
        java.lang.String str53 = aDTFraction46.toString();
        int int54 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction46.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction46.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction5.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction2.plus(aDTFraction46);
        float float61 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0/-1" + "'", str19, "0/-1");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-350.0f) + "'", float61 == (-350.0f));
    }

    @Test
    public void test4276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4276");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int6 = aDTFraction5.denominator();
        float float7 = aDTFraction5.value();
        float float8 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        int int17 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        int int30 = aDTFraction24.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction20.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        boolean boolean48 = aDTFraction40.equals((java.lang.Object) aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction51.equals((java.lang.Object) 10);
        boolean boolean59 = aDTFraction46.equals((java.lang.Object) aDTFraction51);
        boolean boolean60 = aDTFraction24.equals((java.lang.Object) boolean59);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction5.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction24.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction2.plus(aDTFraction65);
        float float67 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + (-0.0f) + "'", float7 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + (-0.0f) + "'", float8 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-1.0f) + "'", float67 == (-1.0f));
    }

    @Test
    public void test4277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4277");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        int int41 = aDTFraction37.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        java.lang.Class<?> wildcardClass51 = aDTFraction48.getClass();
        boolean boolean52 = aDTFraction28.equals((java.lang.Object) aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        boolean boolean62 = aDTFraction58.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction58.times((int) (byte) 100);
        java.lang.String str65 = aDTFraction58.toString();
        int int66 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction48.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction67.times(52);
        boolean boolean70 = aDTFraction25.equals((java.lang.Object) aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction15.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction71.times((int) (byte) 100);
        java.lang.String str74 = aDTFraction73.toString();
        float float75 = aDTFraction73.value();
        java.lang.Class<?> wildcardClass76 = aDTFraction73.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0/-1" + "'", str65, "0/-1");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-10000/-1" + "'", str74, "-10000/-1");
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 10000.0f + "'", float75 == 10000.0f);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test4278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4278");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction40.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction41.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction5.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str56 = aDTFraction55.toString();
        int int57 = aDTFraction55.denominator();
        float float58 = aDTFraction55.value();
        float float59 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction55.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction62.times((int) (short) 1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction43.plus(aDTFraction64);
        int int67 = aDTFraction66.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1/1" + "'", str56, "-1/1");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-1.0f) + "'", float58 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-1.0f) + "'", float59 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 8.7f + "'", float65 == 8.7f);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 17510 + "'", int67 == 17510);
    }

    @Test
    public void test4279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4279");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction5.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        int int45 = aDTFraction30.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction51.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction51.times((int) (byte) 100);
        java.lang.String str58 = aDTFraction51.toString();
        int int59 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction51.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction30.plus(aDTFraction61);
        boolean boolean63 = aDTFraction5.equals((java.lang.Object) aDTFraction61);
        int int64 = aDTFraction61.numerator();
        float float65 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction2.plus(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
    }

    @Test
    public void test4280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4280");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int58 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction45.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction59);
        int int61 = aDTFraction59.denominator();
        boolean boolean62 = aDTFraction34.equals((java.lang.Object) aDTFraction59);
        int int63 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int69 = aDTFraction68.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction68.reciprocal();
        int int71 = aDTFraction68.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        int int80 = aDTFraction74.numerator();
        boolean boolean82 = aDTFraction74.equals((java.lang.Object) (short) 1);
        java.lang.String str83 = aDTFraction74.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction74.times((int) 'a');
        boolean boolean86 = aDTFraction68.equals((java.lang.Object) aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction59.plus(aDTFraction85);
        java.lang.Class<?> wildcardClass88 = aDTFraction59.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-100) + "'", int63 == (-100));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0/-1" + "'", str83, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test4281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4281");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        int int9 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction12.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction27.reciprocal();
        boolean boolean29 = aDTFraction2.equals((java.lang.Object) aDTFraction28);
        int int30 = aDTFraction28.numerator();
        java.lang.String str31 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction34.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction35.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        int int50 = aDTFraction44.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction40.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction57.times((int) 'a');
        int int62 = aDTFraction61.denominator();
        java.lang.String str63 = aDTFraction61.toString();
        boolean boolean65 = aDTFraction61.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int69 = aDTFraction68.denominator();
        float float70 = aDTFraction68.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction68.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction61.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction40.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction68.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction68.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction76.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction28.plus(aDTFraction77);
        float float79 = aDTFraction78.value();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1/1" + "'", str31, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 1.0f + "'", float70 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 0.0f + "'", float79 == 0.0f);
    }

    @Test
    public void test4282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4282");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction18.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction19.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int41 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction40);
        int int43 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction24.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction47.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction40.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction15.times(aDTFraction58);
        int int60 = aDTFraction15.numerator();
        int int61 = aDTFraction15.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test4283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4283");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        float float23 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(1664, 1664);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction20.times(1024);
        int int32 = aDTFraction31.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test4284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4284");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) 'a', 10000);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        boolean boolean13 = aDTFraction9.equals((java.lang.Object) ' ');
        boolean boolean15 = aDTFraction9.equals((java.lang.Object) "");
        int int16 = aDTFraction9.denominator();
        java.lang.String str17 = aDTFraction9.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction9.plus(aDTFraction20);
        int int22 = aDTFraction21.numerator();
        boolean boolean24 = aDTFraction21.equals((java.lang.Object) 10.0f);
        java.lang.String str25 = aDTFraction21.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction2.plus(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0/-10" + "'", str25, "0/-10");
        org.junit.Assert.assertNotNull(aDTFraction26);
    }

    @Test
    public void test4285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4285");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(97, (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int6 = aDTFraction5.denominator();
        boolean boolean8 = aDTFraction5.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction5.times(aDTFraction11);
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (-52));
        java.lang.String str17 = aDTFraction16.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction5.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction25.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction40.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction53.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int66 = aDTFraction65.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction53.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction50.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        boolean boolean78 = aDTFraction74.equals((java.lang.Object) ' ');
        boolean boolean80 = aDTFraction74.equals((java.lang.Object) "");
        java.lang.String str81 = aDTFraction74.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction74);
        float float83 = aDTFraction82.value();
        java.lang.String str84 = aDTFraction82.toString();
        int int85 = aDTFraction82.denominator();
        boolean boolean86 = aDTFraction40.equals((java.lang.Object) int85);
        int int87 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction40.times((int) (short) 100);
        boolean boolean90 = aDTFraction19.equals((java.lang.Object) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean95 = aDTFraction93.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction93.reciprocal();
        float float97 = aDTFraction96.value();
        boolean boolean98 = aDTFraction19.equals((java.lang.Object) float97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1/-52" + "'", str17, "-1/-52");
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0/-1" + "'", str81, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/-100" + "'", str84, "0/-100");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-100) + "'", int85 == (-100));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + float97 + "' != '" + (-10.0f) + "'", float97 == (-10.0f));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test4286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4286");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 10);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times((int) (byte) 100);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        boolean boolean23 = aDTFraction15.equals((java.lang.Object) aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        boolean boolean33 = aDTFraction26.equals((java.lang.Object) 10);
        boolean boolean34 = aDTFraction21.equals((java.lang.Object) aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        int int50 = aDTFraction46.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction37.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        java.lang.Class<?> wildcardClass60 = aDTFraction57.getClass();
        boolean boolean61 = aDTFraction37.equals((java.lang.Object) aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        boolean boolean71 = aDTFraction67.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction67.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction57.times(aDTFraction73);
        boolean boolean75 = aDTFraction26.equals((java.lang.Object) aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction73.times(10);
        int int78 = aDTFraction73.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction73.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction5.plus(aDTFraction73);
        float float82 = aDTFraction73.value();
        float float83 = aDTFraction73.value();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 1000.0f + "'", float6 == 1000.0f);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
    }

    @Test
    public void test4287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4287");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        boolean boolean21 = aDTFraction13.equals((java.lang.Object) aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction24.equals((java.lang.Object) 10);
        boolean boolean32 = aDTFraction19.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction38.times(aDTFraction44);
        int int48 = aDTFraction44.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction35.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        java.lang.Class<?> wildcardClass58 = aDTFraction55.getClass();
        boolean boolean59 = aDTFraction35.equals((java.lang.Object) aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        boolean boolean69 = aDTFraction65.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction65.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction55.times(aDTFraction71);
        boolean boolean73 = aDTFraction24.equals((java.lang.Object) aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction2.plus(aDTFraction24);
        float float75 = aDTFraction74.value();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/10" + "'", str3, "-1/10");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.1f) + "'", float75 == (-0.1f));
    }

    @Test
    public void test4288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4288");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction40.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction40.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction37.plus(aDTFraction40);
        java.lang.String str45 = aDTFraction37.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.times(9900);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
    }

    @Test
    public void test4289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4289");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean10 = aDTFraction8.equals((java.lang.Object) (-1));
        java.lang.String str11 = aDTFraction8.toString();
        boolean boolean12 = aDTFraction2.equals((java.lang.Object) str11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        java.lang.Class<?> wildcardClass38 = aDTFraction35.getClass();
        boolean boolean39 = aDTFraction15.equals((java.lang.Object) aDTFraction35);
        java.lang.String str40 = aDTFraction15.toString();
        int int41 = aDTFraction15.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction2.plus(aDTFraction15);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction15.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0/-1" + "'", str40, "0/-1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction42);
    }

    @Test
    public void test4290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4290");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int58 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction45.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction59);
        int int61 = aDTFraction59.denominator();
        boolean boolean62 = aDTFraction34.equals((java.lang.Object) aDTFraction59);
        int int63 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction65.times((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction67.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-100) + "'", int63 == (-100));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction67);
    }

    @Test
    public void test4291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4291");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) '#');
        int int3 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float7 = aDTFraction6.value();
        java.lang.String str8 = aDTFraction6.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction6.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction2.plus(aDTFraction11);
        float float14 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + (-0.0f) + "'", float7 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/-1" + "'", str8, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 2.857143f + "'", float14 == 2.857143f);
    }

    @Test
    public void test4292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4292");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction37.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction38.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction34.plus(aDTFraction43);
        int int46 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int62 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction49.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction49.reciprocal();
        java.lang.String str65 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction49.reciprocal();
        boolean boolean68 = aDTFraction66.equals((java.lang.Object) "0/32");
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction34.times(aDTFraction66);
        float float70 = aDTFraction69.value();
        java.lang.Class<?> wildcardClass71 = aDTFraction69.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1/1" + "'", str65, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 1.0f + "'", float70 == 1.0f);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test4293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4293");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        int int19 = aDTFraction18.denominator();
        float float20 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction46.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction18.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        int int64 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction68.reciprocal();
        int int70 = aDTFraction68.denominator();
        boolean boolean71 = aDTFraction63.equals((java.lang.Object) aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean76 = aDTFraction74.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction74.reciprocal();
        java.lang.Class<?> wildcardClass78 = aDTFraction74.getClass();
        boolean boolean79 = aDTFraction68.equals((java.lang.Object) aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction74.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, 32);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction74.plus(aDTFraction84);
        int int86 = aDTFraction85.numerator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 68 + "'", int86 == 68);
    }

    @Test
    public void test4294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4294");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        int int7 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        int int24 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction11.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        java.lang.Class<?> wildcardClass34 = aDTFraction31.getClass();
        boolean boolean35 = aDTFraction11.equals((java.lang.Object) aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction31.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction52.reciprocal();
        int int54 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction8.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction2.times(aDTFraction55);
        int int57 = aDTFraction56.denominator();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-52) + "'", int54 == (-52));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 520 + "'", int57 == 520);
    }

    @Test
    public void test4295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4295");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        float float6 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        int int17 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction11.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        float float32 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction11.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction33.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction8.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-52), 166400);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction8.times(aDTFraction39);
        float float41 = aDTFraction8.value();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
    }

    @Test
    public void test4296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4296");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        java.lang.Object obj24 = null;
        boolean boolean25 = aDTFraction22.equals(obj24);
        float float26 = aDTFraction22.value();
        int int27 = aDTFraction22.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (byte) 10);
        int int31 = aDTFraction30.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        boolean boolean48 = aDTFraction40.equals((java.lang.Object) aDTFraction46);
        java.lang.String str49 = aDTFraction46.toString();
        java.lang.String str50 = aDTFraction46.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction46.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int68 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction55.reciprocal();
        int int71 = aDTFraction70.numerator();
        float float72 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction52.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int77 = aDTFraction76.denominator();
        float float78 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction76.reciprocal();
        int int80 = aDTFraction79.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction73.plus(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction30.times(aDTFraction73);
        int int83 = aDTFraction30.numerator();
        float float84 = aDTFraction30.value();
        int int85 = aDTFraction30.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction22.plus(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-1.0f) + "'", float72 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 1.0f + "'", float78 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + 5.2f + "'", float84 == 5.2f);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 52 + "'", int85 == 52);
        org.junit.Assert.assertNotNull(aDTFraction86);
    }

    @Test
    public void test4297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4297");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction5.numerator();
        int int11 = aDTFraction5.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test4298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4298");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(52, 3500);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction11.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction14.times((-5200));
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction14.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction16);
    }

    @Test
    public void test4299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4299");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        int int16 = aDTFraction10.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction10.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        boolean boolean28 = aDTFraction24.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction24.times((int) (byte) 100);
        float float31 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction10.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int48 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction35.times(aDTFraction47);
        int int50 = aDTFraction35.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction56.times((int) (byte) 100);
        java.lang.String str63 = aDTFraction56.toString();
        int int64 = aDTFraction56.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction56.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction35.plus(aDTFraction66);
        boolean boolean68 = aDTFraction10.equals((java.lang.Object) aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction71.times(aDTFraction77);
        boolean boolean81 = aDTFraction10.equals((java.lang.Object) aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction71.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction2.plus(aDTFraction82);
        float float84 = aDTFraction82.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + (-1.0f) + "'", float84 == (-1.0f));
    }

    @Test
    public void test4300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4300");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) 'a', (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction7.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction21.times((int) (byte) 100);
        float float28 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction2.plus(aDTFraction21);
        java.lang.Class<?> wildcardClass31 = aDTFraction21.getClass();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test4301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4301");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-100), (-3190));
    }

    @Test
    public void test4302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4302");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(9700, (int) '4');
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        boolean boolean20 = aDTFraction12.equals((java.lang.Object) aDTFraction18);
        boolean boolean22 = aDTFraction18.equals((java.lang.Object) 'a');
        int int23 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction18.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction2.times(aDTFraction18);
        float float27 = aDTFraction18.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 186.53847f + "'", float3 == 186.53847f);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
    }

    @Test
    public void test4303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4303");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        java.lang.String str23 = aDTFraction22.toString();
        float float24 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction27.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction28.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean34 = aDTFraction30.equals((java.lang.Object) aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int38 = aDTFraction37.denominator();
        float float39 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction37.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        float float45 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction56.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int69 = aDTFraction68.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction53.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction53.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction43.times(aDTFraction53);
        int int75 = aDTFraction74.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction40.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float83 = aDTFraction82.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction79.plus(aDTFraction82);
        boolean boolean86 = aDTFraction82.equals((java.lang.Object) ' ');
        boolean boolean88 = aDTFraction82.equals((java.lang.Object) "");
        float float89 = aDTFraction82.value();
        boolean boolean90 = aDTFraction40.equals((java.lang.Object) aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction33.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction22.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = new com.thealgorithms.maths.ADTFraction(20000, (-104));
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction22.plus(aDTFraction95);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/1" + "'", str23, "0/1");
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 0.0f + "'", float24 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 1.0f + "'", float39 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-0.0f) + "'", float89 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction96);
    }

    @Test
    public void test4304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4304");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        java.lang.Object obj13 = null;
        boolean boolean14 = aDTFraction12.equals(obj13);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int38 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction22.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        boolean boolean50 = aDTFraction46.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction46.times((int) (byte) 100);
        java.lang.String str53 = aDTFraction46.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction22.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction57.times(aDTFraction63);
        int int67 = aDTFraction57.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction70.times(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float83 = aDTFraction82.value();
        boolean boolean84 = aDTFraction76.equals((java.lang.Object) aDTFraction82);
        java.lang.String str85 = aDTFraction82.toString();
        java.lang.String str86 = aDTFraction82.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float90 = aDTFraction89.value();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction82.times(aDTFraction89);
        boolean boolean92 = aDTFraction57.equals((java.lang.Object) aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction54.times(aDTFraction57);
        int int94 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction12.times(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0/-1" + "'", str85, "0/-1");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertTrue("'" + float90 + "' != '" + (-0.0f) + "'", float90 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(aDTFraction95);
    }

    @Test
    public void test4305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4305");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) '4');
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test4306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4306");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        java.lang.String str13 = aDTFraction8.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction8.times((int) '4');
        float float16 = aDTFraction15.value();
        float float17 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        int int46 = aDTFraction42.numerator();
        int int47 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        boolean boolean59 = aDTFraction53.equals((java.lang.Object) "");
        float float60 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction42.times(aDTFraction53);
        boolean boolean62 = aDTFraction33.equals((java.lang.Object) aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction65.plus(aDTFraction68);
        int int71 = aDTFraction65.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction65.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        int int84 = aDTFraction78.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction74.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction33.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction15.times(aDTFraction74);
        java.lang.Class<?> wildcardClass88 = aDTFraction87.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test4307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4307");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(2, 198336);
    }

    @Test
    public void test4308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4308");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        int int4 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        boolean boolean14 = aDTFraction10.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction10.times((int) (byte) 100);
        java.lang.String str17 = aDTFraction10.toString();
        int int18 = aDTFraction10.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction10.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        int int33 = aDTFraction29.numerator();
        int int34 = aDTFraction29.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        boolean boolean46 = aDTFraction40.equals((java.lang.Object) "");
        float float47 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction29.times(aDTFraction40);
        boolean boolean49 = aDTFraction20.equals((java.lang.Object) aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        int int58 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction52.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction65.plus(aDTFraction68);
        int int71 = aDTFraction65.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction61.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction20.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction61.times(0);
        int int76 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction61.times(1);
        int int79 = aDTFraction61.numerator();
        int int80 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction2.plus(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction81);
    }

    @Test
    public void test4309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4309");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(97000, (-100));
        java.lang.String str3 = aDTFraction2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "97000/-100" + "'", str3, "97000/-100");
    }

    @Test
    public void test4310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4310");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-52), 20000);
        int int3 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-52) + "'", int3 == (-52));
    }

    @Test
    public void test4311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4311");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10), 52);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction10.times((int) 'a');
        float float15 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction4.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        int int41 = aDTFraction37.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        java.lang.Class<?> wildcardClass51 = aDTFraction48.getClass();
        boolean boolean52 = aDTFraction28.equals((java.lang.Object) aDTFraction48);
        java.lang.String str53 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction28.times(32);
        float float56 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(32, 35);
        java.lang.String str60 = aDTFraction59.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction28.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction25.plus(aDTFraction59);
        java.lang.Class<?> wildcardClass63 = aDTFraction25.getClass();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "32/35" + "'", str60, "32/35");
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test4312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4312");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction46.reciprocal();
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction49.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int55 = aDTFraction54.denominator();
        float float56 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction54.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction54);
        int int59 = aDTFraction54.numerator();
        int int60 = aDTFraction54.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 1.0f + "'", float50 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 1.0f + "'", float56 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
    }

    @Test
    public void test4313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4313");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        int int6 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times(32);
        int int10 = aDTFraction5.denominator();
        int int11 = aDTFraction5.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test4314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4314");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, 35);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        java.lang.String str11 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction5.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times(10);
        java.lang.Class<?> wildcardClass16 = aDTFraction5.getClass();
        boolean boolean17 = aDTFraction2.equals((java.lang.Object) wildcardClass16);
        float float18 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 2.857143f + "'", float18 == 2.857143f);
    }

    @Test
    public void test4315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4315");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(20000, (int) (short) 10);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(aDTFraction4);
    }

    @Test
    public void test4316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4316");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass37 = aDTFraction34.getClass();
        boolean boolean38 = aDTFraction14.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int78 = aDTFraction77.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction65.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction62.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction54.plus(aDTFraction62);
        float float82 = aDTFraction54.value();
        java.lang.String str83 = aDTFraction54.toString();
        java.lang.String str84 = aDTFraction54.toString();
        int int85 = aDTFraction54.numerator();
        java.lang.String str86 = aDTFraction54.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + 0.0f + "'", float82 == 0.0f);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0/1" + "'", str83, "0/1");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/1" + "'", str84, "0/1");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/1" + "'", str86, "0/1");
    }

    @Test
    public void test4317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4317");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction16.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int42 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction29.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction26.times(aDTFraction43);
        int int45 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        java.lang.String str54 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times((int) (byte) 100);
        java.lang.String str67 = aDTFraction60.toString();
        int int68 = aDTFraction60.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction60.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction48.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction43.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction16.plus(aDTFraction72);
        int int74 = aDTFraction72.numerator();
        int int75 = aDTFraction72.numerator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction72.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test4318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4318");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int41 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction43.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int72 = aDTFraction71.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction59.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction59.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float92 = aDTFraction91.value();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction88.plus(aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction85.times(aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction80.plus(aDTFraction94);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction59.times(aDTFraction95);
        boolean boolean97 = aDTFraction43.equals((java.lang.Object) aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction17.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction99 = aDTFraction59.reciprocal();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + (-0.0f) + "'", float92 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertNotNull(aDTFraction99);
    }

    @Test
    public void test4319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4319");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        int int29 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction35.times((int) (byte) 100);
        java.lang.String str42 = aDTFraction35.toString();
        int int43 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction35.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction14.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction49.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction50.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean56 = aDTFraction52.equals((java.lang.Object) aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction46.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction11.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction62.times(32);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction11.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction11.times(2);
        java.lang.Class<?> wildcardClass69 = aDTFraction11.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 32.0f + "'", float65 == 32.0f);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test4320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4320");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        boolean boolean28 = aDTFraction25.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction25.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction22.times((int) 'a');
        int int33 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        int int42 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction36.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction45.times(aDTFraction49);
        int int57 = aDTFraction45.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction32.plus(aDTFraction45);
        int int59 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction62.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction62.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        java.lang.String str75 = aDTFraction73.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction73.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction62.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction73.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int86 = aDTFraction85.denominator();
        boolean boolean88 = aDTFraction85.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction85.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction82.plus(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction82.times((int) 'a');
        java.lang.Class<?> wildcardClass93 = aDTFraction92.getClass();
        boolean boolean94 = aDTFraction32.equals((java.lang.Object) wildcardClass93);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-1" + "'", str75, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 100 + "'", int86 == 100);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test4321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4321");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction50);
        java.lang.String str53 = aDTFraction50.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction50.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
    }

    @Test
    public void test4322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4322");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10000, 1000);
    }

    @Test
    public void test4323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4323");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction14.denominator();
        java.lang.String str16 = aDTFraction14.toString();
        float float17 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction23.times((int) 'a');
        int int28 = aDTFraction27.denominator();
        java.lang.String str29 = aDTFraction27.toString();
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int35 = aDTFraction34.denominator();
        float float36 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction34.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction27.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction38.reciprocal();
        java.lang.String str40 = aDTFraction38.toString();
        boolean boolean41 = aDTFraction14.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction2.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction2.times(52);
        int int45 = aDTFraction44.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 1.0f + "'", float36 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-100/-100" + "'", str40, "-100/-100");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
    }

    @Test
    public void test4324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4324");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        java.lang.String str10 = aDTFraction5.toString();
        java.lang.Class<?> wildcardClass11 = aDTFraction5.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0/-1" + "'", str10, "0/-1");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test4325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4325");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        int int5 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        int int14 = aDTFraction8.numerator();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) (short) 1);
        java.lang.String str17 = aDTFraction8.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction8.times((int) 'a');
        boolean boolean20 = aDTFraction2.equals((java.lang.Object) aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(100, (int) '4');
        int int25 = aDTFraction24.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction28.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction28.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction24.plus(aDTFraction28);
        int int33 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction28);
        java.lang.String str35 = aDTFraction28.toString();
        java.lang.String str36 = aDTFraction28.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-1/1" + "'", str35, "-1/1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1/1" + "'", str36, "-1/1");
    }

    @Test
    public void test4326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4326");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int13 = aDTFraction12.denominator();
        float float14 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction12.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        float float20 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction28.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction18.times(aDTFraction28);
        int int50 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction15.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        boolean boolean61 = aDTFraction57.equals((java.lang.Object) ' ');
        boolean boolean63 = aDTFraction57.equals((java.lang.Object) "");
        float float64 = aDTFraction57.value();
        boolean boolean65 = aDTFraction15.equals((java.lang.Object) aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction8.plus(aDTFraction15);
        int int67 = aDTFraction66.denominator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10000 + "'", int67 == 10000);
    }

    @Test
    public void test4327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4327");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction29.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int55 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction42.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction39.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        boolean boolean67 = aDTFraction63.equals((java.lang.Object) ' ');
        boolean boolean69 = aDTFraction63.equals((java.lang.Object) "");
        java.lang.String str70 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction57.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction71.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction29.plus(aDTFraction73);
        float float75 = aDTFraction29.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 0.0f + "'", float75 == 0.0f);
    }

    @Test
    public void test4328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4328");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        boolean boolean15 = aDTFraction11.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction11.times((int) (byte) 100);
        java.lang.String str18 = aDTFraction11.toString();
        int int19 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        int int35 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        boolean boolean47 = aDTFraction41.equals((java.lang.Object) "");
        float float48 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction30.times(aDTFraction41);
        boolean boolean50 = aDTFraction21.equals((java.lang.Object) aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction62.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction21.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction2.plus(aDTFraction74);
        int int76 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction2.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction78.times((-2));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction80);
    }

    @Test
    public void test4329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4329");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction2.equals((java.lang.Object) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (-1));
        boolean boolean14 = aDTFraction12.equals((java.lang.Object) 10);
        java.lang.String str15 = aDTFraction12.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction22.times((int) 'a');
        float float27 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        int int40 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        java.lang.String str49 = aDTFraction43.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction36.plus(aDTFraction43);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction50.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction22.times(aDTFraction53);
        java.lang.String str59 = aDTFraction53.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction16.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction63.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction64.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean70 = aDTFraction66.equals((java.lang.Object) aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction76.plus(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction73.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int86 = aDTFraction85.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction73.times(aDTFraction85);
        int int88 = aDTFraction85.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction69.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction60.plus(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction85.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction85.times(350000);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0/1" + "'", str59, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 100 + "'", int86 == 100);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction93);
    }

    @Test
    public void test4330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4330");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (-1));
        java.lang.String str3 = aDTFraction2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1/-1" + "'", str3, "1/-1");
    }

    @Test
    public void test4331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4331");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        int int33 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction31.times(520);
        java.lang.Class<?> wildcardClass36 = aDTFraction35.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test4332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4332");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int30 = aDTFraction29.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction29);
        int int32 = aDTFraction17.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        boolean boolean42 = aDTFraction38.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (byte) 100);
        java.lang.String str45 = aDTFraction38.toString();
        int int46 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction38.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction17.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction52.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction53.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean59 = aDTFraction55.equals((java.lang.Object) aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction49.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction58.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction14.times(aDTFraction58);
        boolean boolean63 = aDTFraction2.equals((java.lang.Object) aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(1000000, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction2.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction66.reciprocal();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
    }

    @Test
    public void test4333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4333");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction12.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int38 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction22.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        boolean boolean50 = aDTFraction46.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction46.times((int) (byte) 100);
        java.lang.String str53 = aDTFraction46.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction22.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.times(aDTFraction57);
        int int60 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction12.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, 9700);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(10, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction66.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 1);
        int int74 = aDTFraction73.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction69.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction57.times(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
    }

    @Test
    public void test4334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4334");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        int int43 = aDTFraction39.numerator();
        int int44 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int68 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction52.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        boolean boolean80 = aDTFraction76.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction76.times((int) (byte) 100);
        java.lang.String str83 = aDTFraction76.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction52.times(aDTFraction76);
        int int85 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction39.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction22.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = new com.thealgorithms.maths.ADTFraction(52, (int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction87.plus(aDTFraction90);
        int int92 = aDTFraction90.denominator();
        int int93 = aDTFraction90.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0/-1" + "'", str83, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 52 + "'", int93 == 52);
    }

    @Test
    public void test4335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4335");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int18 = aDTFraction17.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction5.times(aDTFraction17);
        int int20 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        boolean boolean30 = aDTFraction26.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction26.times((int) (byte) 100);
        java.lang.String str33 = aDTFraction26.toString();
        int int34 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction26.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction36);
        int int38 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction41.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction5.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.times((int) (short) 100);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction47);
    }

    @Test
    public void test4336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4336");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times(aDTFraction28);
        int int30 = aDTFraction29.numerator();
        float float31 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        int int35 = aDTFraction34.numerator();
        boolean boolean36 = aDTFraction29.equals((java.lang.Object) aDTFraction34);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.0f + "'", float31 == 0.0f);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test4337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4337");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction11.denominator();
        java.lang.String str13 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction11.times((int) '#');
        int int16 = aDTFraction15.numerator();
        int int17 = aDTFraction15.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction23.reciprocal();
        java.lang.String str25 = aDTFraction23.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int50 = aDTFraction49.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction37.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction34.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction52.times(aDTFraction55);
        boolean boolean66 = aDTFraction26.equals((java.lang.Object) aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction52.times((-17));
        boolean boolean69 = aDTFraction15.equals((java.lang.Object) aDTFraction52);
        int int70 = aDTFraction52.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100/100" + "'", str25, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test4338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4338");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(350000, (int) (short) -1);
    }

    @Test
    public void test4339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4339");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        int int45 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        java.lang.String str54 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.plus(aDTFraction48);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction32.plus(aDTFraction55);
        java.lang.String str60 = aDTFraction59.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int64 = aDTFraction63.denominator();
        boolean boolean66 = aDTFraction63.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction63.times(aDTFraction69);
        int int71 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction69.times((int) (byte) 10);
        float float74 = aDTFraction73.value();
        float float75 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(100, (int) '#');
        int int79 = aDTFraction78.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction78.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction73.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction59.plus(aDTFraction81);
        float float83 = aDTFraction59.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/1" + "'", str60, "0/1");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 32 + "'", int71 == 32);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 10.9375f + "'", float74 == 10.9375f);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 10.9375f + "'", float75 == 10.9375f);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 100 + "'", int79 == 100);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + 0.0f + "'", float83 == 0.0f);
    }

    @Test
    public void test4340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4340");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction14.times(aDTFraction18);
        int int26 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction2.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) '#');
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) aDTFraction30);
        float float32 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction35.times((-1));
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction27.times(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 0.028571429f + "'", float32 == 0.028571429f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
    }

    @Test
    public void test4341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4341");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) 'a', (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction7.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction21.times((int) (byte) 100);
        float float28 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction2.plus(aDTFraction21);
        float float31 = aDTFraction21.value();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
    }

    @Test
    public void test4342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4342");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction30.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        boolean boolean60 = aDTFraction54.equals((java.lang.Object) "");
        java.lang.String str61 = aDTFraction54.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction48.times(aDTFraction54);
        float float63 = aDTFraction62.value();
        java.lang.String str64 = aDTFraction62.toString();
        int int65 = aDTFraction62.denominator();
        boolean boolean66 = aDTFraction20.equals((java.lang.Object) int65);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        int int75 = aDTFraction69.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction69.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        int int88 = aDTFraction82.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction78.times(aDTFraction82);
        java.lang.String str90 = aDTFraction82.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction82.times((int) (byte) -1);
        int int93 = aDTFraction92.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction20.plus(aDTFraction92);
        java.lang.String str95 = aDTFraction94.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-100" + "'", str64, "0/-100");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-100) + "'", int65 == (-100));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0/-1" + "'", str90, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "0/-1" + "'", str95, "0/-1");
    }

    @Test
    public void test4343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4343");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 100);
        float float3 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.01f) + "'", float3 == (-0.01f));
    }

    @Test
    public void test4344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4344");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction22.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction22.times((int) (short) 0);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction28);
    }

    @Test
    public void test4345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4345");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        int int4 = aDTFraction3.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int20 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction7.times(aDTFraction19);
        int int22 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        boolean boolean32 = aDTFraction28.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction28.times((int) (byte) 100);
        java.lang.String str35 = aDTFraction28.toString();
        int int36 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction28.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        boolean boolean56 = aDTFraction48.equals((java.lang.Object) aDTFraction54);
        java.lang.String str57 = aDTFraction54.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction39.plus(aDTFraction54);
        boolean boolean59 = aDTFraction3.equals((java.lang.Object) aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction65.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction62.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        boolean boolean76 = aDTFraction68.equals((java.lang.Object) aDTFraction74);
        java.lang.String str77 = aDTFraction74.toString();
        java.lang.String str78 = aDTFraction74.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction74.times(aDTFraction81);
        int int84 = aDTFraction74.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction58.plus(aDTFraction74);
        float float86 = aDTFraction74.value();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0/-1" + "'", str77, "0/-1");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0/-1" + "'", str78, "0/-1");
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
    }

    @Test
    public void test4346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4346");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        int int17 = aDTFraction11.denominator();
        int int18 = aDTFraction11.denominator();
        float float19 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        float float24 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.reciprocal();
        int int26 = aDTFraction25.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        int int39 = aDTFraction29.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean44 = aDTFraction42.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction47.times(aDTFraction53);
        int int57 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction60.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        boolean boolean74 = aDTFraction66.equals((java.lang.Object) aDTFraction72);
        java.lang.String str75 = aDTFraction72.toString();
        java.lang.String str76 = aDTFraction72.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction79);
        boolean boolean82 = aDTFraction47.equals((java.lang.Object) aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction42.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction29.times(aDTFraction83);
        boolean boolean85 = aDTFraction25.equals((java.lang.Object) aDTFraction83);
        boolean boolean86 = aDTFraction11.equals((java.lang.Object) aDTFraction83);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 1.0f + "'", float24 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-1" + "'", str75, "0/-1");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/-1" + "'", str76, "0/-1");
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test4347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4347");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-350), (-17));
    }

    @Test
    public void test4348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4348");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        float float19 = aDTFraction14.value();
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction14.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction50.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        int int61 = aDTFraction55.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction55.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        int int74 = aDTFraction68.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction64.times(aDTFraction68);
        int int76 = aDTFraction75.denominator();
        boolean boolean77 = aDTFraction50.equals((java.lang.Object) aDTFraction75);
        float float78 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction14.times(aDTFraction50);
        int int80 = aDTFraction14.denominator();
        float float81 = aDTFraction14.value();
        java.lang.Class<?> wildcardClass82 = aDTFraction14.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-1.0f) + "'", float78 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test4349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4349");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction18.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction19.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int41 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction40);
        int int43 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction24.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction47.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction40.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction15.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction65.plus(aDTFraction68);
        boolean boolean72 = aDTFraction68.equals((java.lang.Object) ' ');
        boolean boolean74 = aDTFraction68.equals((java.lang.Object) "");
        int int75 = aDTFraction68.denominator();
        java.lang.String str76 = aDTFraction68.toString();
        java.lang.String str77 = aDTFraction68.toString();
        int int78 = aDTFraction68.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction62.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction79.times((int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction15.plus(aDTFraction79);
        float float83 = aDTFraction79.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/-1" + "'", str76, "0/-1");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0/-1" + "'", str77, "0/-1");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
    }

    @Test
    public void test4350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4350");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) ' ', (-17));
    }

    @Test
    public void test4351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4351");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-32), (-3500));
    }

    @Test
    public void test4352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4352");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        java.lang.String str18 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(35, 52);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, 32);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) (byte) 100);
        boolean boolean30 = aDTFraction26.equals((java.lang.Object) (byte) 0);
        java.lang.Object obj31 = null;
        boolean boolean32 = aDTFraction26.equals(obj31);
        boolean boolean33 = aDTFraction23.equals((java.lang.Object) aDTFraction26);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1/1" + "'", str18, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test4353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4353");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-3500), 1000);
    }

    @Test
    public void test4354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4354");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(32000000, 53);
    }

    @Test
    public void test4355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4355");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        java.lang.String str18 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction2.reciprocal();
        boolean boolean21 = aDTFraction19.equals((java.lang.Object) "0/32");
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction19.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction22.reciprocal();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1/1" + "'", str18, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
    }

    @Test
    public void test4356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4356");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        int int34 = aDTFraction33.numerator();
        int int35 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction33.times((int) (short) 10);
        int int38 = aDTFraction33.numerator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test4357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4357");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        int int45 = aDTFraction15.numerator();
        int int46 = aDTFraction15.numerator();
        float float47 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction58.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int71 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction58.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction55.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction76.plus(aDTFraction79);
        boolean boolean83 = aDTFraction79.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction79.times((int) (byte) 100);
        java.lang.String str86 = aDTFraction79.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction55.times(aDTFraction79);
        int int88 = aDTFraction87.denominator();
        int int89 = aDTFraction87.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction15.plus(aDTFraction87);
        int int91 = aDTFraction90.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction90.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test4358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4358");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction18.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction15.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction15.times(aDTFraction36);
        java.lang.String str38 = aDTFraction36.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction41.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int54 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.times(aDTFraction53);
        int int56 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        boolean boolean66 = aDTFraction62.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction62.times((int) (byte) 100);
        java.lang.String str69 = aDTFraction62.toString();
        int int70 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction62.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction41.plus(aDTFraction72);
        int int74 = aDTFraction72.denominator();
        int int75 = aDTFraction72.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        int int84 = aDTFraction78.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction78.plus(aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction72.times(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int93 = aDTFraction92.denominator();
        boolean boolean95 = aDTFraction92.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction88.times(aDTFraction92);
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction36.times(aDTFraction96);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction5.times(aDTFraction36);
        float float99 = aDTFraction98.value();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1/1" + "'", str7, "-1/1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/10" + "'", str38, "0/10");
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 100 + "'", int93 == 100);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertTrue("'" + float99 + "' != '" + 0.0f + "'", float99 == 0.0f);
    }

    @Test
    public void test4359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4359");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        int int38 = aDTFraction34.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction8.times(aDTFraction25);
        java.lang.String str41 = aDTFraction8.toString();
        float float42 = aDTFraction8.value();
        int int43 = aDTFraction8.denominator();
        int int44 = aDTFraction8.denominator();
        float float45 = aDTFraction8.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
    }

    @Test
    public void test4360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4360");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        int int6 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (byte) 10);
        int int11 = aDTFraction10.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        boolean boolean28 = aDTFraction20.equals((java.lang.Object) aDTFraction26);
        java.lang.String str29 = aDTFraction26.toString();
        java.lang.String str30 = aDTFraction26.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction26.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int48 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction35.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction35.reciprocal();
        int int51 = aDTFraction50.numerator();
        float float52 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction32.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int57 = aDTFraction56.denominator();
        float float58 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction56.reciprocal();
        int int60 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction53.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction10.times(aDTFraction53);
        boolean boolean63 = aDTFraction5.equals((java.lang.Object) aDTFraction53);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-1.0f) + "'", float52 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 1.0f + "'", float58 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test4361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4361");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction34.times((int) (byte) 100);
        java.lang.String str41 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction10.times(aDTFraction34);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction2.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction47.times(aDTFraction53);
        int int57 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        java.lang.String str66 = aDTFraction60.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction53.plus(aDTFraction60);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction67.times((int) '4');
        int int71 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction2.times(aDTFraction67);
        java.lang.String str73 = aDTFraction67.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction67.times((int) (short) 0);
        float float76 = aDTFraction75.value();
        java.lang.Class<?> wildcardClass77 = aDTFraction75.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0/1" + "'", str73, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + 0.0f + "'", float76 == 0.0f);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test4362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4362");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction50);
        float float53 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction50.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction57.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction57.times(97);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction61);
    }

    @Test
    public void test4363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4363");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction14.times((int) '#');
        boolean boolean23 = aDTFraction5.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        int int32 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction26.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction35.times(aDTFraction39);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction5.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction48.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean55 = aDTFraction53.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction58.times(aDTFraction64);
        int int68 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction71.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float84 = aDTFraction83.value();
        boolean boolean85 = aDTFraction77.equals((java.lang.Object) aDTFraction83);
        java.lang.String str86 = aDTFraction83.toString();
        java.lang.String str87 = aDTFraction83.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float91 = aDTFraction90.value();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction83.times(aDTFraction90);
        boolean boolean93 = aDTFraction58.equals((java.lang.Object) aDTFraction92);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction53.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction58.times((int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction50.plus(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + (-0.0f) + "'", float84 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0/-1" + "'", str87, "0/-1");
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + (-0.0f) + "'", float91 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction97);
    }

    @Test
    public void test4364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4364");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times((int) (byte) 10);
        java.lang.String str7 = aDTFraction6.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction13.times((int) 'a');
        int int18 = aDTFraction17.denominator();
        java.lang.String str19 = aDTFraction17.toString();
        boolean boolean21 = aDTFraction17.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        float float26 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction24.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction17.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction6.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        int int42 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        java.lang.String str51 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction38.plus(aDTFraction45);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction52.times((int) '4');
        java.lang.Class<?> wildcardClass56 = aDTFraction52.getClass();
        boolean boolean57 = aDTFraction24.equals((java.lang.Object) wildcardClass56);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-10/1" + "'", str7, "-10/1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0/-1" + "'", str19, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 1.0f + "'", float26 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test4365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4365");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (-10));
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times((int) '#');
        java.lang.String str5 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction8.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        boolean boolean22 = aDTFraction14.equals((java.lang.Object) aDTFraction20);
        java.lang.String str23 = aDTFraction20.toString();
        java.lang.String str24 = aDTFraction20.toString();
        float float25 = aDTFraction20.value();
        int int26 = aDTFraction20.denominator();
        int int27 = aDTFraction20.numerator();
        int int28 = aDTFraction20.denominator();
        boolean boolean29 = aDTFraction2.equals((java.lang.Object) int28);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "10/-10" + "'", str5, "10/-10");
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test4366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4366");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(3200);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
    }

    @Test
    public void test4367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4367");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        float float19 = aDTFraction14.value();
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction14.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction50.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        int int61 = aDTFraction55.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction55.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        int int74 = aDTFraction68.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction64.times(aDTFraction68);
        int int76 = aDTFraction75.denominator();
        boolean boolean77 = aDTFraction50.equals((java.lang.Object) aDTFraction75);
        float float78 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction14.times(aDTFraction50);
        int int80 = aDTFraction14.denominator();
        float float81 = aDTFraction14.value();
        int int82 = aDTFraction14.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-1.0f) + "'", float78 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test4368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4368");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (-1));
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction4.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(35, (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        int int18 = aDTFraction12.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction12.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        int int31 = aDTFraction25.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction21.times(aDTFraction25);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction32.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int39 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction32.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int56 = aDTFraction55.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction43.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction43.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction32.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction9.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction4.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        boolean boolean74 = aDTFraction70.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction70.times((int) (byte) 100);
        java.lang.String str77 = aDTFraction70.toString();
        int int78 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction70.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction70.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction63.plus(aDTFraction82);
        float float84 = aDTFraction63.value();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0/-1" + "'", str77, "0/-1");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + (-0.32692307f) + "'", float84 == (-0.32692307f));
    }

    @Test
    public void test4369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4369");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction9.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction13.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction14.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction9.times(aDTFraction16);
        int int18 = aDTFraction9.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction24.plus(aDTFraction38);
        int int40 = aDTFraction24.denominator();
        java.lang.String str41 = aDTFraction24.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction58.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int71 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction58.times(aDTFraction70);
        int int73 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction76.plus(aDTFraction79);
        boolean boolean83 = aDTFraction79.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction79.times((int) (byte) 100);
        java.lang.String str86 = aDTFraction79.toString();
        int int87 = aDTFraction79.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction79.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction58.plus(aDTFraction89);
        int int91 = aDTFraction89.denominator();
        boolean boolean93 = aDTFraction89.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction47.times(aDTFraction89);
        float float95 = aDTFraction94.value();
        int int96 = aDTFraction94.denominator();
        boolean boolean97 = aDTFraction24.equals((java.lang.Object) aDTFraction94);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction9.times(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertTrue("'" + float95 + "' != '" + 0.0f + "'", float95 == 0.0f);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(aDTFraction98);
    }

    @Test
    public void test4370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4370");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction3);
    }

    @Test
    public void test4371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4371");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction11.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int24 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction11.times(aDTFraction23);
        int int26 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        java.lang.String str39 = aDTFraction32.toString();
        int int40 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction32.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction11.plus(aDTFraction42);
        int int44 = aDTFraction42.denominator();
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        int int54 = aDTFraction48.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction48.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction42.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int63 = aDTFraction62.denominator();
        boolean boolean65 = aDTFraction62.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction58.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction8.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction67.times((int) (byte) 100);
        java.lang.String str70 = aDTFraction67.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction67.times(1000000);
        java.lang.String str75 = aDTFraction74.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-10000" + "'", str70, "0/-10000");
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-10000" + "'", str75, "0/-10000");
    }

    @Test
    public void test4372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4372");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times((-52));
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction4.times((int) (short) 0);
        int int7 = aDTFraction4.numerator();
        java.lang.String str8 = aDTFraction4.toString();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/10" + "'", str8, "0/10");
    }

    @Test
    public void test4373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4373");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction14.times((int) '#');
        boolean boolean23 = aDTFraction5.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        int int32 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction26.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction35.times(aDTFraction39);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction5.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 1);
        int int52 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction5.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        int int62 = aDTFraction56.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction56.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        boolean boolean74 = aDTFraction70.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction70.times((int) (byte) 100);
        float float77 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction56.plus(aDTFraction70);
        int int79 = aDTFraction70.numerator();
        java.lang.String str80 = aDTFraction70.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction70.plus(aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction53.plus(aDTFraction84);
        java.lang.String str86 = aDTFraction85.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "0/-1" + "'", str80, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
    }

    @Test
    public void test4374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4374");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(0);
        int int71 = aDTFraction56.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction56.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction56.times(0);
        int int76 = aDTFraction75.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test4375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4375");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-100), (-52));
        com.thealgorithms.maths.ADTFraction aDTFraction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(aDTFraction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4376");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        boolean boolean25 = aDTFraction19.equals((java.lang.Object) "");
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction5.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction28.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        boolean boolean43 = aDTFraction37.equals((java.lang.Object) "");
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        int int52 = aDTFraction46.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction46.times((int) '#');
        boolean boolean55 = aDTFraction37.equals((java.lang.Object) aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        int int64 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction58.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        int int77 = aDTFraction71.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction67.times(aDTFraction71);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction37.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction28.times(aDTFraction37);
        int int82 = aDTFraction37.denominator();
        float float83 = aDTFraction37.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 0.0f + "'", float79 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
    }

    @Test
    public void test4377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4377");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times((int) (byte) 10);
        float float7 = aDTFraction6.value();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + (-10.0f) + "'", float7 == (-10.0f));
    }

    @Test
    public void test4378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4378");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10), 1000);
    }

    @Test
    public void test4379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4379");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(20000, (-2));
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction3);
    }

    @Test
    public void test4380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4380");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, 10000);
        java.lang.String str3 = aDTFraction2.toString();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction7.plus(aDTFraction10);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction16.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction16.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction2.reciprocal();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1/10000" + "'", str3, "1/10000");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1/10000" + "'", str4, "1/10000");
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
    }

    @Test
    public void test4381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4381");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction8.times(aDTFraction14);
        int int18 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction5.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        java.lang.Class<?> wildcardClass28 = aDTFraction25.getClass();
        boolean boolean29 = aDTFraction5.equals((java.lang.Object) aDTFraction25);
        java.lang.String str30 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.times(32);
        float float33 = aDTFraction5.value();
        boolean boolean34 = aDTFraction2.equals((java.lang.Object) aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction2.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction2.reciprocal();
        int int38 = aDTFraction37.numerator();
        float float39 = aDTFraction37.value();
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.028571429f) + "'", float39 == (-0.028571429f));
    }

    @Test
    public void test4382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4382");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction20.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction21.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction26.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction49.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction17.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction61.times(0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction63.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction63);
    }

    @Test
    public void test4383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4383");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        float float10 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction21.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int34 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction18.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction18.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction8.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction18.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction5.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction2.times(aDTFraction18);
        java.lang.String str44 = aDTFraction18.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/1" + "'", str44, "0/1");
    }

    @Test
    public void test4384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4384");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        int int4 = aDTFraction3.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int20 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction7.times(aDTFraction19);
        int int22 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        boolean boolean32 = aDTFraction28.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction28.times((int) (byte) 100);
        java.lang.String str35 = aDTFraction28.toString();
        int int36 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction28.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        boolean boolean56 = aDTFraction48.equals((java.lang.Object) aDTFraction54);
        java.lang.String str57 = aDTFraction54.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction39.plus(aDTFraction54);
        boolean boolean59 = aDTFraction3.equals((java.lang.Object) aDTFraction58);
        float float60 = aDTFraction58.value();
        int int61 = aDTFraction58.denominator();
        int int62 = aDTFraction58.denominator();
        java.lang.Class<?> wildcardClass63 = aDTFraction58.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-1.0f) + "'", float60 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test4385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4385");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction56.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction49.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int85 = aDTFraction84.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction72.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction69.times(aDTFraction86);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction69.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction61.times(aDTFraction89);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction61.times((-100));
        int int93 = aDTFraction61.denominator();
        int int94 = aDTFraction61.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-52) + "'", int93 == (-52));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-52) + "'", int94 == (-52));
    }

    @Test
    public void test4386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4386");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(198336, 200);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction3);
    }

    @Test
    public void test4387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4387");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(32, (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction8.times(aDTFraction14);
        int int18 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction5.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction19.times(0);
        int int22 = aDTFraction21.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction2.times(aDTFraction21);
        int int24 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
    }

    @Test
    public void test4388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4388");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        int int19 = aDTFraction13.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction13.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        float float34 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction13.plus(aDTFraction27);
        boolean boolean36 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int52 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction39.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction39.reciprocal();
        java.lang.String str55 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction39.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        int int69 = aDTFraction65.numerator();
        int int70 = aDTFraction65.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        boolean boolean80 = aDTFraction76.equals((java.lang.Object) ' ');
        boolean boolean82 = aDTFraction76.equals((java.lang.Object) "");
        float float83 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction65.times(aDTFraction76);
        int int85 = aDTFraction84.numerator();
        int int86 = aDTFraction84.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction39.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction90.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction91.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction91.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction84.plus(aDTFraction95);
        float float97 = aDTFraction96.value();
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction27.plus(aDTFraction96);
        java.lang.Class<?> wildcardClass99 = aDTFraction96.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1/1" + "'", str55, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + float97 + "' != '" + 3.2f + "'", float97 == 3.2f);
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test4389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4389");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(32, 35);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        int int12 = aDTFraction6.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction6.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.times(aDTFraction6);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction6.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "32/35" + "'", str3, "32/35");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
    }

    @Test
    public void test4390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4390");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        int int19 = aDTFraction18.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction18.times((int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction21.times(52);
        float float24 = aDTFraction23.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
    }

    @Test
    public void test4391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4391");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1000, 166400);
    }

    @Test
    public void test4392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4392");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction34.times((int) (byte) 100);
        java.lang.String str41 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction10.times(aDTFraction34);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction2.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction47.times(aDTFraction53);
        int int57 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        java.lang.String str66 = aDTFraction60.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction53.plus(aDTFraction60);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction67.times((int) '4');
        int int71 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction2.times(aDTFraction67);
        java.lang.String str73 = aDTFraction67.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction67.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction67.times(10000);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction67.times((int) (short) 0);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0/1" + "'", str73, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction79);
    }

    @Test
    public void test4393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4393");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-52), (-100));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) (short) -1);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        int int41 = aDTFraction37.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        java.lang.Class<?> wildcardClass51 = aDTFraction48.getClass();
        boolean boolean52 = aDTFraction28.equals((java.lang.Object) aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        boolean boolean62 = aDTFraction58.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction58.times((int) (byte) 100);
        java.lang.String str65 = aDTFraction58.toString();
        int int66 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction48.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction16.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction79.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int92 = aDTFraction91.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction79.times(aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction76.times(aDTFraction93);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction68.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction13.times(aDTFraction95);
        int int97 = aDTFraction95.denominator();
        java.lang.String str98 = aDTFraction95.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction99 = aDTFraction2.times(aDTFraction95);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0/-1" + "'", str65, "0/-1");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "0/1" + "'", str98, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction99);
    }

    @Test
    public void test4394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4394");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) '4');
        java.lang.String str3 = aDTFraction2.toString();
        java.lang.String str4 = aDTFraction2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100/52" + "'", str3, "100/52");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100/52" + "'", str4, "100/52");
    }

    @Test
    public void test4395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4395");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction20.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction21.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction26.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction49.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction17.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        boolean boolean71 = aDTFraction67.equals((java.lang.Object) ' ');
        boolean boolean73 = aDTFraction67.equals((java.lang.Object) "");
        java.lang.String str74 = aDTFraction67.toString();
        int int75 = aDTFraction67.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction61.times(aDTFraction67);
        int int77 = aDTFraction61.denominator();
        int int78 = aDTFraction61.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-1" + "'", str74, "0/-1");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test4396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4396");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction7.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        int int26 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction16.times(aDTFraction20);
        int int28 = aDTFraction27.denominator();
        boolean boolean29 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        int int30 = aDTFraction2.denominator();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test4397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4397");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(35, 10);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(100);
        int int5 = aDTFraction4.numerator();
        float float6 = aDTFraction4.value();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3500 + "'", int5 == 3500);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 350.0f + "'", float6 == 350.0f);
    }

    @Test
    public void test4398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4398");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1024, (int) '#');
    }

    @Test
    public void test4399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4399");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        int int39 = aDTFraction35.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction26.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        java.lang.Class<?> wildcardClass49 = aDTFraction46.getClass();
        boolean boolean50 = aDTFraction26.equals((java.lang.Object) aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction56.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction46.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction22.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction68.plus(aDTFraction71);
        int int73 = aDTFraction68.denominator();
        java.lang.String str74 = aDTFraction68.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/52" + "'", str74, "0/52");
    }

    @Test
    public void test4400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4400");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        int int26 = aDTFraction22.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction22.times((int) (byte) 0);
        int int30 = aDTFraction29.denominator();
        float float31 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int55 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction42.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction39.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction60.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction57.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction29.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction10.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((-52), (-52));
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction75.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction10.plus(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100/100" + "'", str7, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
    }

    @Test
    public void test4401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4401");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(350000, (-2));
    }

    @Test
    public void test4402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4402");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, 166400);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        java.lang.String str24 = aDTFraction18.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction11.plus(aDTFraction18);
        int int26 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction2.times(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction27);
    }

    @Test
    public void test4403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4403");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        int int18 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.times((-10));
        float float21 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction24.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        java.lang.String str53 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction56);
        boolean boolean59 = aDTFraction24.equals((java.lang.Object) aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction2.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction60.reciprocal();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-1.0f) + "'", float21 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
    }

    @Test
    public void test4404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4404");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        int int18 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.times((-10));
        float float21 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction24.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        java.lang.String str53 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction56);
        boolean boolean59 = aDTFraction24.equals((java.lang.Object) aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction2.plus(aDTFraction58);
        float float61 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-1.0f) + "'", float21 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-1.0f) + "'", float61 == (-1.0f));
    }

    @Test
    public void test4405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4405");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction14.times(aDTFraction18);
        int int26 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction2.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) '#');
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        boolean boolean48 = aDTFraction40.equals((java.lang.Object) aDTFraction46);
        java.lang.String str49 = aDTFraction46.toString();
        java.lang.String str50 = aDTFraction46.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction46.times((int) (short) 100);
        int int53 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        boolean boolean63 = aDTFraction59.equals((java.lang.Object) ' ');
        boolean boolean65 = aDTFraction59.equals((java.lang.Object) "");
        int int66 = aDTFraction59.denominator();
        java.lang.String str67 = aDTFraction59.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction59.plus(aDTFraction70);
        int int72 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction70.times((int) (byte) 10);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction74.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction46.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction30.times(aDTFraction78);
        int int80 = aDTFraction30.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 0.0f + "'", float75 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test4406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4406");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        java.lang.String str27 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction2.times(32);
        float float30 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(32, 35);
        java.lang.String str34 = aDTFraction33.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction2.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.times(5200);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "32/35" + "'", str34, "32/35");
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction39);
    }

    @Test
    public void test4407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4407");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction30.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        boolean boolean60 = aDTFraction54.equals((java.lang.Object) "");
        java.lang.String str61 = aDTFraction54.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction48.times(aDTFraction54);
        float float63 = aDTFraction62.value();
        java.lang.String str64 = aDTFraction62.toString();
        int int65 = aDTFraction62.denominator();
        boolean boolean66 = aDTFraction20.equals((java.lang.Object) int65);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        int int75 = aDTFraction69.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction69.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        int int88 = aDTFraction82.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction78.times(aDTFraction82);
        java.lang.String str90 = aDTFraction82.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction82.times((int) (byte) -1);
        int int93 = aDTFraction92.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction20.plus(aDTFraction92);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction20.times(100);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-100" + "'", str64, "0/-100");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-100) + "'", int65 == (-100));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0/-1" + "'", str90, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction96);
    }

    @Test
    public void test4408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4408");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (-1));
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(10, 52);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction4.times(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction8.reciprocal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction9);
    }

    @Test
    public void test4409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4409");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        boolean boolean29 = aDTFraction21.equals((java.lang.Object) aDTFraction27);
        java.lang.String str30 = aDTFraction27.toString();
        java.lang.String str31 = aDTFraction27.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction34);
        boolean boolean37 = aDTFraction2.equals((java.lang.Object) aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction38.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        float float52 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction55.reciprocal();
        int int57 = aDTFraction55.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction45.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction38.plus(aDTFraction55);
        int int60 = aDTFraction59.numerator();
        int int61 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction59.times(166400);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction66.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int79 = aDTFraction78.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction66.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction66.reciprocal();
        int int82 = aDTFraction66.numerator();
        int int83 = aDTFraction66.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction59.plus(aDTFraction66);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 22 + "'", int60 == 22);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 22 + "'", int61 == 22);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 100 + "'", int79 == 100);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(aDTFraction84);
    }

    @Test
    public void test4410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4410");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        boolean boolean68 = aDTFraction60.equals((java.lang.Object) aDTFraction66);
        java.lang.String str69 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction51.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction8.times(aDTFraction51);
        int int73 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str78 = aDTFraction77.toString();
        int int79 = aDTFraction77.denominator();
        float float80 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction74.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction84.reciprocal();
        boolean boolean86 = aDTFraction81.equals((java.lang.Object) aDTFraction84);
        java.lang.Class<?> wildcardClass87 = aDTFraction81.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-1/1" + "'", str78, "-1/1");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-1.0f) + "'", float80 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test4411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4411");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction34.times((int) (byte) 100);
        java.lang.String str41 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction10.times(aDTFraction34);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction2.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction47.times(aDTFraction53);
        int int57 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        java.lang.String str66 = aDTFraction60.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction53.plus(aDTFraction60);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction67.times((int) '4');
        int int71 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction2.times(aDTFraction67);
        java.lang.Class<?> wildcardClass73 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test4412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4412");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        int int19 = aDTFraction13.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction13.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        int int32 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction22.times(aDTFraction26);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction33.times((int) (short) 0);
        float float37 = aDTFraction36.value();
        int int38 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction5.times(aDTFraction36);
        java.lang.Class<?> wildcardClass40 = aDTFraction39.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test4413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4413");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        boolean boolean21 = aDTFraction13.equals((java.lang.Object) aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction24.equals((java.lang.Object) 10);
        boolean boolean32 = aDTFraction19.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction38.times(aDTFraction44);
        int int48 = aDTFraction44.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction35.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        java.lang.Class<?> wildcardClass58 = aDTFraction55.getClass();
        boolean boolean59 = aDTFraction35.equals((java.lang.Object) aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        boolean boolean69 = aDTFraction65.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction65.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction55.times(aDTFraction71);
        boolean boolean73 = aDTFraction24.equals((java.lang.Object) aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction2.plus(aDTFraction24);
        float float75 = aDTFraction2.value();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/10" + "'", str3, "-1/10");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.1f) + "'", float75 == (-0.1f));
    }

    @Test
    public void test4414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4414");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction35.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction35.times((-10000));
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((-52), 5200);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) aDTFraction44);
        float float46 = aDTFraction41.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 0.0f + "'", float46 == 0.0f);
    }

    @Test
    public void test4415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4415");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(97, 1);
        float float3 = aDTFraction2.value();
        int int4 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 97.0f + "'", float3 == 97.0f);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
    }

    @Test
    public void test4416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4416");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        int int19 = aDTFraction18.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction18.times((int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        java.lang.String str34 = aDTFraction27.toString();
        int int35 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction27.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        boolean boolean54 = aDTFraction46.equals((java.lang.Object) aDTFraction52);
        java.lang.String str55 = aDTFraction52.toString();
        java.lang.String str56 = aDTFraction52.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction52.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction52.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction27.times(aDTFraction60);
        boolean boolean62 = aDTFraction18.equals((java.lang.Object) aDTFraction61);
        java.lang.String str63 = aDTFraction61.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0/-1" + "'", str56, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/1" + "'", str63, "0/1");
    }

    @Test
    public void test4417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4417");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10000), 520);
        java.lang.String str3 = aDTFraction2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-10000/520" + "'", str3, "-10000/520");
    }

    @Test
    public void test4418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4418");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        int int26 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        java.lang.String str35 = aDTFraction29.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (byte) 100);
        java.lang.String str48 = aDTFraction41.toString();
        int int49 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction41.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction29.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction24.times(aDTFraction52);
        int int54 = aDTFraction52.numerator();
        int int55 = aDTFraction52.numerator();
        float float56 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        boolean boolean66 = aDTFraction62.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction62.times((int) (byte) 100);
        java.lang.String str69 = aDTFraction62.toString();
        int int70 = aDTFraction62.denominator();
        int int71 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        boolean boolean81 = aDTFraction77.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction77.times((int) (byte) 100);
        java.lang.String str84 = aDTFraction77.toString();
        int int85 = aDTFraction77.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction77.times((int) ' ');
        int int88 = aDTFraction87.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction62.plus(aDTFraction87);
        int int90 = aDTFraction62.denominator();
        java.lang.String str91 = aDTFraction62.toString();
        int int92 = aDTFraction62.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction52.times(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/-1" + "'", str84, "0/-1");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0/-1" + "'", str91, "0/-1");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(aDTFraction93);
    }

    @Test
    public void test4419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4419");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        int int19 = aDTFraction13.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction13.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        float float34 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction13.plus(aDTFraction27);
        boolean boolean36 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int52 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction39.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction39.reciprocal();
        java.lang.String str55 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction39.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        int int69 = aDTFraction65.numerator();
        int int70 = aDTFraction65.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        boolean boolean80 = aDTFraction76.equals((java.lang.Object) ' ');
        boolean boolean82 = aDTFraction76.equals((java.lang.Object) "");
        float float83 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction65.times(aDTFraction76);
        int int85 = aDTFraction84.numerator();
        int int86 = aDTFraction84.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction39.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction90.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction91.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction91.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction84.plus(aDTFraction95);
        float float97 = aDTFraction96.value();
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction27.plus(aDTFraction96);
        java.lang.String str99 = aDTFraction98.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1/1" + "'", str55, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + float97 + "' != '" + 3.2f + "'", float97 == 3.2f);
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "-32/-10" + "'", str99, "-32/-10");
    }

    @Test
    public void test4420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4420");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(32, 35);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction3);
    }

    @Test
    public void test4421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4421");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = aDTFraction22.equals(obj23);
        float float25 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.times(10000);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        java.lang.String str36 = aDTFraction30.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        boolean boolean46 = aDTFraction42.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction42.times((int) (byte) 100);
        java.lang.String str49 = aDTFraction42.toString();
        int int50 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction42.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction30.plus(aDTFraction42);
        java.lang.String str54 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction57.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int70 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction57.times(aDTFraction69);
        int int72 = aDTFraction57.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        boolean boolean82 = aDTFraction78.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction78.times((int) (byte) 100);
        java.lang.String str85 = aDTFraction78.toString();
        int int86 = aDTFraction78.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction78.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction57.plus(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction42.plus(aDTFraction88);
        boolean boolean91 = aDTFraction22.equals((java.lang.Object) aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction22.times((-13500));
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0/-1" + "'", str85, "0/-1");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(aDTFraction93);
    }

    @Test
    public void test4422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4422");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(166400, 198336);
    }

    @Test
    public void test4423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4423");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        int int21 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction24.times(aDTFraction36);
        int int39 = aDTFraction24.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction45.times((int) (byte) 100);
        java.lang.String str52 = aDTFraction45.toString();
        int int53 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction45.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction24.plus(aDTFraction55);
        int int57 = aDTFraction55.denominator();
        int int58 = aDTFraction55.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        int int67 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction61.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction55.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction14.times(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
    }

    @Test
    public void test4424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4424");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (-32));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction5.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        int int22 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction16.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        boolean boolean34 = aDTFraction30.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction30.times((int) (byte) 100);
        float float37 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction16.plus(aDTFraction30);
        boolean boolean39 = aDTFraction5.equals((java.lang.Object) aDTFraction30);
        float float40 = aDTFraction5.value();
        int int41 = aDTFraction5.denominator();
        java.lang.String str42 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction2.times(aDTFraction5);
        int int44 = aDTFraction2.numerator();
        java.lang.Class<?> wildcardClass45 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test4425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4425");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-35), 3500);
    }

    @Test
    public void test4426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4426");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction8);
        int int10 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction8.times((int) (byte) 10);
        float float13 = aDTFraction12.value();
        float float14 = aDTFraction12.value();
        java.lang.String str15 = aDTFraction12.toString();
        java.lang.Class<?> wildcardClass16 = aDTFraction12.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 10.9375f + "'", float13 == 10.9375f);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 10.9375f + "'", float14 == 10.9375f);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "350/32" + "'", str15, "350/32");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test4427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4427");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        java.lang.Object obj3 = null;
        boolean boolean4 = aDTFraction2.equals(obj3);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test4428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4428");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction2.plus(aDTFraction7);
        int int15 = aDTFraction14.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-100) + "'", int15 == (-100));
    }

    @Test
    public void test4429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4429");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        boolean boolean29 = aDTFraction21.equals((java.lang.Object) aDTFraction27);
        java.lang.String str30 = aDTFraction27.toString();
        java.lang.String str31 = aDTFraction27.toString();
        float float32 = aDTFraction27.value();
        boolean boolean33 = aDTFraction5.equals((java.lang.Object) float32);
        int int34 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        int int43 = aDTFraction37.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        int int56 = aDTFraction50.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction46.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str61 = aDTFraction60.toString();
        boolean boolean62 = aDTFraction46.equals((java.lang.Object) aDTFraction60);
        int int63 = aDTFraction60.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction5.plus(aDTFraction60);
        float float65 = aDTFraction60.value();
        java.lang.Class<?> wildcardClass66 = aDTFraction60.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1/10" + "'", str61, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.1f) + "'", float65 == (-0.1f));
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test4430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4430");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction18.times((int) '#');
        int int21 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        float float26 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int50 = aDTFraction49.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction37.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction34.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction34.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction24.times(aDTFraction34);
        java.lang.String str56 = aDTFraction55.toString();
        boolean boolean57 = aDTFraction20.equals((java.lang.Object) aDTFraction55);
        float float58 = aDTFraction55.value();
        float float59 = aDTFraction55.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0/-1" + "'", str56, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
    }

    @Test
    public void test4431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4431");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        int int4 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        boolean boolean14 = aDTFraction10.equals((java.lang.Object) ' ');
        boolean boolean16 = aDTFraction10.equals((java.lang.Object) "");
        int int17 = aDTFraction10.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        boolean boolean34 = aDTFraction26.equals((java.lang.Object) aDTFraction32);
        java.lang.String str35 = aDTFraction32.toString();
        java.lang.String str36 = aDTFraction32.toString();
        float float37 = aDTFraction32.value();
        boolean boolean38 = aDTFraction10.equals((java.lang.Object) float37);
        int int39 = aDTFraction10.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction10.times((-100));
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction2.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction43.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
    }

    @Test
    public void test4432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4432");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-100), (-52));
        boolean boolean21 = aDTFraction17.equals((java.lang.Object) (-52));
        java.lang.Class<?> wildcardClass22 = aDTFraction17.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test4433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4433");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction33.times(aDTFraction49);
        java.lang.String str51 = aDTFraction33.toString();
        int int52 = aDTFraction33.denominator();
        java.lang.String str53 = aDTFraction33.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
    }

    @Test
    public void test4434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4434");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction20.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction21.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction26.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction49.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction17.times(aDTFraction60);
        java.lang.Class<?> wildcardClass62 = aDTFraction61.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test4435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4435");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(52, (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        int int20 = aDTFraction15.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        boolean boolean56 = aDTFraction52.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction52.times((int) (byte) 100);
        java.lang.String str59 = aDTFraction52.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction28.times(aDTFraction52);
        int int61 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction15.plus(aDTFraction28);
        int int63 = aDTFraction62.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int67 = aDTFraction66.denominator();
        boolean boolean69 = aDTFraction66.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction66.reciprocal();
        int int71 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction66.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction62.times(aDTFraction73);
        boolean boolean75 = aDTFraction6.equals((java.lang.Object) aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction81.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction82.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean88 = aDTFraction84.equals((java.lang.Object) aDTFraction87);
        int int89 = aDTFraction87.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction78.times(aDTFraction87);
        int int91 = aDTFraction78.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction78.times((-1));
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction74.times(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0/-1" + "'", str59, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
    }

    @Test
    public void test4436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4436");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction90.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction90.reciprocal();
        java.lang.String str93 = aDTFraction92.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "3200/1000" + "'", str93, "3200/1000");
    }

    @Test
    public void test4437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4437");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean17 = aDTFraction15.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        boolean boolean47 = aDTFraction39.equals((java.lang.Object) aDTFraction45);
        java.lang.String str48 = aDTFraction45.toString();
        java.lang.String str49 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction52);
        boolean boolean55 = aDTFraction20.equals((java.lang.Object) aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction15.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction2.times(aDTFraction56);
        int int58 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction57.times((-10));
        java.lang.String str61 = aDTFraction57.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction57.times(32000000);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction57.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction63);
    }

    @Test
    public void test4438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4438");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(3200, (-52));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, 10);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction11.times(aDTFraction17);
        int int21 = aDTFraction17.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction17.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction24.times((int) '#');
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        float float32 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int56 = aDTFraction55.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction43.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction40.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction40.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction30.times(aDTFraction40);
        java.lang.String str62 = aDTFraction61.toString();
        boolean boolean63 = aDTFraction26.equals((java.lang.Object) aDTFraction61);
        float float64 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction5.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction2.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction2.times((-10000));
        int int69 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0/-1" + "'", str62, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-52) + "'", int69 == (-52));
    }

    @Test
    public void test4439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4439");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        int int25 = aDTFraction2.numerator();
        float float26 = aDTFraction2.value();
        float float27 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction30.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction30.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        java.lang.String str43 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction30.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction41.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int54 = aDTFraction53.denominator();
        boolean boolean56 = aDTFraction53.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction53.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        boolean boolean71 = aDTFraction67.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction67.times((int) (byte) 100);
        float float74 = aDTFraction67.value();
        boolean boolean75 = aDTFraction61.equals((java.lang.Object) aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        boolean boolean85 = aDTFraction81.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction81.times((int) (byte) 100);
        java.lang.String str88 = aDTFraction81.toString();
        int int89 = aDTFraction81.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction81.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction67.times(aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction50.times(aDTFraction92);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction2.plus(aDTFraction92);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction2.times((-3190));
        int int97 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "0/-1" + "'", str88, "0/-1");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test4440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4440");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1000, 52);
        int int3 = aDTFraction2.numerator();
        float float4 = aDTFraction2.value();
        int int5 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 19.23077f + "'", float4 == 19.23077f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
    }

    @Test
    public void test4441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4441");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        int int33 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction31.times((int) (byte) 1);
        int int36 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        boolean boolean53 = aDTFraction45.equals((java.lang.Object) aDTFraction51);
        java.lang.String str54 = aDTFraction51.toString();
        java.lang.String str55 = aDTFraction51.toString();
        float float56 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction31.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction31.times(97000);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
    }

    @Test
    public void test4442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4442");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        int int11 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        int int24 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        java.lang.String str33 = aDTFraction27.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.plus(aDTFraction27);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        int int44 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction38.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        boolean boolean56 = aDTFraction52.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction52.times((int) (byte) 100);
        float float59 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction38.plus(aDTFraction52);
        int int61 = aDTFraction38.numerator();
        java.lang.String str62 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction34.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction2.plus(aDTFraction63);
        int int65 = aDTFraction2.denominator();
        int int66 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0/-1" + "'", str62, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test4443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4443");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        int int19 = aDTFraction13.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction13.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        float float34 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction13.plus(aDTFraction27);
        boolean boolean36 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        int int37 = aDTFraction27.denominator();
        int int38 = aDTFraction27.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test4444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4444");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (-17));
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction5.times(0);
        int int8 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction12.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        boolean boolean47 = aDTFraction39.equals((java.lang.Object) aDTFraction45);
        java.lang.String str48 = aDTFraction45.toString();
        java.lang.String str49 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction57.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        boolean boolean71 = aDTFraction63.equals((java.lang.Object) aDTFraction69);
        java.lang.String str72 = aDTFraction69.toString();
        java.lang.String str73 = aDTFraction69.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction69.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction45.plus(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction30.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction27.plus(aDTFraction45);
        int int79 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction2.plus(aDTFraction27);
        java.lang.Class<?> wildcardClass81 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0/-1" + "'", str72, "0/-1");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0/-1" + "'", str73, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test4445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4445");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        java.lang.String str40 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction46.times((int) 'a');
        int int51 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction50.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction39.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(1, (-1));
        int int58 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction61.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        boolean boolean75 = aDTFraction67.equals((java.lang.Object) aDTFraction73);
        java.lang.String str76 = aDTFraction73.toString();
        java.lang.String str77 = aDTFraction73.toString();
        float float78 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction57.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction54.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(2, 1000000);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction80.times(aDTFraction83);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0/-1" + "'", str40, "0/-1");
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/-1" + "'", str76, "0/-1");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0/-1" + "'", str77, "0/-1");
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction84);
    }

    @Test
    public void test4446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4446");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction25.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction41.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int54 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction62.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction41.times(aDTFraction77);
        boolean boolean79 = aDTFraction25.equals((java.lang.Object) aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction41.times((-13500));
        java.lang.Class<?> wildcardClass82 = aDTFraction81.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test4447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4447");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction13.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        java.lang.String str44 = aDTFraction37.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction13.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.times(aDTFraction48);
        int int51 = aDTFraction48.denominator();
        int int52 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction48.times((int) (byte) 10);
        int int55 = aDTFraction54.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction2.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-100), (int) (short) 1);
        java.lang.String str60 = aDTFraction59.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction63.reciprocal();
        int int65 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction63.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction59.plus(aDTFraction63);
        int int68 = aDTFraction63.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction2.plus(aDTFraction63);
        java.lang.Class<?> wildcardClass70 = aDTFraction63.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-100/1" + "'", str60, "-100/1");
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 32 + "'", int68 == 32);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test4448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4448");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) 'a', (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        java.lang.String str6 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str10 = aDTFraction9.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        boolean boolean27 = aDTFraction19.equals((java.lang.Object) aDTFraction25);
        java.lang.String str28 = aDTFraction25.toString();
        java.lang.String str29 = aDTFraction25.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction34.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction34.reciprocal();
        int int50 = aDTFraction49.numerator();
        float float51 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction31.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        boolean boolean69 = aDTFraction61.equals((java.lang.Object) aDTFraction67);
        java.lang.String str70 = aDTFraction67.toString();
        java.lang.String str71 = aDTFraction67.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction74);
        int int77 = aDTFraction67.denominator();
        float float78 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction49.times(aDTFraction67);
        int int80 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction9.plus(aDTFraction67);
        float float82 = aDTFraction81.value();
        int int83 = aDTFraction81.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction81.times(52);
        boolean boolean86 = aDTFraction2.equals((java.lang.Object) aDTFraction85);
        java.lang.Class<?> wildcardClass87 = aDTFraction85.getClass();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "97/-1" + "'", str6, "97/-1");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1/1" + "'", str10, "-1/1");
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-1.0f) + "'", float51 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-1.0f) + "'", float82 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test4449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4449");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction53.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction55.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction55.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction55.times((-35));
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
    }

    @Test
    public void test4450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4450");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        int int26 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        java.lang.String str35 = aDTFraction29.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (byte) 100);
        java.lang.String str48 = aDTFraction41.toString();
        int int49 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction41.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction29.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction24.times(aDTFraction52);
        int int54 = aDTFraction52.numerator();
        int int55 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(166400, 3500);
        int int59 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction52.plus(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 166400 + "'", int59 == 166400);
        org.junit.Assert.assertNotNull(aDTFraction60);
    }

    @Test
    public void test4451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4451");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) 'a', (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction7.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction21.times((int) (byte) 100);
        float float28 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction2.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-100), (int) (short) 1);
        java.lang.String str34 = aDTFraction33.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.times(aDTFraction33);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction35.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-100/1" + "'", str34, "-100/1");
        org.junit.Assert.assertNotNull(aDTFraction35);
    }

    @Test
    public void test4452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4452");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(90, 970000);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(35, 10);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction5.times(100);
        int int8 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction7.reciprocal();
        boolean boolean10 = aDTFraction2.equals((java.lang.Object) aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3500 + "'", int8 == 3500);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4453");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction12.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
    }

    @Test
    public void test4454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4454");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 520);
    }

    @Test
    public void test4455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4455");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, 9700);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(10, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction5.times((int) (byte) 100);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
    }

    @Test
    public void test4456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4456");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        java.lang.String str28 = aDTFraction11.toString();
        int int29 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        int int38 = aDTFraction32.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction32.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        int int49 = aDTFraction43.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction43.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        boolean boolean61 = aDTFraction57.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction57.times((int) (byte) 100);
        float float64 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction43.plus(aDTFraction57);
        boolean boolean66 = aDTFraction32.equals((java.lang.Object) aDTFraction57);
        java.lang.String str67 = aDTFraction32.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((-100), (int) (byte) 100);
        boolean boolean71 = aDTFraction32.equals((java.lang.Object) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction11.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(1, 10000);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction32.plus(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str80 = aDTFraction79.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction76.times(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "-1/1" + "'", str80, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction81);
    }

    @Test
    public void test4457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4457");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction16.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.times((int) (byte) 10);
        int int21 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction24.times((-52));
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction26.times((int) (short) 0);
        boolean boolean29 = aDTFraction20.equals((java.lang.Object) aDTFraction26);
        java.lang.String str30 = aDTFraction20.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/10" + "'", str30, "0/10");
    }

    @Test
    public void test4458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4458");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        int int28 = aDTFraction7.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test4459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4459");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        int int43 = aDTFraction39.numerator();
        int int44 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int68 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction52.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        boolean boolean80 = aDTFraction76.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction76.times((int) (byte) 100);
        java.lang.String str83 = aDTFraction76.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction52.times(aDTFraction76);
        int int85 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction39.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction22.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction90.reciprocal();
        boolean boolean92 = aDTFraction52.equals((java.lang.Object) aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction52.times((int) 'a');
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0/-1" + "'", str83, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(aDTFraction94);
    }

    @Test
    public void test4460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4460");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        float float35 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int59 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction46.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction43.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction43.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction33.times(aDTFraction43);
        int int65 = aDTFraction64.numerator();
        int int66 = aDTFraction64.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction64.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction28.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        int int73 = aDTFraction72.numerator();
        int int74 = aDTFraction72.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction28.plus(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction75.times(970000);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction75.reciprocal();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
    }

    @Test
    public void test4461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4461");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        java.lang.String str4 = aDTFraction3.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction3.times((int) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        boolean boolean23 = aDTFraction15.equals((java.lang.Object) aDTFraction21);
        java.lang.String str24 = aDTFraction21.toString();
        java.lang.String str25 = aDTFraction21.toString();
        float float26 = aDTFraction21.value();
        int int27 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction38.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int51 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction38.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction35.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction21.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction57.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        int int68 = aDTFraction62.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction62.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        int int81 = aDTFraction75.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction71.times(aDTFraction75);
        int int83 = aDTFraction82.denominator();
        boolean boolean84 = aDTFraction57.equals((java.lang.Object) aDTFraction82);
        float float85 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction21.times(aDTFraction57);
        boolean boolean87 = aDTFraction3.equals((java.lang.Object) aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1/100" + "'", str4, "-1/100");
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0/-1" + "'", str25, "0/-1");
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-1.0f) + "'", float85 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test4462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4462");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1664, 1000);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, 166400);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int9 = aDTFraction8.denominator();
        boolean boolean11 = aDTFraction8.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction8.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        boolean boolean32 = aDTFraction24.equals((java.lang.Object) aDTFraction30);
        java.lang.String str33 = aDTFraction30.toString();
        java.lang.String str34 = aDTFraction30.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction30.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int52 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction39.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction39.reciprocal();
        int int55 = aDTFraction54.numerator();
        float float56 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction36.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction8.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(10, 1664);
        java.lang.String str63 = aDTFraction62.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction62.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction54.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction5.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction2.plus(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-1.0f) + "'", float56 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "10/1664" + "'", str63, "10/1664");
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
    }

    @Test
    public void test4463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4463");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        int int21 = aDTFraction5.denominator();
        int int22 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str26 = aDTFraction25.toString();
        float float27 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        int int45 = aDTFraction30.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction51.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction51.times((int) (byte) 100);
        java.lang.String str58 = aDTFraction51.toString();
        int int59 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction51.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction30.plus(aDTFraction61);
        int int63 = aDTFraction61.denominator();
        int int64 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        int int73 = aDTFraction67.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction67.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction61.times(aDTFraction77);
        boolean boolean79 = aDTFraction25.equals((java.lang.Object) aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        java.lang.Class<?> wildcardClass88 = aDTFraction82.getClass();
        boolean boolean89 = aDTFraction61.equals((java.lang.Object) aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction5.times(aDTFraction61);
        float float91 = aDTFraction61.value();
        int int92 = aDTFraction61.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/1" + "'", str26, "-1/1");
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-1.0f) + "'", float27 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + (-0.0f) + "'", float91 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test4464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4464");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        boolean boolean68 = aDTFraction60.equals((java.lang.Object) aDTFraction66);
        java.lang.String str69 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction51.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction8.times(aDTFraction51);
        int int73 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction51.reciprocal();
        float float75 = aDTFraction51.value();
        java.lang.String str76 = aDTFraction51.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction79.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int92 = aDTFraction91.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction79.times(aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction79.reciprocal();
        java.lang.String str95 = aDTFraction79.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction51.plus(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-1.0f) + "'", float75 == (-1.0f));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1/-1" + "'", str76, "1/-1");
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "-1/1" + "'", str95, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction96);
    }

    @Test
    public void test4465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4465");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.plus(aDTFraction10);
        int int12 = aDTFraction10.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction10.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction2.plus(aDTFraction14);
        float float16 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0/-1" + "'", str7, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.01f) + "'", float16 == (-0.01f));
    }

    @Test
    public void test4466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4466");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction2.plus(aDTFraction7);
        float float15 = aDTFraction14.value();
        java.lang.String str16 = aDTFraction14.toString();
        float float17 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.times((-2));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-100/-100" + "'", str16, "-100/-100");
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 1.0f + "'", float17 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction19);
    }

    @Test
    public void test4467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4467");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '#', 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        int int7 = aDTFraction6.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times(aDTFraction6);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        boolean boolean21 = aDTFraction17.equals((java.lang.Object) ' ');
        boolean boolean23 = aDTFraction17.equals((java.lang.Object) "");
        java.lang.String str24 = aDTFraction17.toString();
        int int25 = aDTFraction17.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        int int39 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction31.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction31.times((int) (byte) 10);
        boolean boolean44 = aDTFraction17.equals((java.lang.Object) aDTFraction43);
        int int45 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        int int65 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction52.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction61.times((int) (byte) 0);
        int int69 = aDTFraction68.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction48.times(aDTFraction68);
        float float71 = aDTFraction70.value();
        java.lang.String str72 = aDTFraction70.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction43.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction11.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction2.plus(aDTFraction11);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-1.0f) + "'", float49 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0/-1" + "'", str72, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
    }

    @Test
    public void test4468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4468");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(0);
        int int71 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction70.times(1664);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(1, (int) (byte) 100);
        java.lang.String str77 = aDTFraction76.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.times(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction76.times((-32));
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1/100" + "'", str77, "1/100");
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction80);
    }

    @Test
    public void test4469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4469");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        boolean boolean18 = aDTFraction14.equals((java.lang.Object) 'a');
        int int19 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction14.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        boolean boolean27 = aDTFraction24.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction24.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        boolean boolean48 = aDTFraction40.equals((java.lang.Object) aDTFraction46);
        java.lang.String str49 = aDTFraction46.toString();
        java.lang.String str50 = aDTFraction46.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction46.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int68 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction55.reciprocal();
        int int71 = aDTFraction70.numerator();
        float float72 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction52.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction24.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction21.times(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-1.0f) + "'", float72 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
    }

    @Test
    public void test4470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4470");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 10);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times((int) (byte) 100);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        int int15 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction9.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        float float30 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction9.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction9.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction5.times(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction5.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction5.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction5.times(0);
        java.lang.Class<?> wildcardClass41 = aDTFraction5.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 1000.0f + "'", float6 == 1000.0f);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test4471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4471");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction2.reciprocal();
        int int19 = aDTFraction18.denominator();
        int int20 = aDTFraction18.denominator();
        java.lang.Class<?> wildcardClass21 = aDTFraction18.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test4472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4472");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (int) (byte) 100);
        java.lang.String str3 = aDTFraction2.toString();
        float float4 = aDTFraction2.value();
        int int5 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        boolean boolean17 = aDTFraction13.equals((java.lang.Object) ' ');
        boolean boolean19 = aDTFraction13.equals((java.lang.Object) "");
        java.lang.String str20 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        int int29 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        int int42 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction32.times(aDTFraction36);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction13.plus(aDTFraction43);
        java.lang.String str46 = aDTFraction43.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction43.times(1000);
        java.lang.Class<?> wildcardClass50 = aDTFraction49.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1/100" + "'", str3, "1/100");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.01f + "'", float4 == 0.01f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/1" + "'", str46, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test4473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4473");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction24.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        boolean boolean55 = aDTFraction46.equals((java.lang.Object) aDTFraction52);
        java.lang.Object obj56 = null;
        boolean boolean57 = aDTFraction46.equals(obj56);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction46.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test4474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4474");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        java.lang.String str28 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) (short) -1);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction11.plus(aDTFraction31);
        float float37 = aDTFraction11.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
    }

    @Test
    public void test4475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4475");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(90, 97000);
    }

    @Test
    public void test4476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4476");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str7 = aDTFraction6.toString();
        int int8 = aDTFraction6.denominator();
        float float9 = aDTFraction6.value();
        float float10 = aDTFraction6.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction6.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction3.plus(aDTFraction6);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(35);
        int int16 = aDTFraction6.denominator();
        int int17 = aDTFraction6.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-10000), 97);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction6.plus(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1/1" + "'", str7, "-1/1");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-1.0f) + "'", float9 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-1.0f) + "'", float10 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
    }

    @Test
    public void test4477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4477");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        java.lang.String str9 = aDTFraction8.toString();
        java.lang.Object obj10 = null;
        boolean boolean11 = aDTFraction8.equals(obj10);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction22.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction17.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction32.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int58 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction45.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        boolean boolean70 = aDTFraction66.equals((java.lang.Object) ' ');
        boolean boolean72 = aDTFraction66.equals((java.lang.Object) "");
        java.lang.String str73 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction60.times(aDTFraction66);
        float float75 = aDTFraction74.value();
        java.lang.String str76 = aDTFraction74.toString();
        int int77 = aDTFraction74.denominator();
        boolean boolean78 = aDTFraction32.equals((java.lang.Object) int77);
        int int79 = aDTFraction32.denominator();
        boolean boolean80 = aDTFraction8.equals((java.lang.Object) int79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction8.reciprocal();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-100/-100" + "'", str9, "-100/-100");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0/-1" + "'", str73, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/-100" + "'", str76, "0/-100");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-100) + "'", int77 == (-100));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(aDTFraction81);
    }

    @Test
    public void test4478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4478");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        float float18 = aDTFraction2.value();
        int int19 = aDTFraction2.numerator();
        int int20 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int24 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction23.reciprocal();
        int int26 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        int int35 = aDTFraction29.numerator();
        boolean boolean37 = aDTFraction29.equals((java.lang.Object) (short) 1);
        java.lang.String str38 = aDTFraction29.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction29.times((int) 'a');
        boolean boolean41 = aDTFraction23.equals((java.lang.Object) aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction23.reciprocal();
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction2.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction2.times(32);
        java.lang.Class<?> wildcardClass47 = aDTFraction46.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-1.0f) + "'", float18 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100/100" + "'", str43, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test4479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4479");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(90, (int) '#');
    }

    @Test
    public void test4480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4480");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        int int14 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction8.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        int int27 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction17.times(aDTFraction21);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction28.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int35 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction28.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int52 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction39.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction39.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction54.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction36.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction54.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction2.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction61.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int74 = aDTFraction73.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction61.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction61.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction79.times(aDTFraction85);
        boolean boolean89 = aDTFraction76.equals((java.lang.Object) aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction88.times(97);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction57.plus(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction92.times(20000);
        java.lang.Class<?> wildcardClass95 = aDTFraction94.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 1.0f + "'", float5 == 1.0f);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test4481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4481");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int53 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction40.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction37.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        boolean boolean65 = aDTFraction61.equals((java.lang.Object) ' ');
        boolean boolean67 = aDTFraction61.equals((java.lang.Object) "");
        java.lang.String str68 = aDTFraction61.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction61);
        float float70 = aDTFraction69.value();
        java.lang.String str71 = aDTFraction69.toString();
        java.lang.String str72 = aDTFraction69.toString();
        boolean boolean73 = aDTFraction29.equals((java.lang.Object) str72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction29.times(3200);
        java.lang.Class<?> wildcardClass76 = aDTFraction29.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0/-1" + "'", str68, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-100" + "'", str71, "0/-100");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0/-100" + "'", str72, "0/-100");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test4482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4482");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        int int91 = aDTFraction2.denominator();
        int int92 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction2.reciprocal();
        int int94 = aDTFraction93.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction93.reciprocal();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 100 + "'", int94 == 100);
        org.junit.Assert.assertNotNull(aDTFraction95);
    }

    @Test
    public void test4483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4483");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        int int28 = aDTFraction11.numerator();
        java.lang.String str29 = aDTFraction11.toString();
        java.lang.String str30 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction11.times((int) '#');
        java.lang.Class<?> wildcardClass33 = aDTFraction11.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test4484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4484");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(17510, (int) '4');
    }

    @Test
    public void test4485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4485");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        int int4 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        java.lang.String str6 = aDTFraction5.toString();
        int int7 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(100, (-100));
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction11.times((int) (short) 10);
        int int14 = aDTFraction13.numerator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "32/10" + "'", str6, "32/10");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-22000) + "'", int14 == (-22000));
    }

    @Test
    public void test4486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4486");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 10);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times((int) (byte) 100);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        int int15 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction9.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        float float30 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction9.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction9.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction5.times(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int50 = aDTFraction49.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction37.times(aDTFraction49);
        float float52 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction37);
        int int54 = aDTFraction37.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 1000.0f + "'", float6 == 1000.0f);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-1.0f) + "'", float52 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test4487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4487");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        boolean boolean30 = aDTFraction26.equals((java.lang.Object) ' ');
        boolean boolean32 = aDTFraction26.equals((java.lang.Object) "");
        int int33 = aDTFraction26.denominator();
        java.lang.String str34 = aDTFraction26.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction26.plus(aDTFraction37);
        int int39 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction37.times((int) (byte) 10);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction41.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction20.plus(aDTFraction44);
        int int46 = aDTFraction45.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction45.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.0f + "'", float42 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-520) + "'", int46 == (-520));
        org.junit.Assert.assertNotNull(aDTFraction47);
    }

    @Test
    public void test4488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4488");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        int int33 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction31.times((int) (byte) 1);
        int int36 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        int int56 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction43.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction52.times((int) (byte) 0);
        int int60 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction39.times(aDTFraction59);
        float float62 = aDTFraction61.value();
        java.lang.String str63 = aDTFraction61.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction31.plus(aDTFraction61);
        float float65 = aDTFraction61.value();
        float float66 = aDTFraction61.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
    }

    @Test
    public void test4489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4489");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) 'a', 22);
    }

    @Test
    public void test4490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4490");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-32), (-35));
    }

    @Test
    public void test4491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4491");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        int int24 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        int int33 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction27.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        int int46 = aDTFraction40.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction36.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str51 = aDTFraction50.toString();
        boolean boolean52 = aDTFraction36.equals((java.lang.Object) aDTFraction50);
        boolean boolean53 = aDTFraction23.equals((java.lang.Object) boolean52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction23.times(35);
        float float56 = aDTFraction23.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-1/10" + "'", str51, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
    }

    @Test
    public void test4492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4492");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '#', 1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 35.0f + "'", float3 == 35.0f);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 35.0f + "'", float4 == 35.0f);
    }

    @Test
    public void test4493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4493");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        java.lang.String str23 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int49 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction36.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction33.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction33.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction33.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction15.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction59.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str64 = aDTFraction63.toString();
        int int65 = aDTFraction63.denominator();
        float float66 = aDTFraction63.value();
        float float67 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction63.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction70.times((int) (short) 1);
        java.lang.String str73 = aDTFraction70.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction56.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction56.times(9900);
        float float77 = aDTFraction76.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1/1" + "'", str64, "-1/1");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-1.0f) + "'", float66 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-1.0f) + "'", float67 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "87/10" + "'", str73, "87/10");
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
    }

    @Test
    public void test4494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4494");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        float float17 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int41 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction25.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction15.times(aDTFraction25);
        int int47 = aDTFraction46.numerator();
        int int48 = aDTFraction46.denominator();
        java.lang.String str49 = aDTFraction46.toString();
        int int50 = aDTFraction46.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction11.plus(aDTFraction46);
        int int52 = aDTFraction11.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test4495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4495");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        java.lang.String str23 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction28.times(32);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction15.plus(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
    }

    @Test
    public void test4496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4496");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        float float35 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int59 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction46.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction43.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction43.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction33.times(aDTFraction43);
        int int65 = aDTFraction64.numerator();
        int int66 = aDTFraction64.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction64.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction28.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction72.plus(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction72.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction78.times(aDTFraction81);
        boolean boolean84 = aDTFraction82.equals((java.lang.Object) (byte) 0);
        boolean boolean85 = aDTFraction69.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction69.times((-52));
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction69.times((-52));
        int int90 = aDTFraction89.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test4497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4497");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times(aDTFraction7);
        int int9 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction7.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction14.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction15.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction17.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction17.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.times(aDTFraction20);
        int int22 = aDTFraction11.denominator();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test4498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4498");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction6.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) aDTFraction11);
        int int13 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction2.times(aDTFraction11);
        java.lang.String str15 = aDTFraction14.toString();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "100/3500" + "'", str15, "100/3500");
    }

    @Test
    public void test4499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4499");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        java.lang.String str14 = aDTFraction5.toString();
        int int15 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times(32);
        java.lang.Class<?> wildcardClass23 = aDTFraction20.getClass();
        boolean boolean24 = aDTFraction5.equals((java.lang.Object) aDTFraction20);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0/-1" + "'", str14, "0/-1");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4500");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(97, 1664);
    }
}


package ADTFraction;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction2.equals((java.lang.Object) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        int int18 = aDTFraction17.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction17.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        int int33 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction31.times((int) (byte) 1);
        int int36 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        int int56 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction43.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction52.times((int) (byte) 0);
        int int60 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction39.times(aDTFraction59);
        float float62 = aDTFraction61.value();
        java.lang.String str63 = aDTFraction61.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction31.plus(aDTFraction61);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction64.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction64);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction9.denominator();
        java.lang.String str11 = aDTFraction9.toString();
        boolean boolean13 = aDTFraction9.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int17 = aDTFraction16.denominator();
        float float18 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction16.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction9.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        boolean boolean37 = aDTFraction29.equals((java.lang.Object) aDTFraction35);
        java.lang.String str38 = aDTFraction35.toString();
        java.lang.String str39 = aDTFraction35.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction35.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction44.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int57 = aDTFraction56.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction44.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction44.reciprocal();
        int int60 = aDTFraction59.numerator();
        float float61 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction41.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        boolean boolean79 = aDTFraction71.equals((java.lang.Object) aDTFraction77);
        java.lang.String str80 = aDTFraction77.toString();
        java.lang.String str81 = aDTFraction77.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float85 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction77.times(aDTFraction84);
        int int87 = aDTFraction77.denominator();
        float float88 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction59.times(aDTFraction77);
        boolean boolean90 = aDTFraction20.equals((java.lang.Object) aDTFraction59);
        int int91 = aDTFraction59.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 1.0f + "'", float18 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-1.0f) + "'", float61 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "0/-1" + "'", str80, "0/-1");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0/-1" + "'", str81, "0/-1");
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + (-0.0f) + "'", float88 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int22 = aDTFraction21.denominator();
        boolean boolean24 = aDTFraction21.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction21.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction11.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction21.plus(aDTFraction27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        int int9 = aDTFraction7.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction15.reciprocal();
        java.lang.String str17 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction12.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction7.times(aDTFraction15);
        java.lang.Class<?> wildcardClass20 = aDTFraction15.getClass();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "100/100" + "'", str17, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction16.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.times((int) (byte) 10);
        boolean boolean22 = aDTFraction16.equals((java.lang.Object) true);
        java.lang.Class<?> wildcardClass23 = aDTFraction16.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        int int14 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction8.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        int int27 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction17.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        boolean boolean45 = aDTFraction37.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction48.equals((java.lang.Object) 10);
        boolean boolean56 = aDTFraction43.equals((java.lang.Object) aDTFraction48);
        boolean boolean57 = aDTFraction21.equals((java.lang.Object) boolean56);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction2.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction21.times(aDTFraction61);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction62.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction62);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        boolean boolean15 = aDTFraction11.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction11.times((int) (byte) 100);
        java.lang.String str18 = aDTFraction11.toString();
        int int19 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        int int35 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        boolean boolean47 = aDTFraction41.equals((java.lang.Object) "");
        float float48 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction30.times(aDTFraction41);
        boolean boolean50 = aDTFraction21.equals((java.lang.Object) aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction62.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction21.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction2.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction75.times((int) (byte) 0);
        float float78 = aDTFraction75.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction75.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction29.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int55 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction42.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction39.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        boolean boolean67 = aDTFraction63.equals((java.lang.Object) ' ');
        boolean boolean69 = aDTFraction63.equals((java.lang.Object) "");
        java.lang.String str70 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction57.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction71.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction29.plus(aDTFraction73);
        int int75 = aDTFraction73.denominator();
        java.lang.Class<?> wildcardClass76 = aDTFraction73.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-100) + "'", int75 == (-100));
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        boolean boolean14 = aDTFraction8.equals((java.lang.Object) "");
        java.lang.String str15 = aDTFraction8.toString();
        int int16 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction22.times((int) (byte) 100);
        java.lang.String str29 = aDTFraction22.toString();
        int int30 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction22.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction22.times((int) (byte) 10);
        boolean boolean35 = aDTFraction8.equals((java.lang.Object) aDTFraction34);
        int int36 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        int int56 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction43.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction52.times((int) (byte) 0);
        int int60 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction39.times(aDTFraction59);
        float float62 = aDTFraction61.value();
        java.lang.String str63 = aDTFraction61.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction34.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction2.times(aDTFraction64);
        float float66 = aDTFraction65.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + 0.0f + "'", float66 == 0.0f);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction39.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean46 = aDTFraction44.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction52.times(aDTFraction58);
        int int62 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction49.times(aDTFraction58);
        int int64 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction74.times(aDTFraction80);
        int int84 = aDTFraction80.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction71.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction80.times((int) (byte) 0);
        int int88 = aDTFraction87.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction67.times(aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction58.plus(aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction44.plus(aDTFraction58);
        boolean boolean92 = aDTFraction39.equals((java.lang.Object) aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = new com.thealgorithms.maths.ADTFraction(32, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction39.plus(aDTFraction95);
        java.lang.Class<?> wildcardClass97 = aDTFraction96.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-1.0f) + "'", float68 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        float float7 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction18.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction15.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction15.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction5.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction15.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction42.reciprocal();
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction39.plus(aDTFraction43);
        java.lang.Class<?> wildcardClass46 = aDTFraction45.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + (-0.0f) + "'", float7 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction30.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        boolean boolean60 = aDTFraction54.equals((java.lang.Object) "");
        java.lang.String str61 = aDTFraction54.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction48.times(aDTFraction54);
        float float63 = aDTFraction62.value();
        java.lang.String str64 = aDTFraction62.toString();
        int int65 = aDTFraction62.denominator();
        boolean boolean66 = aDTFraction20.equals((java.lang.Object) int65);
        int int67 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction20.times((int) (short) 100);
        java.lang.String str70 = aDTFraction20.toString();
        int int71 = aDTFraction20.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-100" + "'", str64, "0/-100");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-100) + "'", int65 == (-100));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/1" + "'", str70, "0/1");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        boolean boolean28 = aDTFraction25.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction25.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        boolean boolean40 = aDTFraction36.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction36.times((int) (byte) 100);
        java.lang.String str43 = aDTFraction36.toString();
        int int44 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction36.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction36.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        java.lang.Class<?> wildcardClass57 = aDTFraction56.getClass();
        boolean boolean58 = aDTFraction36.equals((java.lang.Object) aDTFraction56);
        int int59 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        int int68 = aDTFraction62.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction62.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        int int81 = aDTFraction75.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction71.times(aDTFraction75);
        float float83 = aDTFraction82.value();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction82.times((int) (short) 0);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction36.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction25.plus(aDTFraction36);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction36.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + 0.0f + "'", float83 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + 0.0f + "'", float86 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        boolean boolean68 = aDTFraction60.equals((java.lang.Object) aDTFraction66);
        java.lang.String str69 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction51.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction8.times(aDTFraction51);
        int int73 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str78 = aDTFraction77.toString();
        int int79 = aDTFraction77.denominator();
        float float80 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction74.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction84.reciprocal();
        int int86 = aDTFraction84.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction84.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction77.plus(aDTFraction87);
        int int89 = aDTFraction77.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction77.times((int) 'a');
        java.lang.Class<?> wildcardClass92 = aDTFraction91.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-1/1" + "'", str78, "-1/1");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-1.0f) + "'", float80 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        java.lang.String str11 = aDTFraction9.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction9.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction18.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        float float39 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction18.plus(aDTFraction32);
        int int41 = aDTFraction18.numerator();
        java.lang.String str42 = aDTFraction18.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction18.times((int) ' ');
        boolean boolean46 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction57.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int70 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction57.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction54.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        boolean boolean82 = aDTFraction78.equals((java.lang.Object) ' ');
        boolean boolean84 = aDTFraction78.equals((java.lang.Object) "");
        java.lang.String str85 = aDTFraction78.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction72.times(aDTFraction89);
        int int91 = aDTFraction89.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str95 = aDTFraction94.toString();
        int int96 = aDTFraction94.denominator();
        boolean boolean97 = aDTFraction89.equals((java.lang.Object) aDTFraction94);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction5.times(aDTFraction89);
        float float99 = aDTFraction5.value();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0/-1" + "'", str85, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "-1/1" + "'", str95, "-1/1");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertTrue("'" + float99 + "' != '" + (-1.0f) + "'", float99 == (-1.0f));
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 10);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        boolean boolean15 = aDTFraction11.equals((java.lang.Object) ' ');
        boolean boolean17 = aDTFraction11.equals((java.lang.Object) "");
        java.lang.String str18 = aDTFraction11.toString();
        int int19 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        java.lang.String str32 = aDTFraction25.toString();
        int int33 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction25.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction25.times((int) (byte) 10);
        boolean boolean38 = aDTFraction11.equals((java.lang.Object) aDTFraction37);
        int int39 = aDTFraction37.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction37.times((int) (byte) 1);
        int int42 = aDTFraction37.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction52.times(aDTFraction58);
        int int62 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction49.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction58.times((int) (byte) 0);
        int int66 = aDTFraction65.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction45.times(aDTFraction65);
        float float68 = aDTFraction67.value();
        java.lang.String str69 = aDTFraction67.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction37.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction5.plus(aDTFraction70);
        int int72 = aDTFraction71.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0/-1" + "'", str32, "0/-1");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-1.0f) + "'", float46 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        java.lang.String str11 = aDTFraction2.toString();
        java.lang.Class<?> wildcardClass12 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        int int19 = aDTFraction13.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction13.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        float float34 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction13.plus(aDTFraction27);
        boolean boolean36 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        java.lang.Object obj37 = null;
        boolean boolean38 = aDTFraction27.equals(obj37);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction27.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.reciprocal();
        int int39 = aDTFraction38.numerator();
        float float40 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction20.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction44.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        boolean boolean58 = aDTFraction50.equals((java.lang.Object) aDTFraction56);
        java.lang.String str59 = aDTFraction56.toString();
        java.lang.String str60 = aDTFraction56.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction56.times(aDTFraction63);
        int int66 = aDTFraction56.denominator();
        float float67 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction38.times(aDTFraction56);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction68.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0/-1" + "'", str59, "0/-1");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction33.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction48.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction30.plus(aDTFraction48);
        java.lang.String str51 = aDTFraction50.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2/-1" + "'", str51, "2/-1");
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(52, (-1));
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        int int16 = aDTFraction12.numerator();
        int int17 = aDTFraction12.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int41 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        boolean boolean53 = aDTFraction49.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction49.times((int) (byte) 100);
        java.lang.String str56 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction25.times(aDTFraction49);
        int int58 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction12.plus(aDTFraction25);
        java.lang.Class<?> wildcardClass60 = aDTFraction59.getClass();
        boolean boolean61 = aDTFraction2.equals((java.lang.Object) aDTFraction59);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-52.0f) + "'", float3 == (-52.0f));
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0/-1" + "'", str56, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        float float40 = aDTFraction31.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        float float17 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int41 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction43.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int72 = aDTFraction71.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction59.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction59.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float92 = aDTFraction91.value();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction88.plus(aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction85.times(aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction80.plus(aDTFraction94);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction59.times(aDTFraction95);
        boolean boolean97 = aDTFraction43.equals((java.lang.Object) aDTFraction59);
        java.lang.Class<?> wildcardClass98 = aDTFraction43.getClass();
        boolean boolean99 = aDTFraction11.equals((java.lang.Object) wildcardClass98);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + (-0.0f) + "'", float92 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        int int18 = aDTFraction17.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction17.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        float float25 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int49 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction36.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction33.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction33.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction23.times(aDTFraction33);
        int int55 = aDTFraction54.numerator();
        int int56 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction54.times(10);
        boolean boolean59 = aDTFraction20.equals((java.lang.Object) aDTFraction58);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction20.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-100), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        java.lang.String str40 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction46.times((int) 'a');
        int int51 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction50.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction39.plus(aDTFraction53);
        int int55 = aDTFraction53.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0/-1" + "'", str40, "0/-1");
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        boolean boolean68 = aDTFraction60.equals((java.lang.Object) aDTFraction66);
        java.lang.String str69 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction51.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction8.times(aDTFraction51);
        int int73 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str78 = aDTFraction77.toString();
        int int79 = aDTFraction77.denominator();
        float float80 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction74.times(aDTFraction77);
        int int82 = aDTFraction74.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-1/1" + "'", str78, "-1/1");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-1.0f) + "'", float80 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass37 = aDTFraction34.getClass();
        boolean boolean38 = aDTFraction14.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction53);
        java.lang.String str55 = aDTFraction2.toString();
        java.lang.String str56 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1/1" + "'", str55, "-1/1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1/1" + "'", str56, "-1/1");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        boolean boolean28 = aDTFraction22.equals((java.lang.Object) "");
        int int29 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        boolean boolean46 = aDTFraction38.equals((java.lang.Object) aDTFraction44);
        java.lang.String str47 = aDTFraction44.toString();
        java.lang.String str48 = aDTFraction44.toString();
        float float49 = aDTFraction44.value();
        boolean boolean50 = aDTFraction22.equals((java.lang.Object) float49);
        int int51 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction22.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction11.times(aDTFraction53);
        java.lang.String str55 = aDTFraction53.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction53.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction14.denominator();
        int int18 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        float float34 = aDTFraction27.value();
        boolean boolean35 = aDTFraction21.equals((java.lang.Object) aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (byte) 100);
        java.lang.String str48 = aDTFraction41.toString();
        int int49 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction41.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction27.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction14.plus(aDTFraction27);
        float float54 = aDTFraction14.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 1.0f + "'", float54 == 1.0f);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        float float25 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        int int38 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean43 = aDTFraction41.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        int int56 = aDTFraction46.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        boolean boolean73 = aDTFraction65.equals((java.lang.Object) aDTFraction71);
        java.lang.String str74 = aDTFraction71.toString();
        java.lang.String str75 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction71.times(aDTFraction78);
        boolean boolean81 = aDTFraction46.equals((java.lang.Object) aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction41.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction28.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction16.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction82.times((int) (short) 10);
        java.lang.String str87 = aDTFraction86.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-1" + "'", str74, "0/-1");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-1" + "'", str75, "0/-1");
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0/-1" + "'", str87, "0/-1");
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        float float25 = aDTFraction24.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction24.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        java.lang.String str11 = aDTFraction9.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction9.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction18.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        float float39 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction18.plus(aDTFraction32);
        int int41 = aDTFraction18.numerator();
        java.lang.String str42 = aDTFraction18.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction18.times((int) ' ');
        boolean boolean46 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction57.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int70 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction57.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction54.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        boolean boolean82 = aDTFraction78.equals((java.lang.Object) ' ');
        boolean boolean84 = aDTFraction78.equals((java.lang.Object) "");
        java.lang.String str85 = aDTFraction78.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction72.times(aDTFraction89);
        int int91 = aDTFraction89.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str95 = aDTFraction94.toString();
        int int96 = aDTFraction94.denominator();
        boolean boolean97 = aDTFraction89.equals((java.lang.Object) aDTFraction94);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction5.times(aDTFraction89);
        int int99 = aDTFraction5.denominator();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0/-1" + "'", str85, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "-1/1" + "'", str95, "-1/1");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.times(aDTFraction38);
        java.lang.String str40 = aDTFraction2.toString();
        java.lang.String str41 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1/1" + "'", str40, "-1/1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1/1" + "'", str41, "-1/1");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) 10);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) '4');
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str7 = aDTFraction6.toString();
        java.lang.String str8 = aDTFraction6.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction6);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        float float14 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int38 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction22.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction22.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction12.times(aDTFraction22);
        int int44 = aDTFraction43.numerator();
        int int45 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction43.times((int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction2.plus(aDTFraction47);
        java.lang.Class<?> wildcardClass49 = aDTFraction2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100/52" + "'", str3, "100/52");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0/-1" + "'", str7, "0/-1");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/-1" + "'", str8, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        int int19 = aDTFraction13.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction13.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        float float34 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction13.plus(aDTFraction27);
        boolean boolean36 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        float float37 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        int int50 = aDTFraction40.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean55 = aDTFraction53.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction58.times(aDTFraction64);
        int int68 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction71.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float84 = aDTFraction83.value();
        boolean boolean85 = aDTFraction77.equals((java.lang.Object) aDTFraction83);
        java.lang.String str86 = aDTFraction83.toString();
        java.lang.String str87 = aDTFraction83.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float91 = aDTFraction90.value();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction83.times(aDTFraction90);
        boolean boolean93 = aDTFraction58.equals((java.lang.Object) aDTFraction92);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction53.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction40.times(aDTFraction94);
        boolean boolean96 = aDTFraction27.equals((java.lang.Object) aDTFraction95);
        java.lang.Class<?> wildcardClass97 = aDTFraction27.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + (-0.0f) + "'", float84 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0/-1" + "'", str87, "0/-1");
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + (-0.0f) + "'", float91 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        java.lang.String str34 = aDTFraction33.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction33.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction11.denominator();
        java.lang.String str13 = aDTFraction11.toString();
        java.lang.Class<?> wildcardClass14 = aDTFraction11.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        int int32 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction26.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        float float47 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction26.plus(aDTFraction40);
        int int49 = aDTFraction26.numerator();
        java.lang.String str50 = aDTFraction26.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction22.plus(aDTFraction26);
        float float52 = aDTFraction51.value();
        float float53 = aDTFraction51.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.times(aDTFraction38);
        float float40 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction9.denominator();
        java.lang.String str11 = aDTFraction9.toString();
        boolean boolean13 = aDTFraction9.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int17 = aDTFraction16.denominator();
        float float18 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction16.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction9.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        boolean boolean33 = aDTFraction29.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction29.times((int) (byte) 100);
        float float36 = aDTFraction29.value();
        boolean boolean37 = aDTFraction23.equals((java.lang.Object) aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int53 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction40.times(aDTFraction52);
        int int55 = aDTFraction40.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        boolean boolean65 = aDTFraction61.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction61.times((int) (byte) 100);
        java.lang.String str68 = aDTFraction61.toString();
        int int69 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction61.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction40.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction75.times(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float88 = aDTFraction87.value();
        boolean boolean89 = aDTFraction81.equals((java.lang.Object) aDTFraction87);
        java.lang.String str90 = aDTFraction87.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction72.plus(aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction72.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction29.times(aDTFraction72);
        int int94 = aDTFraction72.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction72.reciprocal();
        float float96 = aDTFraction72.value();
        java.lang.String str97 = aDTFraction72.toString();
        boolean boolean98 = aDTFraction9.equals((java.lang.Object) aDTFraction72);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 1.0f + "'", float18 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0/-1" + "'", str68, "0/-1");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + (-0.0f) + "'", float88 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0/-1" + "'", str90, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertTrue("'" + float96 + "' != '" + (-1.0f) + "'", float96 == (-1.0f));
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "1/-1" + "'", str97, "1/-1");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        java.lang.String str27 = aDTFraction2.toString();
        float float28 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) ' ');
        boolean boolean40 = aDTFraction34.equals((java.lang.Object) "");
        int int41 = aDTFraction34.denominator();
        java.lang.String str42 = aDTFraction34.toString();
        java.lang.String str43 = aDTFraction34.toString();
        int int44 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction34.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction34.times((int) '#');
        boolean boolean49 = aDTFraction2.equals((java.lang.Object) aDTFraction34);
        java.lang.Class<?> wildcardClass50 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        int int26 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        java.lang.String str35 = aDTFraction29.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (byte) 100);
        java.lang.String str48 = aDTFraction41.toString();
        int int49 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction41.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction29.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction24.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction56.times(aDTFraction62);
        int int66 = aDTFraction62.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        java.lang.String str75 = aDTFraction69.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction62.plus(aDTFraction69);
        float float77 = aDTFraction76.value();
        java.lang.Object obj78 = null;
        boolean boolean79 = aDTFraction76.equals(obj78);
        float float80 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction52.times(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (short) 1);
        boolean boolean85 = aDTFraction81.equals((java.lang.Object) '4');
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-1" + "'", str75, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + 0.0f + "'", float77 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + 0.0f + "'", float80 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        boolean boolean25 = aDTFraction19.equals((java.lang.Object) "");
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction5.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction28.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        boolean boolean43 = aDTFraction37.equals((java.lang.Object) "");
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        int int52 = aDTFraction46.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction46.times((int) '#');
        boolean boolean55 = aDTFraction37.equals((java.lang.Object) aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        int int64 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction58.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        int int77 = aDTFraction71.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction67.times(aDTFraction71);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction37.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction28.times(aDTFraction37);
        int int82 = aDTFraction37.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 0.0f + "'", float79 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        float float34 = aDTFraction12.value();
        int int35 = aDTFraction12.denominator();
        java.lang.Class<?> wildcardClass36 = aDTFraction12.getClass();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int67 = aDTFraction66.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction54.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction51.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction69.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction69.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction42.times(aDTFraction69);
        java.lang.String str86 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction2.times(aDTFraction42);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction87.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction87);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction16.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.times((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction20.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(aDTFraction20);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int38 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction22.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        boolean boolean50 = aDTFraction46.equals((java.lang.Object) ' ');
        boolean boolean52 = aDTFraction46.equals((java.lang.Object) "");
        java.lang.String str53 = aDTFraction46.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction57.times(aDTFraction63);
        int int67 = aDTFraction57.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction70.times(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float83 = aDTFraction82.value();
        boolean boolean84 = aDTFraction76.equals((java.lang.Object) aDTFraction82);
        java.lang.String str85 = aDTFraction82.toString();
        java.lang.String str86 = aDTFraction82.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float90 = aDTFraction89.value();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction82.times(aDTFraction89);
        boolean boolean92 = aDTFraction57.equals((java.lang.Object) aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction57.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction46.times(aDTFraction93);
        java.lang.Class<?> wildcardClass95 = aDTFraction93.getClass();
        boolean boolean96 = aDTFraction14.equals((java.lang.Object) wildcardClass95);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction14.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0/-1" + "'", str85, "0/-1");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertTrue("'" + float90 + "' != '" + (-0.0f) + "'", float90 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction37.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction38.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction47.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int60 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction47.times(aDTFraction59);
        int int62 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction43.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction66.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction66.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction59.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction66.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction2.times(aDTFraction79);
        java.lang.Class<?> wildcardClass81 = aDTFraction79.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        java.lang.String str8 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        boolean boolean18 = aDTFraction14.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (byte) 100);
        java.lang.String str21 = aDTFraction14.toString();
        int int22 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction14.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction2.plus(aDTFraction14);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/-1" + "'", str8, "0/-1");
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction37.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction38.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction34.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction43.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        boolean boolean63 = aDTFraction55.equals((java.lang.Object) aDTFraction61);
        java.lang.String str64 = aDTFraction61.toString();
        java.lang.String str65 = aDTFraction61.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction61.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction70.times(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int83 = aDTFraction82.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction70.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction70.reciprocal();
        int int86 = aDTFraction85.numerator();
        float float87 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction67.times(aDTFraction85);
        java.lang.String str89 = aDTFraction85.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction43.times(aDTFraction85);
        java.lang.Class<?> wildcardClass91 = aDTFraction85.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-1" + "'", str64, "0/-1");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0/-1" + "'", str65, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + (-1.0f) + "'", float87 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1/-1" + "'", str89, "1/-1");
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        int int11 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        int int24 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        java.lang.String str33 = aDTFraction27.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.plus(aDTFraction27);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        int int44 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction38.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        boolean boolean56 = aDTFraction52.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction52.times((int) (byte) 100);
        float float59 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction38.plus(aDTFraction52);
        int int61 = aDTFraction38.numerator();
        java.lang.String str62 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction34.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction2.plus(aDTFraction63);
        java.lang.String str65 = aDTFraction64.toString();
        int int66 = aDTFraction64.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0/-1" + "'", str62, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0/1" + "'", str65, "0/1");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        float float26 = aDTFraction7.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        float float46 = aDTFraction41.value();
        int int47 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction58.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int71 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction58.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction55.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction41.plus(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction7.plus(aDTFraction72);
        int int76 = aDTFraction72.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction72.times((int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction78.plus(aDTFraction79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(aDTFraction78);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, 32);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.plus(aDTFraction10);
        java.lang.String str12 = aDTFraction11.toString();
        java.lang.Object obj13 = null;
        boolean boolean14 = aDTFraction11.equals(obj13);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction11.times(aDTFraction16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0/-1" + "'", str7, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-100/-100" + "'", str12, "-100/-100");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(aDTFraction15);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        float float26 = aDTFraction7.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        float float46 = aDTFraction41.value();
        int int47 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction58.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int71 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction58.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction55.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction41.plus(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction7.plus(aDTFraction72);
        int int76 = aDTFraction72.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction72.times((int) (byte) 1);
        int int79 = aDTFraction78.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 100 + "'", int79 == 100);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        int int45 = aDTFraction15.numerator();
        int int46 = aDTFraction15.numerator();
        float float47 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction58.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int71 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction58.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction55.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction76.plus(aDTFraction79);
        boolean boolean83 = aDTFraction79.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction79.times((int) (byte) 100);
        java.lang.String str86 = aDTFraction79.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction55.times(aDTFraction79);
        int int88 = aDTFraction87.denominator();
        int int89 = aDTFraction87.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction15.plus(aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction15.times(aDTFraction91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(aDTFraction90);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        int int19 = aDTFraction13.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction13.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        float float34 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction13.plus(aDTFraction27);
        boolean boolean36 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        java.lang.String str37 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-100), (int) (byte) 100);
        boolean boolean41 = aDTFraction2.equals((java.lang.Object) (byte) 100);
        int int42 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0/-1" + "'", str37, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction19);
        java.lang.String str21 = aDTFraction19.toString();
        java.lang.Class<?> wildcardClass22 = aDTFraction19.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100/100" + "'", str21, "100/100");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        boolean boolean25 = aDTFraction19.equals((java.lang.Object) "");
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction5.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction28.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        boolean boolean43 = aDTFraction37.equals((java.lang.Object) "");
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        int int52 = aDTFraction46.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction46.times((int) '#');
        boolean boolean55 = aDTFraction37.equals((java.lang.Object) aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        int int64 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction58.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        int int77 = aDTFraction71.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction67.times(aDTFraction71);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction37.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction28.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction28.times(1664);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 0.0f + "'", float79 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction83);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction22.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction14.denominator();
        int int18 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        float float34 = aDTFraction27.value();
        boolean boolean35 = aDTFraction21.equals((java.lang.Object) aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (byte) 100);
        java.lang.String str48 = aDTFraction41.toString();
        int int49 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction41.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction27.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction14.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction64.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int77 = aDTFraction76.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction64.times(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction61.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float89 = aDTFraction88.value();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction85.plus(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction82.times(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction79.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction79.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction94.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction94.times((int) (byte) 1);
        boolean boolean99 = aDTFraction53.equals((java.lang.Object) aDTFraction98);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-0.0f) + "'", float89 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        java.lang.Class<?> wildcardClass13 = aDTFraction12.getClass();
        boolean boolean14 = aDTFraction2.equals((java.lang.Object) aDTFraction12);
        int int15 = aDTFraction12.denominator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-1.0f) + "'", float4 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        int int13 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        boolean boolean25 = aDTFraction19.equals((java.lang.Object) "");
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction8.times(aDTFraction19);
        int int28 = aDTFraction19.denominator();
        int int29 = aDTFraction19.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction14.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        java.lang.String str27 = aDTFraction25.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        int int40 = aDTFraction34.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction34.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        boolean boolean52 = aDTFraction48.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction48.times((int) (byte) 100);
        float float55 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction34.plus(aDTFraction48);
        int int57 = aDTFraction34.numerator();
        java.lang.String str58 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction34.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction64.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction65.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean71 = aDTFraction67.equals((java.lang.Object) aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        int int80 = aDTFraction74.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction70.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction61.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str86 = aDTFraction85.toString();
        boolean boolean87 = aDTFraction61.equals((java.lang.Object) str86);
        int int88 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction22.plus(aDTFraction61);
        java.lang.String str90 = aDTFraction89.toString();
        java.lang.Class<?> wildcardClass91 = aDTFraction89.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0/1" + "'", str90, "0/1");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction8);
        int int10 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction8.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction12.times((-10));
        int int15 = aDTFraction12.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction16.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.times((int) (byte) 10);
        java.lang.String str21 = aDTFraction16.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/10" + "'", str21, "0/10");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, 32);
        int int3 = aDTFraction2.numerator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        boolean boolean28 = aDTFraction25.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction25.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        boolean boolean40 = aDTFraction36.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction36.times((int) (byte) 100);
        java.lang.String str43 = aDTFraction36.toString();
        int int44 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction36.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction36.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        java.lang.Class<?> wildcardClass57 = aDTFraction56.getClass();
        boolean boolean58 = aDTFraction36.equals((java.lang.Object) aDTFraction56);
        int int59 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        int int68 = aDTFraction62.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction62.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        int int81 = aDTFraction75.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction71.times(aDTFraction75);
        float float83 = aDTFraction82.value();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction82.times((int) (short) 0);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction36.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction25.plus(aDTFraction36);
        float float89 = aDTFraction25.value();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + 0.0f + "'", float83 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + 0.0f + "'", float86 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + 1.0f + "'", float89 == 1.0f);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction16.times(0);
        float float19 = aDTFraction16.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float38 = aDTFraction37.value();
        float float39 = aDTFraction37.value();
        int int40 = aDTFraction37.denominator();
        boolean boolean41 = aDTFraction33.equals((java.lang.Object) int40);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-1.0f) + "'", float38 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-1.0f) + "'", float39 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        boolean boolean68 = aDTFraction60.equals((java.lang.Object) aDTFraction66);
        java.lang.String str69 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction51.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction8.times(aDTFraction51);
        int int73 = aDTFraction51.denominator();
        java.lang.Class<?> wildcardClass74 = aDTFraction51.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) (-1));
        java.lang.String str5 = aDTFraction2.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0/-1" + "'", str5, "0/-1");
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(97, (-100));
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        int int91 = aDTFraction2.denominator();
        int int92 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction2.reciprocal();
        int int94 = aDTFraction93.denominator();
        int int95 = aDTFraction93.numerator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 100 + "'", int94 == 100);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        int int44 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str48 = aDTFraction47.toString();
        int int49 = aDTFraction47.denominator();
        boolean boolean50 = aDTFraction42.equals((java.lang.Object) aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction61.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int74 = aDTFraction73.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction61.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction58.times(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float83 = aDTFraction82.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction79.plus(aDTFraction82);
        boolean boolean86 = aDTFraction82.equals((java.lang.Object) ' ');
        boolean boolean88 = aDTFraction82.equals((java.lang.Object) "");
        java.lang.String str89 = aDTFraction82.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction76.times(aDTFraction82);
        float float91 = aDTFraction90.value();
        java.lang.String str92 = aDTFraction90.toString();
        int int93 = aDTFraction90.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction42.plus(aDTFraction90);
        java.lang.String str95 = aDTFraction90.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-1/1" + "'", str48, "-1/1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "0/-1" + "'", str89, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + (-0.0f) + "'", float91 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "0/-100" + "'", str92, "0/-100");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-100) + "'", int93 == (-100));
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "0/-100" + "'", str95, "0/-100");
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int19 = aDTFraction18.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction18);
        int int21 = aDTFraction6.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        java.lang.String str34 = aDTFraction27.toString();
        int int35 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction27.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction6.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction42.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction38.plus(aDTFraction47);
        int int50 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction3.plus(aDTFraction38);
        int int52 = aDTFraction3.denominator();
        float float53 = aDTFraction3.value();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 3.2f + "'", float53 == 3.2f);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        int int45 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        java.lang.String str54 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.plus(aDTFraction48);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction32.plus(aDTFraction55);
        int int60 = aDTFraction55.denominator();
        int int61 = aDTFraction55.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int10 = aDTFraction9.denominator();
        float float11 = aDTFraction9.value();
        float float12 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction38.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        boolean boolean52 = aDTFraction44.equals((java.lang.Object) aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        boolean boolean62 = aDTFraction55.equals((java.lang.Object) 10);
        boolean boolean63 = aDTFraction50.equals((java.lang.Object) aDTFraction55);
        boolean boolean64 = aDTFraction28.equals((java.lang.Object) boolean63);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction9.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction28.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction5.times(aDTFraction69);
        java.lang.Class<?> wildcardClass71 = aDTFraction69.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 320.0f + "'", float6 == 320.0f);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.plus(aDTFraction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        int int52 = aDTFraction42.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        boolean boolean69 = aDTFraction61.equals((java.lang.Object) aDTFraction67);
        java.lang.String str70 = aDTFraction67.toString();
        java.lang.String str71 = aDTFraction67.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction74);
        boolean boolean77 = aDTFraction42.equals((java.lang.Object) aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction42.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction31.times(aDTFraction78);
        java.lang.Class<?> wildcardClass80 = aDTFraction31.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        int int44 = aDTFraction42.denominator();
        int int45 = aDTFraction42.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        java.lang.String str50 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction48.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        int int63 = aDTFraction57.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction57.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        boolean boolean75 = aDTFraction71.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction71.times((int) (byte) 100);
        float float78 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction57.plus(aDTFraction71);
        int int80 = aDTFraction57.numerator();
        java.lang.String str81 = aDTFraction57.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction54.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction42.plus(aDTFraction82);
        java.lang.String str84 = aDTFraction82.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0/-1" + "'", str81, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "100/100" + "'", str84, "100/100");
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction34.times((int) (byte) 100);
        java.lang.String str41 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction10.times(aDTFraction34);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction2.times(aDTFraction42);
        java.lang.Class<?> wildcardClass45 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction25.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction41.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int54 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction62.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction41.times(aDTFraction77);
        boolean boolean79 = aDTFraction25.equals((java.lang.Object) aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        int int88 = aDTFraction82.numerator();
        int int89 = aDTFraction82.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction25.plus(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float97 = aDTFraction96.value();
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction93.plus(aDTFraction96);
        boolean boolean99 = aDTFraction25.equals((java.lang.Object) aDTFraction93);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + float97 + "' != '" + (-0.0f) + "'", float97 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction20.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction21.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction26.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction49.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction17.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction64.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction65.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean71 = aDTFraction67.equals((java.lang.Object) aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        int int80 = aDTFraction74.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction70.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction61.times(aDTFraction70);
        java.lang.Class<?> wildcardClass83 = aDTFraction61.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass37 = aDTFraction34.getClass();
        boolean boolean38 = aDTFraction14.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction53);
        java.lang.String str55 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        int int64 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction58.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        int int75 = aDTFraction69.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction69.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float84 = aDTFraction83.value();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction80.plus(aDTFraction83);
        boolean boolean87 = aDTFraction83.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction83.times((int) (byte) 100);
        float float90 = aDTFraction83.value();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction69.plus(aDTFraction83);
        boolean boolean92 = aDTFraction58.equals((java.lang.Object) aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction2.times(aDTFraction58);
        java.lang.Object obj94 = null;
        boolean boolean95 = aDTFraction58.equals(obj94);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1/1" + "'", str55, "-1/1");
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + (-0.0f) + "'", float84 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + float90 + "' != '" + (-0.0f) + "'", float90 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int22 = aDTFraction21.denominator();
        float float23 = aDTFraction21.value();
        float float24 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        boolean boolean34 = aDTFraction30.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction30.times((int) (byte) 100);
        java.lang.String str37 = aDTFraction30.toString();
        int int38 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction30.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction49);
        int int53 = aDTFraction49.numerator();
        int int54 = aDTFraction49.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        boolean boolean66 = aDTFraction60.equals((java.lang.Object) "");
        float float67 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction49.times(aDTFraction60);
        boolean boolean69 = aDTFraction40.equals((java.lang.Object) aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction72.plus(aDTFraction75);
        int int78 = aDTFraction72.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction72.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float89 = aDTFraction88.value();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction85.plus(aDTFraction88);
        int int91 = aDTFraction85.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction81.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction40.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction21.plus(aDTFraction93);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction94.times((int) (byte) 0);
        float float97 = aDTFraction94.value();
        int int98 = aDTFraction94.numerator();
        boolean boolean99 = aDTFraction18.equals((java.lang.Object) int98);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0/-1" + "'", str37, "0/-1");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-0.0f) + "'", float89 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + float97 + "' != '" + (-0.0f) + "'", float97 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) (short) 10);
        int int3 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        java.lang.Class<?> wildcardClass14 = aDTFraction5.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction88.times((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction92);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction22.times((int) (byte) 100);
        java.lang.String str29 = aDTFraction22.toString();
        int int30 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction22.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction8.times(aDTFraction32);
        java.lang.String str34 = aDTFraction8.toString();
        java.lang.String str35 = aDTFraction8.toString();
        java.lang.Class<?> wildcardClass36 = aDTFraction8.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times(aDTFraction28);
        java.lang.String str30 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), (-10));
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction28.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        int int43 = aDTFraction37.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction37.times((int) '#');
        int int46 = aDTFraction37.numerator();
        java.lang.String str47 = aDTFraction37.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str51 = aDTFraction50.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction65.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction62.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int75 = aDTFraction74.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction62.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction59.times(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float87 = aDTFraction86.value();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction83.plus(aDTFraction86);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction80.times(aDTFraction86);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction77.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction77.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction50.times(aDTFraction77);
        boolean boolean94 = aDTFraction37.equals((java.lang.Object) aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction33.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass96 = aDTFraction95.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/10" + "'", str30, "0/10");
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + (-0.0f) + "'", float87 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, 32);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        int int9 = aDTFraction7.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction15.reciprocal();
        java.lang.String str17 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction12.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction7.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction27.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction7.times(aDTFraction45);
        int int47 = aDTFraction7.numerator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "100/100" + "'", str17, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        int int16 = aDTFraction12.numerator();
        java.lang.String str17 = aDTFraction12.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction3.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction18.times((int) (short) 0);
        java.lang.String str21 = aDTFraction20.toString();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-10" + "'", str21, "0/-10");
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction43.reciprocal();
        float float45 = aDTFraction44.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 1.0f + "'", float45 == 1.0f);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int53 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction40.times(aDTFraction52);
        java.lang.String str55 = aDTFraction52.toString();
        boolean boolean56 = aDTFraction37.equals((java.lang.Object) str55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction59.reciprocal();
        int int61 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction59.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction37.times(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100/100" + "'", str55, "100/100");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        boolean boolean46 = aDTFraction38.equals((java.lang.Object) aDTFraction44);
        java.lang.String str47 = aDTFraction44.toString();
        java.lang.String str48 = aDTFraction44.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction44.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction56.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        boolean boolean70 = aDTFraction62.equals((java.lang.Object) aDTFraction68);
        java.lang.String str71 = aDTFraction68.toString();
        java.lang.String str72 = aDTFraction68.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction68.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction44.plus(aDTFraction74);
        float float76 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction79.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction44.plus(aDTFraction79);
        boolean boolean83 = aDTFraction28.equals((java.lang.Object) aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction86.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction87.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction89.times(0);
        int int92 = aDTFraction91.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction28.times(aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int97 = aDTFraction96.denominator();
        float float98 = aDTFraction96.value();
        com.thealgorithms.maths.ADTFraction aDTFraction99 = aDTFraction93.times(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0/-1" + "'", str72, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + float98 + "' != '" + (-0.0f) + "'", float98 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction99);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, 9700);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction10.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction10.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction43.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int56 = aDTFraction55.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction43.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction40.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        boolean boolean68 = aDTFraction64.equals((java.lang.Object) ' ');
        boolean boolean70 = aDTFraction64.equals((java.lang.Object) "");
        java.lang.String str71 = aDTFraction64.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction58.times(aDTFraction64);
        float float73 = aDTFraction72.value();
        java.lang.String str74 = aDTFraction72.toString();
        java.lang.String str75 = aDTFraction72.toString();
        boolean boolean76 = aDTFraction32.equals((java.lang.Object) str75);
        java.lang.String str77 = aDTFraction32.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction2.times(aDTFraction32);
        float float79 = aDTFraction78.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction78.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-100" + "'", str74, "0/-100");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-100" + "'", str75, "0/-100");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0/1" + "'", str77, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 0.0f + "'", float79 == 0.0f);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        boolean boolean25 = aDTFraction19.equals((java.lang.Object) "");
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction5.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int53 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction40.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction37.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        boolean boolean65 = aDTFraction61.equals((java.lang.Object) ' ');
        boolean boolean67 = aDTFraction61.equals((java.lang.Object) "");
        java.lang.String str68 = aDTFraction61.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction61);
        float float70 = aDTFraction69.value();
        java.lang.String str71 = aDTFraction69.toString();
        int int72 = aDTFraction69.denominator();
        int int73 = aDTFraction69.numerator();
        int int74 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        int int83 = aDTFraction77.numerator();
        boolean boolean85 = aDTFraction77.equals((java.lang.Object) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction69.plus(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction28.times(aDTFraction69);
        int int88 = aDTFraction87.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0/-1" + "'", str68, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-100" + "'", str71, "0/-100");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-100) + "'", int72 == (-100));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-100) + "'", int74 == (-100));
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        boolean boolean18 = aDTFraction14.equals((java.lang.Object) ' ');
        boolean boolean20 = aDTFraction14.equals((java.lang.Object) "");
        float float21 = aDTFraction14.value();
        java.lang.String str22 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        boolean boolean32 = aDTFraction28.equals((java.lang.Object) ' ');
        boolean boolean34 = aDTFraction28.equals((java.lang.Object) "");
        float float35 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction14.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction37.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction5.times(aDTFraction40);
        int int42 = aDTFraction5.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0/-1" + "'", str22, "0/-1");
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) ' ', 97);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        int int17 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction11.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        float float32 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction11.plus(aDTFraction25);
        int int34 = aDTFraction11.numerator();
        java.lang.String str35 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction8.plus(aDTFraction11);
        int int37 = aDTFraction11.numerator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int58 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction45.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction59);
        int int61 = aDTFraction59.denominator();
        boolean boolean62 = aDTFraction34.equals((java.lang.Object) aDTFraction59);
        int int63 = aDTFraction34.numerator();
        float float64 = aDTFraction34.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-1.0f) + "'", float64 == (-1.0f));
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        int int42 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        boolean boolean52 = aDTFraction48.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction48.times((int) (byte) 100);
        java.lang.String str55 = aDTFraction48.toString();
        int int56 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction48.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction27.plus(aDTFraction58);
        boolean boolean60 = aDTFraction2.equals((java.lang.Object) aDTFraction58);
        int int61 = aDTFraction58.numerator();
        java.lang.String str62 = aDTFraction58.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0/-1" + "'", str62, "0/-1");
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        int int14 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction8.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        int int27 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction17.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        boolean boolean45 = aDTFraction37.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction48.equals((java.lang.Object) 10);
        boolean boolean56 = aDTFraction43.equals((java.lang.Object) aDTFraction48);
        boolean boolean57 = aDTFraction21.equals((java.lang.Object) boolean56);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction2.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction58.plus(aDTFraction59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        boolean boolean68 = aDTFraction60.equals((java.lang.Object) aDTFraction66);
        java.lang.String str69 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction51.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction8.times(aDTFraction51);
        int int73 = aDTFraction8.numerator();
        java.lang.Class<?> wildcardClass74 = aDTFraction8.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (byte) 100);
        float float11 = aDTFraction2.value();
        int int12 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction2.times(aDTFraction13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100/100" + "'", str7, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.10309278f + "'", float11 == 0.10309278f);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        int int18 = aDTFraction12.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction8.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        int int35 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction22.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction36.times(0);
        int int39 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction19.times(aDTFraction38);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction40.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(aDTFraction40);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        int int28 = aDTFraction11.numerator();
        java.lang.String str29 = aDTFraction11.toString();
        java.lang.String str30 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction33.reciprocal();
        java.lang.String str35 = aDTFraction33.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction11.times(aDTFraction33);
        float float37 = aDTFraction33.value();
        java.lang.Class<?> wildcardClass38 = aDTFraction33.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "100/100" + "'", str35, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 1.0f + "'", float37 == 1.0f);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int20 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction7.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction7.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction28.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction7.times(aDTFraction43);
        boolean boolean45 = aDTFraction2.equals((java.lang.Object) aDTFraction44);
        java.lang.Class<?> wildcardClass46 = aDTFraction44.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int20 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction7.times(aDTFraction19);
        int int22 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        boolean boolean32 = aDTFraction28.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction28.times((int) (byte) 100);
        java.lang.String str35 = aDTFraction28.toString();
        int int36 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction28.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.plus(aDTFraction38);
        int int40 = aDTFraction38.denominator();
        int int41 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        int int50 = aDTFraction44.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction44.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction38.times(aDTFraction54);
        boolean boolean56 = aDTFraction2.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction38.times((int) (byte) 10);
        java.lang.Class<?> wildcardClass59 = aDTFraction58.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-1.0f) + "'", float4 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        int int26 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        java.lang.String str35 = aDTFraction29.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (byte) 100);
        java.lang.String str48 = aDTFraction41.toString();
        int int49 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction41.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction29.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction24.times(aDTFraction52);
        java.lang.Class<?> wildcardClass54 = aDTFraction24.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        java.lang.Class<?> wildcardClass4 = aDTFraction2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction16.times((int) (byte) -1);
        java.lang.String str20 = aDTFraction16.toString();
        java.lang.Class<?> wildcardClass21 = aDTFraction16.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/10" + "'", str20, "0/10");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.plus(aDTFraction30);
        int int33 = aDTFraction5.denominator();
        java.lang.String str34 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction40.plus(aDTFraction54);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.plus(aDTFraction55);
        boolean boolean59 = aDTFraction5.equals((java.lang.Object) "-1/-52");
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction5.times((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction61.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(aDTFraction61);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        java.lang.String str9 = aDTFraction8.toString();
        java.lang.Object obj10 = null;
        boolean boolean11 = aDTFraction8.equals(obj10);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction22.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction17.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction32.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int58 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction45.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        boolean boolean70 = aDTFraction66.equals((java.lang.Object) ' ');
        boolean boolean72 = aDTFraction66.equals((java.lang.Object) "");
        java.lang.String str73 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction60.times(aDTFraction66);
        float float75 = aDTFraction74.value();
        java.lang.String str76 = aDTFraction74.toString();
        int int77 = aDTFraction74.denominator();
        boolean boolean78 = aDTFraction32.equals((java.lang.Object) int77);
        int int79 = aDTFraction32.denominator();
        boolean boolean80 = aDTFraction8.equals((java.lang.Object) int79);
        int int81 = aDTFraction8.numerator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-100/-100" + "'", str9, "-100/-100");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0/-1" + "'", str73, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/-100" + "'", str76, "0/-100");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-100) + "'", int77 == (-100));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-100) + "'", int81 == (-100));
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction46.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction52.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction53.times(52);
        float float56 = aDTFraction55.value();
        boolean boolean57 = aDTFraction46.equals((java.lang.Object) aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction55.plus(aDTFraction58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 166.4f + "'", float56 == 166.4f);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction33.times(aDTFraction49);
        int int51 = aDTFraction50.numerator();
        java.lang.Class<?> wildcardClass52 = aDTFraction50.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        int int12 = aDTFraction6.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction6.times((int) '#');
        int int15 = aDTFraction6.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.String str37 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction24.plus(aDTFraction31);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        int int48 = aDTFraction42.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction42.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction56.times((int) (byte) 100);
        float float63 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction42.plus(aDTFraction56);
        int int65 = aDTFraction42.numerator();
        java.lang.String str66 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction38.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction6.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction6.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction2.plus(aDTFraction70);
        int int72 = aDTFraction70.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0/-1" + "'", str37, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        int int15 = aDTFraction5.denominator();
        java.lang.String str16 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction22.times(aDTFraction28);
        int int32 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction5.times(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        int int16 = aDTFraction12.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.String str25 = aDTFraction19.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        int int42 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction29.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction12.times(aDTFraction29);
        java.lang.String str45 = aDTFraction12.toString();
        float float46 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.times(aDTFraction12);
        int int48 = aDTFraction12.denominator();
        java.lang.String str49 = aDTFraction12.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction12.times(aDTFraction50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/10" + "'", str3, "-1/10");
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0/-1" + "'", str25, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        int int19 = aDTFraction13.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction13.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        float float34 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction13.plus(aDTFraction27);
        boolean boolean36 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        java.lang.Object obj37 = null;
        boolean boolean38 = aDTFraction27.equals(obj37);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction44.times((int) 'a');
        boolean boolean49 = aDTFraction27.equals((java.lang.Object) 'a');
        int int50 = aDTFraction27.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.times(9700);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        java.lang.String str20 = aDTFraction16.toString();
        int int21 = aDTFraction16.denominator();
        boolean boolean22 = aDTFraction2.equals((java.lang.Object) int21);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-1.0f) + "'", float5 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int3 = aDTFraction2.denominator();
        int int4 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        float float10 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction5.times(aDTFraction18);
        float float20 = aDTFraction19.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction42);
        float float44 = aDTFraction42.value();
        java.lang.Class<?> wildcardClass45 = aDTFraction42.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 1.0f + "'", float44 == 1.0f);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 35);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass37 = aDTFraction34.getClass();
        boolean boolean38 = aDTFraction14.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int78 = aDTFraction77.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction65.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction62.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction54.plus(aDTFraction62);
        java.lang.String str82 = aDTFraction62.toString();
        int int83 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction62.times(10);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0/1" + "'", str82, "0/1");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(aDTFraction85);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        float float14 = aDTFraction5.value();
        int int15 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction21.times((int) (byte) 100);
        java.lang.String str28 = aDTFraction21.toString();
        int int29 = aDTFraction21.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction21.times((int) ' ');
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        boolean boolean42 = aDTFraction38.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (byte) 100);
        java.lang.String str45 = aDTFraction38.toString();
        int int46 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int62 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction49.times(aDTFraction61);
        int int64 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        boolean boolean74 = aDTFraction70.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction70.times((int) (byte) 100);
        java.lang.String str77 = aDTFraction70.toString();
        int int78 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction70.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction49.plus(aDTFraction80);
        int int82 = aDTFraction80.denominator();
        boolean boolean84 = aDTFraction80.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction38.times(aDTFraction80);
        boolean boolean86 = aDTFraction31.equals((java.lang.Object) aDTFraction85);
        int int87 = aDTFraction85.numerator();
        boolean boolean88 = aDTFraction5.equals((java.lang.Object) int87);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = new com.thealgorithms.maths.ADTFraction(1, (int) (byte) 100);
        java.lang.String str92 = aDTFraction91.toString();
        float float93 = aDTFraction91.value();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction5.times(aDTFraction91);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction94.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0/-1" + "'", str77, "0/-1");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1/100" + "'", str92, "1/100");
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + 0.01f + "'", float93 == 0.01f);
        org.junit.Assert.assertNotNull(aDTFraction94);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        int int32 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction26.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        float float47 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction26.plus(aDTFraction40);
        int int49 = aDTFraction26.numerator();
        java.lang.String str50 = aDTFraction26.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction22.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        boolean boolean68 = aDTFraction60.equals((java.lang.Object) aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        boolean boolean78 = aDTFraction71.equals((java.lang.Object) 10);
        boolean boolean79 = aDTFraction66.equals((java.lang.Object) aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction22.plus(aDTFraction71);
        java.lang.Class<?> wildcardClass81 = aDTFraction80.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        java.lang.String str23 = aDTFraction22.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction44.times((int) (byte) 10);
        java.lang.Object obj47 = new java.lang.Object();
        boolean boolean48 = aDTFraction46.equals(obj47);
        float float49 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.times(10000);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction22.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction63.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int76 = aDTFraction75.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction63.times(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction60.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        boolean boolean83 = aDTFraction78.equals((java.lang.Object) float82);
        int int84 = aDTFraction78.numerator();
        boolean boolean85 = aDTFraction22.equals((java.lang.Object) int84);
        java.lang.Class<?> wildcardClass86 = aDTFraction22.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/1" + "'", str23, "0/1");
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        java.lang.Class<?> wildcardClass21 = aDTFraction20.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        int int19 = aDTFraction13.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction13.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        float float34 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction13.plus(aDTFraction27);
        boolean boolean36 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        java.lang.Object obj37 = null;
        boolean boolean38 = aDTFraction27.equals(obj37);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean43 = aDTFraction41.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction27.plus(aDTFraction41);
        java.lang.String str46 = aDTFraction45.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1/-10" + "'", str46, "1/-10");
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        float float6 = aDTFraction2.value();
        int int7 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        float float19 = aDTFraction14.value();
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction14.plus(aDTFraction45);
        java.lang.String str48 = aDTFraction45.toString();
        float float49 = aDTFraction45.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-100/100" + "'", str48, "-100/100");
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-1.0f) + "'", float49 == (-1.0f));
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction25.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction25.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction40.times((int) (byte) 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int59 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction46.times(aDTFraction58);
        int int61 = aDTFraction46.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction46.reciprocal();
        int int63 = aDTFraction62.denominator();
        java.lang.Class<?> wildcardClass64 = aDTFraction62.getClass();
        boolean boolean65 = aDTFraction42.equals((java.lang.Object) wildcardClass64);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction22.times((int) (byte) 100);
        java.lang.String str29 = aDTFraction22.toString();
        int int30 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction22.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction8.times(aDTFraction32);
        java.lang.Class<?> wildcardClass34 = aDTFraction8.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        int int11 = aDTFraction2.numerator();
        java.lang.String str12 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str16 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction42.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction42.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction15.times(aDTFraction42);
        boolean boolean59 = aDTFraction2.equals((java.lang.Object) aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str63 = aDTFraction62.toString();
        float float64 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction42.plus(aDTFraction62);
        java.lang.Class<?> wildcardClass66 = aDTFraction42.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1/1" + "'", str63, "-1/1");
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-1.0f) + "'", float64 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction9.denominator();
        java.lang.String str11 = aDTFraction9.toString();
        int int12 = aDTFraction9.denominator();
        int int13 = aDTFraction9.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        java.lang.String str18 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction22.times(aDTFraction28);
        int int32 = aDTFraction28.numerator();
        int int33 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        boolean boolean43 = aDTFraction39.equals((java.lang.Object) ' ');
        boolean boolean45 = aDTFraction39.equals((java.lang.Object) "");
        float float46 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction28.times(aDTFraction39);
        int int48 = aDTFraction47.numerator();
        int int49 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction2.times(aDTFraction47);
        int int51 = aDTFraction47.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1/1" + "'", str18, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        int int45 = aDTFraction15.numerator();
        int int46 = aDTFraction15.numerator();
        float float47 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction58.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int71 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction58.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction55.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction76.plus(aDTFraction79);
        boolean boolean83 = aDTFraction79.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction79.times((int) (byte) 100);
        java.lang.String str86 = aDTFraction79.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction55.times(aDTFraction79);
        int int88 = aDTFraction87.denominator();
        int int89 = aDTFraction87.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction15.plus(aDTFraction87);
        java.lang.String str91 = aDTFraction90.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0/1" + "'", str91, "0/1");
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        java.lang.String str17 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        boolean boolean28 = aDTFraction25.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction25.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        boolean boolean43 = aDTFraction39.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction39.times((int) (byte) 100);
        float float46 = aDTFraction39.value();
        boolean boolean47 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction53.times((int) (byte) 100);
        java.lang.String str60 = aDTFraction53.toString();
        int int61 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction39.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction22.times(aDTFraction64);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction65.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        int int25 = aDTFraction2.numerator();
        java.lang.String str26 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        java.lang.String str39 = aDTFraction32.toString();
        int int40 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction32.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction32.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        boolean boolean54 = aDTFraction50.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction50.times((int) (byte) 100);
        java.lang.String str57 = aDTFraction50.toString();
        int int58 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction50.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction63.times(aDTFraction69);
        int int73 = aDTFraction69.numerator();
        int int74 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        boolean boolean84 = aDTFraction80.equals((java.lang.Object) ' ');
        boolean boolean86 = aDTFraction80.equals((java.lang.Object) "");
        float float87 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction69.times(aDTFraction80);
        boolean boolean89 = aDTFraction60.equals((java.lang.Object) aDTFraction69);
        boolean boolean90 = aDTFraction44.equals((java.lang.Object) aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction2.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = new com.thealgorithms.maths.ADTFraction(1, (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction91.plus(aDTFraction94);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + (-0.0f) + "'", float87 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction95);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        java.lang.String str28 = aDTFraction11.toString();
        int int29 = aDTFraction11.numerator();
        int int30 = aDTFraction11.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction11.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        java.lang.Class<?> wildcardClass23 = aDTFraction20.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        float float19 = aDTFraction14.value();
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction14.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        java.lang.String str52 = aDTFraction50.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction50.plus(aDTFraction55);
        boolean boolean57 = aDTFraction14.equals((java.lang.Object) aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(100, (int) '4');
        boolean boolean61 = aDTFraction14.equals((java.lang.Object) aDTFraction60);
        int int62 = aDTFraction14.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        int int4 = aDTFraction2.denominator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        int int13 = aDTFraction12.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction24.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction21.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        java.lang.String str52 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction39.times(aDTFraction45);
        float float54 = aDTFraction53.value();
        java.lang.String str55 = aDTFraction53.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction12.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction56.times((-100));
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-100" + "'", str55, "0/-100");
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction58);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        java.lang.String str11 = aDTFraction9.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction9.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction18.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        float float39 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction18.plus(aDTFraction32);
        int int41 = aDTFraction18.numerator();
        java.lang.String str42 = aDTFraction18.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction18.times((int) ' ');
        boolean boolean46 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction57.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int70 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction57.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction54.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        boolean boolean82 = aDTFraction78.equals((java.lang.Object) ' ');
        boolean boolean84 = aDTFraction78.equals((java.lang.Object) "");
        java.lang.String str85 = aDTFraction78.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction72.times(aDTFraction89);
        int int91 = aDTFraction89.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str95 = aDTFraction94.toString();
        int int96 = aDTFraction94.denominator();
        boolean boolean97 = aDTFraction89.equals((java.lang.Object) aDTFraction94);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction5.times(aDTFraction89);
        int int99 = aDTFraction89.denominator();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0/-1" + "'", str85, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "-1/1" + "'", str95, "-1/1");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 100 + "'", int99 == 100);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        int int12 = aDTFraction6.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction6.times((int) '#');
        int int15 = aDTFraction6.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.String str37 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction24.plus(aDTFraction31);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        int int48 = aDTFraction42.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction42.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction56.times((int) (byte) 100);
        float float63 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction42.plus(aDTFraction56);
        int int65 = aDTFraction42.numerator();
        java.lang.String str66 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction38.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction6.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction6.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction2.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (short) -1);
        boolean boolean75 = aDTFraction2.equals((java.lang.Object) (byte) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0/-1" + "'", str37, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10), (int) (byte) 10);
        int int3 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        float float10 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction21.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int34 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction18.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction18.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction8.times(aDTFraction18);
        int int40 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction5.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        boolean boolean53 = aDTFraction47.equals((java.lang.Object) "");
        float float54 = aDTFraction47.value();
        boolean boolean55 = aDTFraction5.equals((java.lang.Object) aDTFraction47);
        int int56 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction5.times(aDTFraction57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int58 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction45.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction59);
        int int61 = aDTFraction59.denominator();
        boolean boolean62 = aDTFraction34.equals((java.lang.Object) aDTFraction59);
        int int63 = aDTFraction59.numerator();
        java.lang.String str64 = aDTFraction59.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-100) + "'", int63 == (-100));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-100/100" + "'", str64, "-100/100");
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        java.lang.String str28 = aDTFraction27.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/1" + "'", str28, "0/1");
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction2.times(aDTFraction91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        java.lang.Class<?> wildcardClass45 = aDTFraction24.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        boolean boolean28 = aDTFraction25.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction25.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        boolean boolean43 = aDTFraction39.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction39.times((int) (byte) 100);
        float float46 = aDTFraction39.value();
        boolean boolean47 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction53.times((int) (byte) 100);
        java.lang.String str60 = aDTFraction53.toString();
        int int61 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction39.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction22.times(aDTFraction64);
        int int66 = aDTFraction65.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (byte) 1);
        boolean boolean70 = aDTFraction65.equals((java.lang.Object) (byte) 1);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        int int10 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.times((int) 'a');
        float float21 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        java.lang.String str43 = aDTFraction37.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.plus(aDTFraction37);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction44.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction16.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction58.times(aDTFraction64);
        int int68 = aDTFraction64.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction72.plus(aDTFraction75);
        java.lang.Class<?> wildcardClass78 = aDTFraction75.getClass();
        boolean boolean79 = aDTFraction55.equals((java.lang.Object) aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        boolean boolean89 = aDTFraction85.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction85.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction75.times(aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction91.plus(aDTFraction95);
        boolean boolean97 = aDTFraction47.equals((java.lang.Object) aDTFraction95);
        int int98 = aDTFraction95.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction99 = aDTFraction8.plus(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 0.0f + "'", float45 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 52 + "'", int98 == 52);
        org.junit.Assert.assertNotNull(aDTFraction99);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        int int52 = aDTFraction45.denominator();
        java.lang.String str53 = aDTFraction45.toString();
        java.lang.String str54 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction22.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction55.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction65.times(100);
        int int86 = aDTFraction85.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction55.plus(aDTFraction85);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction55.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(aDTFraction87);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction29.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction31.times((int) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction33.times(aDTFraction34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction33);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (-100));
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        int int13 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction24.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction21.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction45.times((int) (byte) 100);
        java.lang.String str52 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction21.times(aDTFraction45);
        int int54 = aDTFraction21.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction8.plus(aDTFraction21);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction21.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(aDTFraction55);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-100), (int) (short) -1);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        int int19 = aDTFraction18.denominator();
        float float20 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction46.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction18.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        int int64 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction65.times(0);
        java.lang.Class<?> wildcardClass68 = aDTFraction67.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(0);
        int int71 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction70.times(1664);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction70.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction73);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction25.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction25.times((int) (short) 1);
        java.lang.String str41 = aDTFraction40.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/100" + "'", str41, "0/100");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction44.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction14.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction46.times((-10));
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction49);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        int int19 = aDTFraction13.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction13.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        float float34 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction13.plus(aDTFraction27);
        boolean boolean36 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        float float37 = aDTFraction27.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction27.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (byte) 100);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        int int52 = aDTFraction45.denominator();
        java.lang.String str53 = aDTFraction45.toString();
        java.lang.String str54 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction22.plus(aDTFraction45);
        java.lang.String str56 = aDTFraction45.toString();
        int int57 = aDTFraction45.numerator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0/-1" + "'", str56, "0/-1");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        java.lang.String str20 = aDTFraction17.toString();
        java.lang.String str21 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction17.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction60.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int73 = aDTFraction72.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction60.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction57.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        boolean boolean85 = aDTFraction81.equals((java.lang.Object) ' ');
        boolean boolean87 = aDTFraction81.equals((java.lang.Object) "");
        java.lang.String str88 = aDTFraction81.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction75.times(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction75.times(aDTFraction92);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction17.times(aDTFraction75);
        java.lang.Class<?> wildcardClass95 = aDTFraction94.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "0/-1" + "'", str88, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        java.lang.String str20 = aDTFraction17.toString();
        java.lang.String str21 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction17.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(aDTFraction17);
        float float50 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        boolean boolean15 = aDTFraction11.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction11.times((int) (byte) 100);
        java.lang.String str18 = aDTFraction11.toString();
        int int19 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        int int35 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        boolean boolean47 = aDTFraction41.equals((java.lang.Object) "");
        float float48 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction30.times(aDTFraction41);
        boolean boolean50 = aDTFraction21.equals((java.lang.Object) aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction62.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction21.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction2.plus(aDTFraction74);
        int int76 = aDTFraction2.denominator();
        java.lang.String str77 = aDTFraction2.toString();
        float float78 = aDTFraction2.value();
        java.lang.String str79 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0/-1" + "'", str77, "0/-1");
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0/-1" + "'", str79, "0/-1");
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction40.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction41.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction5.times(aDTFraction43);
        int int45 = aDTFraction43.denominator();
        java.lang.Class<?> wildcardClass46 = aDTFraction43.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) (byte) 1);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(35, (-10000));
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        float float91 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction94.reciprocal();
        java.lang.String str96 = aDTFraction95.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction95.times((int) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction99 = aDTFraction2.plus(aDTFraction95);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + 1.0f + "'", float91 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "-1/100" + "'", str96, "-1/100");
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertNotNull(aDTFraction99);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction5.times(0);
        int int8 = aDTFraction7.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction7.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction33.times(aDTFraction49);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction49.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) ' ', (-100));
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        java.lang.String str10 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        int int29 = aDTFraction25.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        java.lang.Class<?> wildcardClass39 = aDTFraction36.getClass();
        boolean boolean40 = aDTFraction16.equals((java.lang.Object) aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        boolean boolean50 = aDTFraction46.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction46.times((int) (byte) 100);
        java.lang.String str53 = aDTFraction46.toString();
        int int54 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction36.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction55.times(52);
        boolean boolean58 = aDTFraction13.equals((java.lang.Object) aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction72.plus(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction69.times(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int82 = aDTFraction81.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction69.times(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction66.times(aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction66.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction66.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction88.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction13.times(aDTFraction90);
        boolean boolean92 = aDTFraction5.equals((java.lang.Object) aDTFraction13);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0/-1" + "'", str10, "0/-1");
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        boolean boolean23 = aDTFraction15.equals((java.lang.Object) aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int39 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction26.times(aDTFraction38);
        int int41 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction26.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction21.plus(aDTFraction57);
        float float60 = aDTFraction59.value();
        int int61 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction59.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction2.plus(aDTFraction59);
        java.lang.Class<?> wildcardClass65 = aDTFraction2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 0.0f + "'", float60 == 0.0f);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        int int4 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        boolean boolean14 = aDTFraction10.equals((java.lang.Object) ' ');
        boolean boolean16 = aDTFraction10.equals((java.lang.Object) "");
        int int17 = aDTFraction10.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        boolean boolean34 = aDTFraction26.equals((java.lang.Object) aDTFraction32);
        java.lang.String str35 = aDTFraction32.toString();
        java.lang.String str36 = aDTFraction32.toString();
        float float37 = aDTFraction32.value();
        boolean boolean38 = aDTFraction10.equals((java.lang.Object) float37);
        int int39 = aDTFraction10.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction10.times((-100));
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction2.plus(aDTFraction41);
        java.lang.Class<?> wildcardClass44 = aDTFraction41.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, 10000);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        java.lang.String str23 = aDTFraction15.toString();
        float float24 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-10), 1);
        boolean boolean28 = aDTFraction15.equals((java.lang.Object) 1);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (-52));
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = aDTFraction22.equals(obj23);
        float float25 = aDTFraction22.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction22.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(97, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        java.lang.String str69 = aDTFraction68.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/1" + "'", str69, "0/1");
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        float float16 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction14.reciprocal();
        boolean boolean18 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction11.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 1.0f + "'", float16 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        int int34 = aDTFraction33.numerator();
        int int35 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction33.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), (int) 'a');
        boolean boolean41 = aDTFraction33.equals((java.lang.Object) 'a');
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int58 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction45.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction59);
        int int61 = aDTFraction59.denominator();
        boolean boolean62 = aDTFraction34.equals((java.lang.Object) aDTFraction59);
        int int63 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int69 = aDTFraction68.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction68.reciprocal();
        int int71 = aDTFraction68.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        int int80 = aDTFraction74.numerator();
        boolean boolean82 = aDTFraction74.equals((java.lang.Object) (short) 1);
        java.lang.String str83 = aDTFraction74.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction74.times((int) 'a');
        boolean boolean86 = aDTFraction68.equals((java.lang.Object) aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction59.plus(aDTFraction85);
        java.lang.Class<?> wildcardClass88 = aDTFraction87.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-100) + "'", int63 == (-100));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0/-1" + "'", str83, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction18.times((int) '#');
        float float21 = aDTFraction18.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        int int36 = aDTFraction32.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction32.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction20.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction32.times(0);
        java.lang.String str43 = aDTFraction42.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        int int5 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        int int15 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction9.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        float float30 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction9.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction31.times(52);
        boolean boolean34 = aDTFraction2.equals((java.lang.Object) 52);
        java.lang.String str35 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "100/100" + "'", str35, "100/100");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        boolean boolean30 = aDTFraction17.equals((java.lang.Object) aDTFraction29);
        java.lang.Class<?> wildcardClass31 = aDTFraction17.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        java.lang.String str28 = aDTFraction11.toString();
        int int29 = aDTFraction11.numerator();
        int int30 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        boolean boolean43 = aDTFraction39.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction39.times((int) (byte) 100);
        float float46 = aDTFraction39.value();
        boolean boolean47 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction53.times((int) (byte) 100);
        java.lang.String str60 = aDTFraction53.toString();
        int int61 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction39.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction11.plus(aDTFraction63);
        int int66 = aDTFraction11.denominator();
        int int67 = aDTFraction11.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        int int91 = aDTFraction90.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3200 + "'", int91 == 3200);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        int int19 = aDTFraction13.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction13.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        float float34 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction13.plus(aDTFraction27);
        boolean boolean36 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        float float37 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        int int50 = aDTFraction40.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean55 = aDTFraction53.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction58.times(aDTFraction64);
        int int68 = aDTFraction58.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction71.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float84 = aDTFraction83.value();
        boolean boolean85 = aDTFraction77.equals((java.lang.Object) aDTFraction83);
        java.lang.String str86 = aDTFraction83.toString();
        java.lang.String str87 = aDTFraction83.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float91 = aDTFraction90.value();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction83.times(aDTFraction90);
        boolean boolean93 = aDTFraction58.equals((java.lang.Object) aDTFraction92);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction53.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction40.times(aDTFraction94);
        boolean boolean96 = aDTFraction27.equals((java.lang.Object) aDTFraction95);
        float float97 = aDTFraction27.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + (-0.0f) + "'", float84 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0/-1" + "'", str87, "0/-1");
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + (-0.0f) + "'", float91 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + float97 + "' != '" + (-0.0f) + "'", float97 == (-0.0f));
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        java.lang.String str23 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.times((int) (byte) -1);
        float float26 = aDTFraction25.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        java.lang.String str23 = aDTFraction22.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction22.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/1" + "'", str23, "0/1");
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction12.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str39 = aDTFraction38.toString();
        int int40 = aDTFraction38.denominator();
        boolean boolean41 = aDTFraction12.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction12.times(3200);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1/1" + "'", str39, "-1/1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        int int18 = aDTFraction12.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction8.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        int int35 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction22.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction36.times(0);
        int int39 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction19.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction38.times(aDTFraction41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(aDTFraction40);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (int) (byte) 10);
        int int3 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        boolean boolean26 = aDTFraction18.equals((java.lang.Object) aDTFraction24);
        java.lang.String str27 = aDTFraction24.toString();
        java.lang.String str28 = aDTFraction24.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction24.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction33.reciprocal();
        int int49 = aDTFraction48.numerator();
        float float50 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction30.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction2.times(aDTFraction48);
        java.lang.String str53 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        int int69 = aDTFraction65.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(aDTFraction65);
        int int71 = aDTFraction65.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float88 = aDTFraction87.value();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction84.plus(aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction81.times(aDTFraction87);
        int int91 = aDTFraction87.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction78.times(aDTFraction87);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction87.times((int) (byte) 0);
        int int95 = aDTFraction94.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction74.times(aDTFraction94);
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction65.plus(aDTFraction94);
        int int98 = aDTFraction94.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction99 = aDTFraction48.plus(aDTFraction94);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-1.0f) + "'", float50 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1/-1" + "'", str53, "1/-1");
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-1.0f) + "'", float75 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + (-0.0f) + "'", float88 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction99);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        float float19 = aDTFraction14.value();
        int int20 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction23.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction24.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean30 = aDTFraction26.equals((java.lang.Object) aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        int int39 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction29.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction14.times(aDTFraction29);
        java.lang.Class<?> wildcardClass42 = aDTFraction14.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, 35);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction33.times(aDTFraction49);
        int int51 = aDTFraction49.denominator();
        java.lang.String str52 = aDTFraction49.toString();
        int int53 = aDTFraction49.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction49.times(aDTFraction54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/1" + "'", str52, "0/1");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(20000, 1664);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        int int45 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        java.lang.String str54 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.plus(aDTFraction48);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction32.plus(aDTFraction55);
        int int60 = aDTFraction55.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction55.times((int) (short) 1);
        java.lang.Class<?> wildcardClass63 = aDTFraction62.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction33.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction48.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction30.plus(aDTFraction48);
        java.lang.Class<?> wildcardClass51 = aDTFraction50.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        boolean boolean26 = aDTFraction18.equals((java.lang.Object) aDTFraction24);
        java.lang.String str27 = aDTFraction24.toString();
        java.lang.String str28 = aDTFraction24.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction24.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction33.reciprocal();
        int int49 = aDTFraction48.numerator();
        float float50 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction30.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction2.times(aDTFraction48);
        java.lang.String str53 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction64.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int77 = aDTFraction76.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction64.times(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction61.times(aDTFraction78);
        float float80 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction48.plus(aDTFraction61);
        java.lang.String str82 = aDTFraction61.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-1.0f) + "'", float50 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1/-1" + "'", str53, "1/-1");
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + 0.0f + "'", float80 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0/1" + "'", str82, "0/1");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction68.times((int) (byte) 100);
        java.lang.Class<?> wildcardClass71 = aDTFraction70.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction29.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        int int54 = aDTFraction48.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction48.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        int int65 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction59.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        boolean boolean77 = aDTFraction73.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction73.times((int) (byte) 100);
        float float80 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction59.plus(aDTFraction73);
        boolean boolean82 = aDTFraction48.equals((java.lang.Object) aDTFraction73);
        float float83 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction29.times(aDTFraction48);
        int int85 = aDTFraction29.numerator();
        int int86 = aDTFraction29.denominator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 100 + "'", int86 == 100);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        float float16 = aDTFraction5.value();
        float float17 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        int int33 = aDTFraction29.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction29.times((int) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        boolean boolean42 = aDTFraction39.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction39.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction5.plus(aDTFraction39);
        java.lang.String str46 = aDTFraction39.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100/100" + "'", str46, "100/100");
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        java.lang.String str13 = aDTFraction8.toString();
        int int14 = aDTFraction8.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.times(0);
        java.lang.String str48 = aDTFraction47.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        int int91 = aDTFraction88.numerator();
        java.lang.String str92 = aDTFraction88.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction88.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction94.times((int) (short) -1);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "10/32" + "'", str92, "10/32");
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction96);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10), 32);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        int int44 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction38.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        boolean boolean67 = aDTFraction63.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction63.times((int) (byte) 100);
        float float70 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction49.plus(aDTFraction63);
        boolean boolean72 = aDTFraction38.equals((java.lang.Object) aDTFraction63);
        boolean boolean73 = aDTFraction33.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction38.times(0);
        java.lang.Class<?> wildcardClass76 = aDTFraction38.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        int int9 = aDTFraction7.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        boolean boolean26 = aDTFraction18.equals((java.lang.Object) aDTFraction24);
        boolean boolean28 = aDTFraction24.equals((java.lang.Object) 'a');
        java.lang.String str29 = aDTFraction24.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int53 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction40.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction37.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        boolean boolean65 = aDTFraction61.equals((java.lang.Object) ' ');
        boolean boolean67 = aDTFraction61.equals((java.lang.Object) "");
        java.lang.String str68 = aDTFraction61.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction55.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int77 = aDTFraction76.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.times(aDTFraction76);
        int int79 = aDTFraction76.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction24.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction7.plus(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0/-1" + "'", str68, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 100 + "'", int79 == 100);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) (short) 1);
        int int3 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        int int37 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction31.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction31.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction31);
        java.lang.String str43 = aDTFraction42.toString();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-100" + "'", str43, "0/-100");
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(10);
        java.lang.String str5 = aDTFraction2.toString();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1/1" + "'", str5, "-1/1");
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction12.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction2.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction34.times((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction34.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction37);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction68.times(aDTFraction71);
        float float73 = aDTFraction71.value();
        int int74 = aDTFraction71.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 10.0f + "'", float73 == 10.0f);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        int int34 = aDTFraction33.numerator();
        int int35 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction33.times((int) (short) 10);
        float float38 = aDTFraction37.value();
        int int39 = aDTFraction37.numerator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction14.times(aDTFraction18);
        int int26 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction2.plus(aDTFraction14);
        int int28 = aDTFraction14.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction14.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction11.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int24 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction11.times(aDTFraction23);
        int int26 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        java.lang.String str39 = aDTFraction32.toString();
        int int40 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction32.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction11.plus(aDTFraction42);
        int int44 = aDTFraction42.denominator();
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        int int54 = aDTFraction48.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction48.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction42.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int63 = aDTFraction62.denominator();
        boolean boolean65 = aDTFraction62.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction58.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction8.times(aDTFraction66);
        int int68 = aDTFraction67.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction67.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-10000) + "'", int68 == (-10000));
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction29.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction50.times(aDTFraction56);
        int int60 = aDTFraction56.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        java.lang.String str69 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.plus(aDTFraction63);
        java.lang.String str71 = aDTFraction70.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction74.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int87 = aDTFraction86.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction74.times(aDTFraction86);
        float float89 = aDTFraction74.value();
        float float90 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction70.plus(aDTFraction74);
        float float92 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction2.plus(aDTFraction74);
        float float94 = aDTFraction2.value();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/1" + "'", str71, "0/1");
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + (-1.0f) + "'", float89 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float90 + "' != '" + (-1.0f) + "'", float90 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + (-1.0f) + "'", float92 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + float94 + "' != '" + (-0.0f) + "'", float94 == (-0.0f));
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        float float16 = aDTFraction5.value();
        float float17 = aDTFraction5.value();
        java.lang.String str18 = aDTFraction5.toString();
        java.lang.String str19 = aDTFraction5.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0/-1" + "'", str19, "0/-1");
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        boolean boolean15 = aDTFraction11.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction11.times((int) (byte) 100);
        java.lang.String str18 = aDTFraction11.toString();
        int int19 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        int int35 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        boolean boolean47 = aDTFraction41.equals((java.lang.Object) "");
        float float48 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction30.times(aDTFraction41);
        boolean boolean50 = aDTFraction21.equals((java.lang.Object) aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction62.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction21.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction2.plus(aDTFraction74);
        int int76 = aDTFraction2.numerator();
        int int77 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        float float10 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        int int23 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        java.lang.String str32 = aDTFraction26.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.plus(aDTFraction26);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction33.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        boolean boolean40 = aDTFraction36.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction5.times(aDTFraction36);
        java.lang.Class<?> wildcardClass42 = aDTFraction41.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0/-1" + "'", str32, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(0);
        int int71 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction70.times(1664);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(1, (int) (byte) 100);
        java.lang.String str77 = aDTFraction76.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.times(aDTFraction76);
        float float79 = aDTFraction78.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1/100" + "'", str77, "1/100");
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, 10000);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction11.times(aDTFraction17);
        int int21 = aDTFraction17.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        java.lang.Class<?> wildcardClass31 = aDTFraction28.getClass();
        boolean boolean32 = aDTFraction8.equals((java.lang.Object) aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        boolean boolean42 = aDTFraction38.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (byte) 100);
        java.lang.String str45 = aDTFraction38.toString();
        int int46 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction28.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction47.times(52);
        boolean boolean50 = aDTFraction5.equals((java.lang.Object) aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction2.times(aDTFraction49);
        java.lang.Class<?> wildcardClass52 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = aDTFraction22.equals(obj23);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (-10));
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times((int) '#');
        int int5 = aDTFraction4.denominator();
        int int6 = aDTFraction4.numerator();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-10) + "'", int5 == (-10));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 350 + "'", int6 == 350);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction44.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction14.times(aDTFraction46);
        java.lang.Object obj48 = null;
        boolean boolean49 = aDTFraction46.equals(obj48);
        int int50 = aDTFraction46.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass37 = aDTFraction34.getClass();
        boolean boolean38 = aDTFraction14.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int78 = aDTFraction77.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction65.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction62.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction54.plus(aDTFraction62);
        float float82 = aDTFraction54.value();
        java.lang.String str83 = aDTFraction54.toString();
        int int84 = aDTFraction54.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + 0.0f + "'", float82 == 0.0f);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0/1" + "'", str83, "0/1");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        java.lang.String str49 = aDTFraction48.toString();
        int int50 = aDTFraction48.numerator();
        float float51 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.times(35);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/1000000" + "'", str49, "0/1000000");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction53);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.reciprocal();
        int int39 = aDTFraction38.numerator();
        float float40 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction20.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int45 = aDTFraction44.denominator();
        float float46 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction44.reciprocal();
        int int48 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction41.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction49.times((-1));
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction51.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str57 = aDTFraction56.toString();
        int int58 = aDTFraction56.denominator();
        float float59 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction53.times(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 1.0f + "'", float46 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1/1" + "'", str57, "-1/1");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-1.0f) + "'", float59 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        float float25 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        int int38 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean43 = aDTFraction41.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        int int56 = aDTFraction46.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        boolean boolean73 = aDTFraction65.equals((java.lang.Object) aDTFraction71);
        java.lang.String str74 = aDTFraction71.toString();
        java.lang.String str75 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction71.times(aDTFraction78);
        boolean boolean81 = aDTFraction46.equals((java.lang.Object) aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction41.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction28.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction16.times(aDTFraction82);
        int int85 = aDTFraction82.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-1" + "'", str74, "0/-1");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-1" + "'", str75, "0/-1");
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean17 = aDTFraction15.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int33 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction20.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction41.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction20.times(aDTFraction56);
        boolean boolean58 = aDTFraction15.equals((java.lang.Object) aDTFraction57);
        boolean boolean59 = aDTFraction2.equals((java.lang.Object) aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction2.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int67 = aDTFraction66.denominator();
        float float68 = aDTFraction66.value();
        float float69 = aDTFraction66.value();
        boolean boolean70 = aDTFraction63.equals((java.lang.Object) aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, 100);
        boolean boolean74 = aDTFraction66.equals((java.lang.Object) aDTFraction73);
        float float75 = aDTFraction66.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 1.0f + "'", float68 == 1.0f);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 1.0f + "'", float69 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 1.0f + "'", float75 == 1.0f);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int67 = aDTFraction66.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction54.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction51.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction69.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction69.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction42.times(aDTFraction69);
        java.lang.String str86 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction2.times(aDTFraction42);
        float float88 = aDTFraction2.value();
        int int89 = aDTFraction2.denominator();
        int int90 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + (-1.0f) + "'", float88 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        int int31 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        java.lang.String str44 = aDTFraction37.toString();
        int int45 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction16.plus(aDTFraction47);
        int int49 = aDTFraction47.denominator();
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction5.times(aDTFraction47);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction52.times((int) '4');
        java.lang.Class<?> wildcardClass56 = aDTFraction52.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean90 = aDTFraction88.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction85.plus(aDTFraction88);
        int int92 = aDTFraction85.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction68.times(aDTFraction71);
        float float73 = aDTFraction71.value();
        java.lang.Class<?> wildcardClass74 = aDTFraction71.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 10.0f + "'", float73 == 10.0f);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        int int44 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction38.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        boolean boolean67 = aDTFraction63.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction63.times((int) (byte) 100);
        float float70 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction49.plus(aDTFraction63);
        boolean boolean72 = aDTFraction38.equals((java.lang.Object) aDTFraction63);
        boolean boolean73 = aDTFraction33.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction38.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction75.times((int) 'a');
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction77);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction40.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction41.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction5.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction44.times(aDTFraction45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction12.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction2.plus(aDTFraction34);
        int int36 = aDTFraction34.numerator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        java.lang.Class<?> wildcardClass18 = aDTFraction17.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        float float25 = aDTFraction2.value();
        int int26 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        int int42 = aDTFraction38.numerator();
        int int43 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        boolean boolean53 = aDTFraction49.equals((java.lang.Object) ' ');
        boolean boolean55 = aDTFraction49.equals((java.lang.Object) "");
        float float56 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction38.times(aDTFraction49);
        boolean boolean58 = aDTFraction29.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        int int67 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction61.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        int int80 = aDTFraction74.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction70.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction29.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction5.plus(aDTFraction82);
        java.lang.String str84 = aDTFraction83.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/-1" + "'", str84, "0/-1");
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, 10);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction8.times(aDTFraction14);
        int int18 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction5.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction14.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction21.times((int) '#');
        int int24 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        float float29 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int53 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction40.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction37.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction37.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction27.times(aDTFraction37);
        java.lang.String str59 = aDTFraction58.toString();
        boolean boolean60 = aDTFraction23.equals((java.lang.Object) aDTFraction58);
        float float61 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction2.plus(aDTFraction58);
        java.lang.Class<?> wildcardClass63 = aDTFraction62.getClass();
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0/-1" + "'", str59, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(32, 35);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction8.times(aDTFraction14);
        int int18 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction5.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        java.lang.Class<?> wildcardClass28 = aDTFraction25.getClass();
        boolean boolean29 = aDTFraction5.equals((java.lang.Object) aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction2.plus(aDTFraction25);
        int int31 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        int int91 = aDTFraction88.numerator();
        java.lang.String str92 = aDTFraction88.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction88.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction88.reciprocal();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "10/32" + "'", str92, "10/32");
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction95);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        int int33 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction31.times((int) (byte) 1);
        int int36 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        boolean boolean53 = aDTFraction45.equals((java.lang.Object) aDTFraction51);
        java.lang.String str54 = aDTFraction51.toString();
        java.lang.String str55 = aDTFraction51.toString();
        float float56 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction31.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction60.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        boolean boolean74 = aDTFraction66.equals((java.lang.Object) aDTFraction72);
        java.lang.String str75 = aDTFraction72.toString();
        java.lang.String str76 = aDTFraction72.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction79);
        boolean boolean82 = aDTFraction51.equals((java.lang.Object) aDTFraction72);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction51.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-1" + "'", str75, "0/-1");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/-1" + "'", str76, "0/-1");
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        float float10 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction5.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        int int38 = aDTFraction34.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        java.lang.Class<?> wildcardClass48 = aDTFraction45.getClass();
        boolean boolean49 = aDTFraction25.equals((java.lang.Object) aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        boolean boolean59 = aDTFraction55.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction55.times((int) (byte) 100);
        java.lang.String str62 = aDTFraction55.toString();
        int int63 = aDTFraction55.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction45.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction64.times(52);
        boolean boolean67 = aDTFraction22.equals((java.lang.Object) aDTFraction66);
        boolean boolean68 = aDTFraction5.equals((java.lang.Object) boolean67);
        int int69 = aDTFraction5.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0/-1" + "'", str62, "0/-1");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        int int19 = aDTFraction18.denominator();
        float float20 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction46.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction18.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        int int64 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction68.reciprocal();
        int int70 = aDTFraction68.denominator();
        boolean boolean71 = aDTFraction63.equals((java.lang.Object) aDTFraction68);
        java.lang.Class<?> wildcardClass72 = aDTFraction63.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        float float46 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction49.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction63.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int76 = aDTFraction75.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction63.times(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction60.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float85 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction81.plus(aDTFraction84);
        boolean boolean88 = aDTFraction84.equals((java.lang.Object) ' ');
        boolean boolean90 = aDTFraction84.equals((java.lang.Object) "");
        java.lang.String str91 = aDTFraction84.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction78.times(aDTFraction84);
        float float93 = aDTFraction92.value();
        java.lang.String str94 = aDTFraction92.toString();
        java.lang.String str95 = aDTFraction92.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction92.times((int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction52.times(aDTFraction92);
        int int99 = aDTFraction98.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0/-1" + "'", str91, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + (-0.0f) + "'", float93 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "0/-100" + "'", str94, "0/-100");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "0/-100" + "'", str95, "0/-100");
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction16.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        boolean boolean37 = aDTFraction29.equals((java.lang.Object) aDTFraction35);
        java.lang.String str38 = aDTFraction35.toString();
        java.lang.String str39 = aDTFraction35.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction42);
        int int45 = aDTFraction35.denominator();
        float float46 = aDTFraction35.value();
        boolean boolean47 = aDTFraction20.equals((java.lang.Object) float46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction20.times((int) (short) 0);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(aDTFraction49);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        java.lang.String str15 = aDTFraction5.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        float float46 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction49.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction55.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction56.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean62 = aDTFraction58.equals((java.lang.Object) aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction65.plus(aDTFraction68);
        int int71 = aDTFraction65.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction61.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction78.times((int) 'a');
        int int83 = aDTFraction82.denominator();
        java.lang.String str84 = aDTFraction82.toString();
        boolean boolean86 = aDTFraction82.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int90 = aDTFraction89.denominator();
        float float91 = aDTFraction89.value();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction89.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction82.plus(aDTFraction89);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction61.plus(aDTFraction89);
        boolean boolean95 = aDTFraction14.equals((java.lang.Object) aDTFraction89);
        int int96 = aDTFraction14.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/-1" + "'", str84, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + 1.0f + "'", float91 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        int int25 = aDTFraction2.numerator();
        int int26 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((int) '4', 52);
        boolean boolean30 = aDTFraction2.equals((java.lang.Object) 52);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        boolean boolean15 = aDTFraction11.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction11.times((int) (byte) 100);
        java.lang.String str18 = aDTFraction11.toString();
        int int19 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        int int35 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        boolean boolean47 = aDTFraction41.equals((java.lang.Object) "");
        float float48 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction30.times(aDTFraction41);
        boolean boolean50 = aDTFraction21.equals((java.lang.Object) aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction62.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction21.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction2.plus(aDTFraction74);
        float float76 = aDTFraction75.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction75.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        int int13 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction24.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction21.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction45.times((int) (byte) 100);
        java.lang.String str52 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction21.times(aDTFraction45);
        int int54 = aDTFraction21.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction8.plus(aDTFraction21);
        float float56 = aDTFraction8.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        int int38 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction44.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction23.plus(aDTFraction54);
        int int56 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        int int65 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction59.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        int int76 = aDTFraction70.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction70.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float85 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction81.plus(aDTFraction84);
        boolean boolean88 = aDTFraction84.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction84.times((int) (byte) 100);
        float float91 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction70.plus(aDTFraction84);
        boolean boolean93 = aDTFraction59.equals((java.lang.Object) aDTFraction84);
        boolean boolean94 = aDTFraction54.equals((java.lang.Object) aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction59.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction14.plus(aDTFraction59);
        int int98 = aDTFraction59.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + (-0.0f) + "'", float91 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, 100);
        int int3 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        int int13 = aDTFraction12.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction24.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction21.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        java.lang.String str52 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction39.times(aDTFraction45);
        float float54 = aDTFraction53.value();
        java.lang.String str55 = aDTFraction53.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction12.times(aDTFraction53);
        int int57 = aDTFraction56.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-100" + "'", str55, "0/-100");
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        boolean boolean26 = aDTFraction18.equals((java.lang.Object) aDTFraction24);
        java.lang.String str27 = aDTFraction24.toString();
        java.lang.String str28 = aDTFraction24.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction24.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction33.reciprocal();
        int int49 = aDTFraction48.numerator();
        float float50 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction30.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction2.times(aDTFraction48);
        java.lang.String str53 = aDTFraction48.toString();
        java.lang.Class<?> wildcardClass54 = aDTFraction48.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-1.0f) + "'", float50 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1/-1" + "'", str53, "1/-1");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) 'a', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        int int16 = aDTFraction15.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction22.times((int) (byte) 100);
        java.lang.String str29 = aDTFraction22.toString();
        int int30 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        int int48 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction54.times((int) (byte) 100);
        java.lang.String str61 = aDTFraction54.toString();
        int int62 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction54.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction33.plus(aDTFraction64);
        int int66 = aDTFraction64.denominator();
        boolean boolean68 = aDTFraction64.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction22.times(aDTFraction64);
        boolean boolean70 = aDTFraction15.equals((java.lang.Object) aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction15.plus(aDTFraction71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction19.equals((java.lang.Object) 10);
        boolean boolean27 = aDTFraction14.equals((java.lang.Object) aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        int int43 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        java.lang.Class<?> wildcardClass53 = aDTFraction50.getClass();
        boolean boolean54 = aDTFraction30.equals((java.lang.Object) aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction50.times(aDTFraction66);
        boolean boolean68 = aDTFraction19.equals((java.lang.Object) aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, (-52));
        boolean boolean72 = aDTFraction19.equals((java.lang.Object) aDTFraction71);
        int int73 = aDTFraction71.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(350, 20000);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(0);
        int int71 = aDTFraction56.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction56.times(1);
        int int74 = aDTFraction56.numerator();
        float float75 = aDTFraction56.value();
        java.lang.Class<?> wildcardClass76 = aDTFraction56.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int19 = aDTFraction18.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction6.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        boolean boolean41 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        java.lang.String str42 = aDTFraction39.toString();
        java.lang.String str43 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction51.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        boolean boolean65 = aDTFraction57.equals((java.lang.Object) aDTFraction63);
        java.lang.String str66 = aDTFraction63.toString();
        java.lang.String str67 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction63.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction39.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction24.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction21.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction2.times(aDTFraction39);
        java.lang.Class<?> wildcardClass74 = aDTFraction39.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        int int11 = aDTFraction2.numerator();
        java.lang.String str12 = aDTFraction2.toString();
        java.lang.String str13 = aDTFraction2.toString();
        int int14 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        int int18 = aDTFraction17.denominator();
        java.lang.Class<?> wildcardClass19 = aDTFraction17.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction50.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int63 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction50.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction47.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        boolean boolean75 = aDTFraction71.equals((java.lang.Object) ' ');
        boolean boolean77 = aDTFraction71.equals((java.lang.Object) "");
        java.lang.String str78 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction39.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction80.times(10000);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction82.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0/-1" + "'", str78, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction82);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction2.denominator();
        java.lang.String str36 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1/1" + "'", str36, "-1/1");
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        int int9 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction12.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction27.reciprocal();
        boolean boolean29 = aDTFraction2.equals((java.lang.Object) aDTFraction28);
        int int30 = aDTFraction28.numerator();
        int int31 = aDTFraction28.denominator();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, 20000);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        int int34 = aDTFraction33.numerator();
        int int35 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction33.times((int) (short) 10);
        float float38 = aDTFraction37.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction37.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction18.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction19.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int41 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction40);
        int int43 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction24.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction47.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction40.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction15.times(aDTFraction58);
        java.lang.Class<?> wildcardClass60 = aDTFraction59.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass37 = aDTFraction34.getClass();
        boolean boolean38 = aDTFraction14.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int78 = aDTFraction77.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction65.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction62.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction54.plus(aDTFraction62);
        java.lang.String str82 = aDTFraction62.toString();
        int int83 = aDTFraction62.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction62.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0/1" + "'", str82, "0/1");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        int int45 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        java.lang.String str54 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.plus(aDTFraction48);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction32.plus(aDTFraction55);
        java.lang.String str60 = aDTFraction59.toString();
        float float61 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction67.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction82.times((int) (byte) 10);
        java.lang.Object obj85 = new java.lang.Object();
        boolean boolean86 = aDTFraction84.equals(obj85);
        float float87 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = new com.thealgorithms.maths.ADTFraction((int) ' ', (int) ' ');
        int int91 = aDTFraction90.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction84.plus(aDTFraction90);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction59.plus(aDTFraction84);
        java.lang.Class<?> wildcardClass94 = aDTFraction93.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/1" + "'", str60, "0/1");
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 0.0f + "'", float61 == 0.0f);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + 0.0f + "'", float87 == 0.0f);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 32 + "'", int91 == 32);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        int int34 = aDTFraction33.numerator();
        int int35 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction33.times((int) (short) 10);
        float float38 = aDTFraction33.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction7.times((int) '#');
        int int16 = aDTFraction7.numerator();
        java.lang.String str17 = aDTFraction7.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str21 = aDTFraction20.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int45 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction32.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction29.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction50.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction47.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction47.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction20.times(aDTFraction47);
        boolean boolean64 = aDTFraction7.equals((java.lang.Object) aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str68 = aDTFraction67.toString();
        float float69 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction47.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction2.times(aDTFraction67);
        java.lang.Class<?> wildcardClass72 = aDTFraction71.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-1/1" + "'", str68, "-1/1");
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-1.0f) + "'", float69 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) ' ', 100);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) aDTFraction28);
        float float30 = aDTFraction28.value();
        int int31 = aDTFraction28.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-1.0f) + "'", float30 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        int int37 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction31.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction31.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        boolean boolean59 = aDTFraction51.equals((java.lang.Object) aDTFraction57);
        java.lang.String str60 = aDTFraction57.toString();
        java.lang.String str61 = aDTFraction57.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction57.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction66.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int79 = aDTFraction78.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction66.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction66.plus(aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction66.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction63.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction31.times(aDTFraction66);
        float float88 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction66.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 100 + "'", int79 == 100);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + (-1.0f) + "'", float88 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction89);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        int int43 = aDTFraction39.numerator();
        int int44 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int68 = aDTFraction67.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction52.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        boolean boolean80 = aDTFraction76.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction76.times((int) (byte) 100);
        java.lang.String str83 = aDTFraction76.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction52.times(aDTFraction76);
        int int85 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction39.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction22.plus(aDTFraction52);
        int int88 = aDTFraction52.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0/-1" + "'", str83, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        boolean boolean30 = aDTFraction17.equals((java.lang.Object) aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction29.times(97);
        int int33 = aDTFraction32.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        int int11 = aDTFraction2.numerator();
        java.lang.String str12 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str16 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction42.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction42.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction15.times(aDTFraction42);
        boolean boolean59 = aDTFraction2.equals((java.lang.Object) aDTFraction42);
        java.lang.String str60 = aDTFraction42.toString();
        float float61 = aDTFraction42.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/100" + "'", str60, "0/100");
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 0.0f + "'", float61 == 0.0f);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int16 = aDTFraction15.denominator();
        float float17 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction5.plus(aDTFraction15);
        java.lang.Class<?> wildcardClass19 = aDTFraction18.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 1.0f + "'", float17 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        int int13 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        boolean boolean25 = aDTFraction19.equals((java.lang.Object) "");
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction8.times(aDTFraction19);
        int int28 = aDTFraction19.denominator();
        float float29 = aDTFraction19.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        float float3 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction49);
        int int54 = aDTFraction34.denominator();
        float float55 = aDTFraction34.value();
        float float56 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction34.times((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction58.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-1.0f) + "'", float55 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-1.0f) + "'", float56 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean7 = aDTFraction5.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        int int20 = aDTFraction10.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        boolean boolean37 = aDTFraction29.equals((java.lang.Object) aDTFraction35);
        java.lang.String str38 = aDTFraction35.toString();
        java.lang.String str39 = aDTFraction35.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction42);
        boolean boolean45 = aDTFraction10.equals((java.lang.Object) aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction5.times(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.times(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction50.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction51.times(52);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction10.plus(aDTFraction53);
        int int56 = aDTFraction53.denominator();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 166.4f + "'", float54 == 166.4f);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction50);
        float float53 = aDTFraction52.value();
        java.lang.Class<?> wildcardClass54 = aDTFraction52.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction34.times((int) (byte) 100);
        java.lang.String str41 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction10.times(aDTFraction34);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction2.times(aDTFraction42);
        java.lang.String str45 = aDTFraction2.toString();
        java.lang.String str46 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100/100" + "'", str45, "100/100");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100/100" + "'", str46, "100/100");
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        float float10 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        int int23 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        java.lang.String str32 = aDTFraction26.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.plus(aDTFraction26);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction33.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        boolean boolean40 = aDTFraction36.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction5.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction36.times(aDTFraction42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0/-1" + "'", str32, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(aDTFraction41);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction29.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(aDTFraction29);
        java.lang.String str46 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction49.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        int int68 = aDTFraction62.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction58.times(aDTFraction62);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction69.times((int) (short) 0);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction45.times(aDTFraction72);
        int int75 = aDTFraction74.numerator();
        java.lang.Class<?> wildcardClass76 = aDTFraction74.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/-100" + "'", str46, "0/-100");
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 0.0f + "'", float70 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 0.0f + "'", float73 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        int int33 = aDTFraction29.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        java.lang.Class<?> wildcardClass43 = aDTFraction40.getClass();
        boolean boolean44 = aDTFraction20.equals((java.lang.Object) aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        boolean boolean54 = aDTFraction50.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction50.times((int) (byte) 100);
        java.lang.String str57 = aDTFraction50.toString();
        int int58 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction40.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction2.times(aDTFraction50);
        java.lang.String str61 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1/1" + "'", str61, "-1/1");
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(100, (int) '#');
        int int7 = aDTFraction6.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        java.lang.String str12 = aDTFraction10.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction10.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction6.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction3.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction21.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int34 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.times(aDTFraction33);
        int int36 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        boolean boolean46 = aDTFraction42.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction42.times((int) (byte) 100);
        java.lang.String str49 = aDTFraction42.toString();
        int int50 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction42.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction21.plus(aDTFraction52);
        int int54 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(10, (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction18.times(aDTFraction53);
        java.lang.Class<?> wildcardClass60 = aDTFraction53.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        int int42 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        boolean boolean52 = aDTFraction48.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction48.times((int) (byte) 100);
        java.lang.String str55 = aDTFraction48.toString();
        int int56 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction48.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction27.plus(aDTFraction58);
        boolean boolean60 = aDTFraction2.equals((java.lang.Object) aDTFraction58);
        float float61 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        boolean boolean65 = aDTFraction58.equals((java.lang.Object) aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction64.times(aDTFraction66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, 10000);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction11.times(aDTFraction17);
        int int21 = aDTFraction17.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        java.lang.Class<?> wildcardClass31 = aDTFraction28.getClass();
        boolean boolean32 = aDTFraction8.equals((java.lang.Object) aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        boolean boolean42 = aDTFraction38.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (byte) 100);
        java.lang.String str45 = aDTFraction38.toString();
        int int46 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction28.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction47.times(52);
        boolean boolean50 = aDTFraction5.equals((java.lang.Object) aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction2.times(aDTFraction49);
        float float52 = aDTFraction51.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction51.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 0.0f + "'", float52 == 0.0f);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        int int42 = aDTFraction38.numerator();
        int int43 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        boolean boolean53 = aDTFraction49.equals((java.lang.Object) ' ');
        boolean boolean55 = aDTFraction49.equals((java.lang.Object) "");
        float float56 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction38.times(aDTFraction49);
        boolean boolean58 = aDTFraction29.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        int int67 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction61.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        int int80 = aDTFraction74.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction70.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction29.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction5.plus(aDTFraction82);
        int int84 = aDTFraction83.numerator();
        float float85 = aDTFraction83.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        java.lang.String str28 = aDTFraction11.toString();
        int int29 = aDTFraction11.numerator();
        int int30 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        boolean boolean43 = aDTFraction39.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction39.times((int) (byte) 100);
        float float46 = aDTFraction39.value();
        boolean boolean47 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction53.times((int) (byte) 100);
        java.lang.String str60 = aDTFraction53.toString();
        int int61 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction39.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction11.plus(aDTFraction63);
        int int66 = aDTFraction11.numerator();
        float float67 = aDTFraction11.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        float float3 = aDTFraction2.value();
        int int4 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        java.lang.String str23 = aDTFraction22.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int39 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction26.times(aDTFraction38);
        float float41 = aDTFraction26.value();
        float float42 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction22.plus(aDTFraction26);
        java.lang.Class<?> wildcardClass44 = aDTFraction22.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/1" + "'", str23, "0/1");
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-1.0f) + "'", float41 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-1.0f) + "'", float42 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction7.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int17 = aDTFraction16.denominator();
        float float18 = aDTFraction16.value();
        float float19 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        java.lang.String str32 = aDTFraction25.toString();
        int int33 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction25.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction38.times(aDTFraction44);
        int int48 = aDTFraction44.numerator();
        int int49 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        boolean boolean59 = aDTFraction55.equals((java.lang.Object) ' ');
        boolean boolean61 = aDTFraction55.equals((java.lang.Object) "");
        float float62 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction44.times(aDTFraction55);
        boolean boolean64 = aDTFraction35.equals((java.lang.Object) aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        int int73 = aDTFraction67.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction67.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float84 = aDTFraction83.value();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction80.plus(aDTFraction83);
        int int86 = aDTFraction80.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction76.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction35.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction16.plus(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction89.times((int) (byte) 0);
        boolean boolean92 = aDTFraction7.equals((java.lang.Object) aDTFraction89);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction2.times(aDTFraction7);
        int int94 = aDTFraction93.denominator();
        int int95 = aDTFraction93.numerator();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0/-1" + "'", str32, "0/-1");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + (-0.0f) + "'", float84 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 52 + "'", int94 == 52);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-52) + "'", int95 == (-52));
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        int int28 = aDTFraction25.denominator();
        int int29 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 10);
        int int33 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction32);
        java.lang.String str35 = aDTFraction32.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "100/10" + "'", str35, "100/10");
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction14.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        java.lang.String str27 = aDTFraction25.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        int int40 = aDTFraction34.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction34.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        boolean boolean52 = aDTFraction48.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction48.times((int) (byte) 100);
        float float55 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction34.plus(aDTFraction48);
        int int57 = aDTFraction34.numerator();
        java.lang.String str58 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction34.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction64.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction65.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean71 = aDTFraction67.equals((java.lang.Object) aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        int int80 = aDTFraction74.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction70.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction61.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str86 = aDTFraction85.toString();
        boolean boolean87 = aDTFraction61.equals((java.lang.Object) str86);
        int int88 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction22.plus(aDTFraction61);
        java.lang.Class<?> wildcardClass90 = aDTFraction22.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction8);
        int int10 = aDTFraction8.denominator();
        int int11 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction8.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean17 = aDTFraction15.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int33 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction20.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction41.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction20.times(aDTFraction56);
        boolean boolean58 = aDTFraction15.equals((java.lang.Object) aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction8.plus(aDTFraction15);
        int int60 = aDTFraction8.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 32 + "'", int60 == 32);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction24.times(52);
        int int27 = aDTFraction24.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        java.lang.String str29 = aDTFraction24.toString();
        int int30 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction24.times(32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int48 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction35.times(aDTFraction47);
        int int50 = aDTFraction35.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction56.times((int) (byte) 100);
        java.lang.String str63 = aDTFraction56.toString();
        int int64 = aDTFraction56.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction56.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction35.plus(aDTFraction66);
        int int68 = aDTFraction66.denominator();
        int int69 = aDTFraction66.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction72.plus(aDTFraction75);
        int int78 = aDTFraction72.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction72.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction66.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int87 = aDTFraction86.denominator();
        boolean boolean89 = aDTFraction86.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction82.times(aDTFraction86);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction32.plus(aDTFraction90);
        java.lang.String str92 = aDTFraction91.toString();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100/100" + "'", str29, "100/100");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "320000/10000" + "'", str92, "320000/10000");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        boolean boolean41 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        java.lang.String str42 = aDTFraction39.toString();
        java.lang.String str43 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction54.plus(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction69.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction39.times(aDTFraction71);
        boolean boolean73 = aDTFraction22.equals((java.lang.Object) aDTFraction71);
        java.lang.Class<?> wildcardClass74 = aDTFraction71.getClass();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        int int45 = aDTFraction15.numerator();
        float float46 = aDTFraction15.value();
        int int47 = aDTFraction15.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction7.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        int int26 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction16.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str31 = aDTFraction30.toString();
        boolean boolean32 = aDTFraction16.equals((java.lang.Object) aDTFraction30);
        java.lang.String str33 = aDTFraction16.toString();
        int int34 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction2.plus(aDTFraction16);
        boolean boolean37 = aDTFraction16.equals((java.lang.Object) 0.32f);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1/10" + "'", str31, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(9700, 35);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        float float25 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        int int38 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean43 = aDTFraction41.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        int int56 = aDTFraction46.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        boolean boolean73 = aDTFraction65.equals((java.lang.Object) aDTFraction71);
        java.lang.String str74 = aDTFraction71.toString();
        java.lang.String str75 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction71.times(aDTFraction78);
        boolean boolean81 = aDTFraction46.equals((java.lang.Object) aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction41.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction28.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction16.times(aDTFraction82);
        java.lang.String str85 = aDTFraction82.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-1" + "'", str74, "0/-1");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-1" + "'", str75, "0/-1");
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0/-1" + "'", str85, "0/-1");
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1664, 52);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        java.lang.String str20 = aDTFraction17.toString();
        java.lang.String str21 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction17.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int53 = aDTFraction52.denominator();
        boolean boolean54 = aDTFraction17.equals((java.lang.Object) int53);
        java.lang.String str55 = aDTFraction17.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction17.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        int int19 = aDTFraction13.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction13.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        float float34 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction13.plus(aDTFraction27);
        boolean boolean36 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        float float37 = aDTFraction27.value();
        java.lang.Class<?> wildcardClass38 = aDTFraction27.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction29.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(aDTFraction29);
        java.lang.Class<?> wildcardClass46 = aDTFraction2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        int int17 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        int int37 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction24.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction33.times((int) (byte) 0);
        int int41 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction20.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction11.plus(aDTFraction40);
        int int44 = aDTFraction40.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-1.0f) + "'", float21 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (-1));
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) 10);
        int int5 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1000000, 10000);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, (int) (short) 10);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(9700, (int) '4');
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction2.reciprocal();
        java.lang.Class<?> wildcardClass19 = aDTFraction18.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        float float86 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + 1.0f + "'", float86 == 1.0f);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        int int17 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction11.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        float float32 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction11.plus(aDTFraction25);
        int int34 = aDTFraction11.numerator();
        java.lang.String str35 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction42.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        int int57 = aDTFraction51.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction47.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction38.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str63 = aDTFraction62.toString();
        boolean boolean64 = aDTFraction38.equals((java.lang.Object) str63);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction38.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction29.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(aDTFraction29);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction29.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        int int19 = aDTFraction18.numerator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = aDTFraction22.equals(obj23);
        float float25 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.times(10000);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction30.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction30.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction27.plus(aDTFraction30);
        float float35 = aDTFraction30.value();
        java.lang.String str36 = aDTFraction30.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-1.0f) + "'", float35 == (-1.0f));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1/1" + "'", str36, "-1/1");
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        boolean boolean14 = aDTFraction8.equals((java.lang.Object) "");
        int int15 = aDTFraction8.denominator();
        java.lang.String str16 = aDTFraction8.toString();
        java.lang.String str17 = aDTFraction8.toString();
        int int18 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction2.plus(aDTFraction8);
        java.lang.String str20 = aDTFraction2.toString();
        int int21 = aDTFraction2.numerator();
        int int22 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/32" + "'", str20, "0/32");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction16.times(0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction16.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(100, (int) '#');
        int int7 = aDTFraction6.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        java.lang.String str12 = aDTFraction10.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction10.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction6.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction3.plus(aDTFraction15);
        java.lang.Class<?> wildcardClass19 = aDTFraction18.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        int int28 = aDTFraction11.numerator();
        java.lang.String str29 = aDTFraction11.toString();
        java.lang.String str30 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction11.times((int) '#');
        float float33 = aDTFraction11.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction11.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        int int46 = aDTFraction14.denominator();
        int int47 = aDTFraction14.numerator();
        java.lang.Class<?> wildcardClass48 = aDTFraction14.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) 'a', (-52));
        java.lang.String str3 = aDTFraction2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "97/-52" + "'", str3, "97/-52");
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        java.lang.String str23 = aDTFraction15.toString();
        java.lang.String str24 = aDTFraction15.toString();
        java.lang.Class<?> wildcardClass25 = aDTFraction15.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        int int45 = aDTFraction15.numerator();
        int int46 = aDTFraction15.numerator();
        int int47 = aDTFraction15.numerator();
        int int48 = aDTFraction15.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        int int23 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction8.times((int) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction25.times((-10000));
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction27.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction25.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction41.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int54 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction62.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction41.times(aDTFraction77);
        boolean boolean79 = aDTFraction25.equals((java.lang.Object) aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        int int88 = aDTFraction82.numerator();
        int int89 = aDTFraction82.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction25.plus(aDTFraction82);
        java.lang.String str91 = aDTFraction25.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction25.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0/100" + "'", str91, "0/100");
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        int int33 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction31.times((int) (byte) 1);
        java.lang.Class<?> wildcardClass36 = aDTFraction31.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        java.lang.String str21 = aDTFraction20.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(32, 35);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction24.times((int) (byte) 100);
        boolean boolean27 = aDTFraction20.equals((java.lang.Object) aDTFraction26);
        java.lang.String str28 = aDTFraction26.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/1" + "'", str21, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "3200/35" + "'", str28, "3200/35");
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        int int17 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        boolean boolean34 = aDTFraction26.equals((java.lang.Object) aDTFraction32);
        java.lang.String str35 = aDTFraction32.toString();
        java.lang.String str36 = aDTFraction32.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction39);
        boolean boolean42 = aDTFraction7.equals((java.lang.Object) aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction2.times(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(10);
        float float46 = aDTFraction45.value();
        java.lang.String str47 = aDTFraction45.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        int int26 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        java.lang.String str35 = aDTFraction29.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (byte) 100);
        java.lang.String str48 = aDTFraction41.toString();
        int int49 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction41.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction29.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction24.times(aDTFraction52);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction53.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        float float7 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction18.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction15.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction15.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction5.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction15.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction42.reciprocal();
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction39.plus(aDTFraction43);
        int int46 = aDTFraction39.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + (-0.0f) + "'", float7 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        float float10 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction21.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int34 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction18.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction18.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction8.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction18.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction5.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction2.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction49.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction64.times((int) (byte) 10);
        float float67 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction2.plus(aDTFraction64);
        java.lang.String str69 = aDTFraction64.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + 0.0f + "'", float67 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/1" + "'", str69, "0/1");
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        java.lang.String str18 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(35, 52);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean28 = aDTFraction26.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        int int41 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction44.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        boolean boolean58 = aDTFraction50.equals((java.lang.Object) aDTFraction56);
        java.lang.String str59 = aDTFraction56.toString();
        java.lang.String str60 = aDTFraction56.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction56.times(aDTFraction63);
        boolean boolean66 = aDTFraction31.equals((java.lang.Object) aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction26.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction26.times(10);
        int int70 = aDTFraction69.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        int int79 = aDTFraction73.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction73.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float88 = aDTFraction87.value();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction84.plus(aDTFraction87);
        boolean boolean91 = aDTFraction87.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction87.times((int) (byte) 100);
        float float94 = aDTFraction87.value();
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction73.plus(aDTFraction87);
        int int96 = aDTFraction73.denominator();
        int int97 = aDTFraction73.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction69.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction99 = aDTFraction22.plus(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1/1" + "'", str18, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0/-1" + "'", str59, "0/-1");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + (-0.0f) + "'", float88 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + float94 + "' != '" + (-0.0f) + "'", float94 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertNotNull(aDTFraction99);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction56.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction49.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int85 = aDTFraction84.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction72.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction69.times(aDTFraction86);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction69.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction61.times(aDTFraction89);
        java.lang.Class<?> wildcardClass91 = aDTFraction61.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction14.times((int) '#');
        boolean boolean23 = aDTFraction5.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        int int32 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction26.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction35.times(aDTFraction39);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction5.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 1);
        int int52 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction5.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction5.times((int) 'a');
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), (int) (byte) 100);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        int int6 = aDTFraction3.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction3.times(32);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction22.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int35 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction22.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction19.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction37.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction37.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction52.times((int) (byte) 100);
        boolean boolean55 = aDTFraction11.equals((java.lang.Object) aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction8.times(aDTFraction11);
        int int57 = aDTFraction11.denominator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        int int26 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        java.lang.String str35 = aDTFraction29.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (byte) 100);
        java.lang.String str48 = aDTFraction41.toString();
        int int49 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction41.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction29.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction24.times(aDTFraction52);
        java.lang.String str54 = aDTFraction52.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction52.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/1" + "'", str54, "0/1");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1664, (int) (byte) 1);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        int int44 = aDTFraction42.denominator();
        int int45 = aDTFraction42.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        java.lang.String str50 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction48.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        int int63 = aDTFraction57.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction57.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        boolean boolean75 = aDTFraction71.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction71.times((int) (byte) 100);
        float float78 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction57.plus(aDTFraction71);
        int int80 = aDTFraction57.numerator();
        java.lang.String str81 = aDTFraction57.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction54.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction42.plus(aDTFraction82);
        java.lang.Class<?> wildcardClass84 = aDTFraction83.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0/-1" + "'", str81, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        java.lang.String str20 = aDTFraction17.toString();
        java.lang.String str21 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction17.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(aDTFraction17);
        float float50 = aDTFraction49.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 0.0f + "'", float50 == 0.0f);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (byte) 1);
        int int3 = aDTFraction2.numerator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.reciprocal();
        int int7 = aDTFraction2.numerator();
        java.lang.Class<?> wildcardClass8 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        boolean boolean32 = aDTFraction24.equals((java.lang.Object) aDTFraction30);
        java.lang.String str33 = aDTFraction30.toString();
        java.lang.String str34 = aDTFraction30.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction30.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction30.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction5.times(aDTFraction38);
        int int40 = aDTFraction38.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        float float34 = aDTFraction12.value();
        int int35 = aDTFraction12.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int59 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction46.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction43.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction61.times(35);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction12.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        int int76 = aDTFraction70.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction70.plus(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float87 = aDTFraction86.value();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction83.plus(aDTFraction86);
        int int89 = aDTFraction83.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction79.times(aDTFraction83);
        int int91 = aDTFraction79.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction67.plus(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) '#');
        boolean boolean96 = aDTFraction92.equals((java.lang.Object) aDTFraction95);
        java.lang.Class<?> wildcardClass97 = aDTFraction95.getClass();
        boolean boolean98 = aDTFraction12.equals((java.lang.Object) aDTFraction95);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + (-0.0f) + "'", float87 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        java.lang.String str13 = aDTFraction8.toString();
        float float14 = aDTFraction8.value();
        java.lang.String str15 = aDTFraction8.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction18.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        int int35 = aDTFraction29.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction29.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        boolean boolean47 = aDTFraction43.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction43.times((int) (byte) 100);
        float float50 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction29.plus(aDTFraction43);
        boolean boolean52 = aDTFraction18.equals((java.lang.Object) aDTFraction43);
        float float53 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction8.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction54.times(1);
        float float57 = aDTFraction56.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, (int) (byte) 1);
        int int3 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction16.times(0);
        int int19 = aDTFraction18.denominator();
        float float20 = aDTFraction18.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (byte) 10);
        int int3 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        boolean boolean20 = aDTFraction12.equals((java.lang.Object) aDTFraction18);
        java.lang.String str21 = aDTFraction18.toString();
        java.lang.String str22 = aDTFraction18.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction18.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction27.reciprocal();
        int int43 = aDTFraction42.numerator();
        float float44 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction24.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int49 = aDTFraction48.denominator();
        float float50 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction48.reciprocal();
        int int52 = aDTFraction51.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction45.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction45);
        java.lang.Class<?> wildcardClass55 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0/-1" + "'", str22, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-1.0f) + "'", float44 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 1.0f + "'", float50 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction24.times(52);
        java.lang.Class<?> wildcardClass27 = aDTFraction24.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        int int33 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction31.times((int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction38.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        boolean boolean52 = aDTFraction44.equals((java.lang.Object) aDTFraction50);
        java.lang.String str53 = aDTFraction50.toString();
        java.lang.String str54 = aDTFraction50.toString();
        float float55 = aDTFraction50.value();
        int int56 = aDTFraction50.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int80 = aDTFraction79.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction67.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction64.times(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction50.plus(aDTFraction81);
        java.lang.String str84 = aDTFraction81.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction35.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction85.times((-100));
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "-100/100" + "'", str84, "-100/100");
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction87);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        int int18 = aDTFraction17.denominator();
        int int19 = aDTFraction17.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        int int16 = aDTFraction12.numerator();
        java.lang.String str17 = aDTFraction12.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction3.plus(aDTFraction12);
        int int19 = aDTFraction3.denominator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.times(aDTFraction38);
        java.lang.String str40 = aDTFraction2.toString();
        float float41 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1/1" + "'", str40, "-1/1");
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-1.0f) + "'", float41 == (-1.0f));
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        java.lang.String str18 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction22.times(aDTFraction28);
        int int32 = aDTFraction28.numerator();
        int int33 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        boolean boolean43 = aDTFraction39.equals((java.lang.Object) ' ');
        boolean boolean45 = aDTFraction39.equals((java.lang.Object) "");
        float float46 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction28.times(aDTFraction39);
        int int48 = aDTFraction47.numerator();
        int int49 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction2.times(aDTFraction47);
        java.lang.Class<?> wildcardClass51 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1/1" + "'", str18, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction22.times((int) (byte) 100);
        java.lang.String str29 = aDTFraction22.toString();
        int int30 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction22.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction8.times(aDTFraction32);
        java.lang.String str34 = aDTFraction8.toString();
        boolean boolean36 = aDTFraction8.equals((java.lang.Object) "0/1000000");
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) (byte) -1);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        int int25 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction2.times((int) (short) 100);
        int int28 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction11.denominator();
        java.lang.String str13 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction11.times((int) '#');
        int int16 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        boolean boolean33 = aDTFraction25.equals((java.lang.Object) aDTFraction31);
        java.lang.String str34 = aDTFraction31.toString();
        java.lang.String str35 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int53 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction40.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction40.reciprocal();
        int int56 = aDTFraction55.numerator();
        float float57 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction37.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction15.times(aDTFraction55);
        int int60 = aDTFraction55.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-1.0f) + "'", float57 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        boolean boolean32 = aDTFraction24.equals((java.lang.Object) aDTFraction30);
        java.lang.String str33 = aDTFraction30.toString();
        java.lang.String str34 = aDTFraction30.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction30.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction30.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction5.times(aDTFraction38);
        float float40 = aDTFraction5.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction50.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int63 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction50.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction47.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        boolean boolean75 = aDTFraction71.equals((java.lang.Object) ' ');
        boolean boolean77 = aDTFraction71.equals((java.lang.Object) "");
        java.lang.String str78 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction39.times(aDTFraction79);
        float float81 = aDTFraction39.value();
        float float82 = aDTFraction39.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0/-1" + "'", str78, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean7 = aDTFraction5.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        int int20 = aDTFraction10.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        boolean boolean37 = aDTFraction29.equals((java.lang.Object) aDTFraction35);
        java.lang.String str38 = aDTFraction35.toString();
        java.lang.String str39 = aDTFraction35.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction42);
        boolean boolean45 = aDTFraction10.equals((java.lang.Object) aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction5.times(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.times(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction50.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction51.times(52);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction10.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction55.reciprocal();
        java.lang.Class<?> wildcardClass57 = aDTFraction56.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 166.4f + "'", float54 == 166.4f);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) '#');
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        int int32 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction26.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        float float47 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction26.plus(aDTFraction40);
        int int49 = aDTFraction26.numerator();
        java.lang.String str50 = aDTFraction26.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction22.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        boolean boolean68 = aDTFraction60.equals((java.lang.Object) aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        boolean boolean78 = aDTFraction71.equals((java.lang.Object) 10);
        boolean boolean79 = aDTFraction66.equals((java.lang.Object) aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction22.plus(aDTFraction71);
        float float81 = aDTFraction80.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction80.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        int int24 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        boolean boolean41 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        java.lang.String str42 = aDTFraction39.toString();
        java.lang.String str43 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction51.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        boolean boolean65 = aDTFraction57.equals((java.lang.Object) aDTFraction63);
        java.lang.String str66 = aDTFraction63.toString();
        java.lang.String str67 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction63.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction39.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction69.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction23.times(aDTFraction72);
        int int74 = aDTFraction73.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        java.lang.String str42 = aDTFraction35.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction29.times(aDTFraction35);
        float float44 = aDTFraction43.value();
        java.lang.String str45 = aDTFraction43.toString();
        int int46 = aDTFraction43.denominator();
        int int47 = aDTFraction43.numerator();
        java.lang.Class<?> wildcardClass48 = aDTFraction43.getClass();
        boolean boolean49 = aDTFraction2.equals((java.lang.Object) aDTFraction43);
        int int50 = aDTFraction43.denominator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-100" + "'", str45, "0/-100");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-100) + "'", int46 == (-100));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-100) + "'", int50 == (-100));
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        float float40 = aDTFraction39.value();
        java.lang.String str41 = aDTFraction39.toString();
        int int42 = aDTFraction39.denominator();
        int int43 = aDTFraction39.numerator();
        int int44 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        boolean boolean55 = aDTFraction47.equals((java.lang.Object) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction39.plus(aDTFraction47);
        java.lang.String str57 = aDTFraction47.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction47.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-100" + "'", str41, "0/-100");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-100) + "'", int42 == (-100));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-100) + "'", int44 == (-100));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction18.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction19.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int41 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction40);
        int int43 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction24.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction47.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction40.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction15.times(aDTFraction58);
        float float60 = aDTFraction58.value();
        java.lang.String str61 = aDTFraction58.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-100" + "'", str61, "0/-100");
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        int int11 = aDTFraction2.numerator();
        java.lang.String str12 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        int int25 = aDTFraction21.numerator();
        java.lang.String str26 = aDTFraction21.toString();
        float float27 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int31 = aDTFraction30.denominator();
        float float32 = aDTFraction30.value();
        float float33 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        int int42 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction36.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction45.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        boolean boolean73 = aDTFraction65.equals((java.lang.Object) aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float80 = aDTFraction79.value();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction76.plus(aDTFraction79);
        boolean boolean83 = aDTFraction76.equals((java.lang.Object) 10);
        boolean boolean84 = aDTFraction71.equals((java.lang.Object) aDTFraction76);
        boolean boolean85 = aDTFraction49.equals((java.lang.Object) boolean84);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction30.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction49.times(aDTFraction89);
        boolean boolean91 = aDTFraction21.equals((java.lang.Object) aDTFraction90);
        boolean boolean92 = aDTFraction2.equals((java.lang.Object) boolean91);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + (-0.0f) + "'", float80 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        boolean boolean46 = aDTFraction38.equals((java.lang.Object) aDTFraction44);
        java.lang.String str47 = aDTFraction44.toString();
        java.lang.String str48 = aDTFraction44.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction44.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction56.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        boolean boolean70 = aDTFraction62.equals((java.lang.Object) aDTFraction68);
        java.lang.String str71 = aDTFraction68.toString();
        java.lang.String str72 = aDTFraction68.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction68.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction44.plus(aDTFraction74);
        float float76 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction79.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction44.plus(aDTFraction79);
        boolean boolean83 = aDTFraction28.equals((java.lang.Object) aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction86.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction87.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction89.times(0);
        int int92 = aDTFraction91.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction28.times(aDTFraction91);
        java.lang.Class<?> wildcardClass94 = aDTFraction91.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0/-1" + "'", str72, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        int int13 = aDTFraction12.denominator();
        int int14 = aDTFraction12.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction17.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction18.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        int int33 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction23.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction12.plus(aDTFraction23);
        int int36 = aDTFraction35.denominator();
        java.lang.String str37 = aDTFraction35.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100/100" + "'", str37, "100/100");
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        int int37 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction31.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction31.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction24.times((int) (byte) -1);
        int int45 = aDTFraction24.numerator();
        float float46 = aDTFraction24.value();
        java.lang.Class<?> wildcardClass47 = aDTFraction24.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 1.0f + "'", float46 == 1.0f);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        boolean boolean28 = aDTFraction22.equals((java.lang.Object) "");
        int int29 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        boolean boolean46 = aDTFraction38.equals((java.lang.Object) aDTFraction44);
        java.lang.String str47 = aDTFraction44.toString();
        java.lang.String str48 = aDTFraction44.toString();
        float float49 = aDTFraction44.value();
        boolean boolean50 = aDTFraction22.equals((java.lang.Object) float49);
        int int51 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction22.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction11.times(aDTFraction53);
        int int55 = aDTFraction54.denominator();
        float float56 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean61 = aDTFraction59.equals((java.lang.Object) 100.0d);
        boolean boolean62 = aDTFraction54.equals((java.lang.Object) boolean61);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction2.plus(aDTFraction7);
        int int15 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction18.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction18.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction45);
        int int49 = aDTFraction45.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction36.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        java.lang.Class<?> wildcardClass59 = aDTFraction56.getClass();
        boolean boolean60 = aDTFraction36.equals((java.lang.Object) aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        boolean boolean70 = aDTFraction66.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction66.times((int) (byte) 100);
        java.lang.String str73 = aDTFraction66.toString();
        int int74 = aDTFraction66.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction56.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction18.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction7.times(aDTFraction76);
        java.lang.String str78 = aDTFraction7.toString();
        float float79 = aDTFraction7.value();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0/-1" + "'", str73, "0/-1");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0/-1" + "'", str78, "0/-1");
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        int int17 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.plus(aDTFraction20);
        int int22 = aDTFraction21.denominator();
        int int23 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction26.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction27.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean33 = aDTFraction29.equals((java.lang.Object) aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        int int42 = aDTFraction36.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction32.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction21.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction8.plus(aDTFraction44);
        java.lang.String str46 = aDTFraction8.toString();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-5200/52" + "'", str46, "-5200/52");
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction16.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.times((int) (byte) 10);
        int int21 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction24.times(aDTFraction36);
        int int39 = aDTFraction24.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction45.times((int) (byte) 100);
        java.lang.String str52 = aDTFraction45.toString();
        int int53 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction45.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction24.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction20.times(aDTFraction56);
        java.lang.String str58 = aDTFraction56.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1/-1" + "'", str58, "1/-1");
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        int int6 = aDTFraction3.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction3.times(32);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction22.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int35 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction22.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction19.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction37.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction37.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction52.times((int) (byte) 100);
        boolean boolean55 = aDTFraction11.equals((java.lang.Object) aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction8.times(aDTFraction11);
        int int57 = aDTFraction8.numerator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1024 + "'", int57 == 1024);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        int int39 = aDTFraction35.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction26.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        java.lang.Class<?> wildcardClass49 = aDTFraction46.getClass();
        boolean boolean50 = aDTFraction26.equals((java.lang.Object) aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction56.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction46.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction22.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction71.times(35);
        java.lang.String str75 = aDTFraction71.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "10/32" + "'", str75, "10/32");
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        int int91 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (-1));
        int int95 = aDTFraction94.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction2.times(aDTFraction94);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction2.times(1000000);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction98);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        java.lang.String str49 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction48.times((int) (short) 100);
        int int52 = aDTFraction48.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/1000000" + "'", str49, "0/1000000");
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction9.denominator();
        java.lang.String str11 = aDTFraction9.toString();
        boolean boolean13 = aDTFraction9.equals((java.lang.Object) (byte) 10);
        int int14 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        int int42 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction29.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        java.lang.Class<?> wildcardClass52 = aDTFraction49.getClass();
        boolean boolean53 = aDTFraction29.equals((java.lang.Object) aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        boolean boolean63 = aDTFraction59.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.times((int) (byte) 100);
        java.lang.String str66 = aDTFraction59.toString();
        int int67 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction49.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction17.times(aDTFraction68);
        java.lang.String str70 = aDTFraction17.toString();
        float float71 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction9.plus(aDTFraction17);
        float float73 = aDTFraction17.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-1/1" + "'", str70, "-1/1");
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-1.0f) + "'", float71 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-1.0f) + "'", float73 == (-1.0f));
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        java.lang.String str21 = aDTFraction19.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction19.plus(aDTFraction22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', 10);
        float float3 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 5.2f + "'", float3 == 5.2f);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        float float18 = aDTFraction2.value();
        int int19 = aDTFraction2.numerator();
        float float20 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        float float47 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction50.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        boolean boolean64 = aDTFraction56.equals((java.lang.Object) aDTFraction62);
        java.lang.String str65 = aDTFraction62.toString();
        java.lang.String str66 = aDTFraction62.toString();
        float float67 = aDTFraction62.value();
        int int68 = aDTFraction62.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction79.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int92 = aDTFraction91.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction79.times(aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction76.times(aDTFraction93);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction62.plus(aDTFraction93);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction28.plus(aDTFraction93);
        int int97 = aDTFraction93.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction93.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction99 = aDTFraction2.times(aDTFraction98);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-1.0f) + "'", float18 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-1.0f) + "'", float20 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0/-1" + "'", str65, "0/-1");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 100 + "'", int97 == 100);
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertNotNull(aDTFraction99);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        java.lang.String str14 = aDTFraction5.toString();
        int int15 = aDTFraction5.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0/-1" + "'", str14, "0/-1");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction37.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction38.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction34.plus(aDTFraction43);
        java.lang.Class<?> wildcardClass46 = aDTFraction34.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        float float40 = aDTFraction39.value();
        java.lang.String str41 = aDTFraction39.toString();
        java.lang.String str42 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.times((int) (short) 10);
        float float45 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction48.times(aDTFraction54);
        int int58 = aDTFraction54.numerator();
        int int59 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        boolean boolean69 = aDTFraction65.equals((java.lang.Object) ' ');
        boolean boolean71 = aDTFraction65.equals((java.lang.Object) "");
        float float72 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction54.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction39.times(aDTFraction73);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-100" + "'", str41, "0/-100");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-100" + "'", str42, "0/-100");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(0);
        int int5 = aDTFraction2.numerator();
        java.lang.Class<?> wildcardClass6 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        int int4 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        java.lang.String str6 = aDTFraction5.toString();
        int int7 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(100, (-100));
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.plus(aDTFraction10);
        java.lang.Class<?> wildcardClass12 = aDTFraction5.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "32/10" + "'", str6, "32/10");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        int int31 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        java.lang.String str44 = aDTFraction37.toString();
        int int45 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction16.plus(aDTFraction47);
        int int49 = aDTFraction47.denominator();
        int int50 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction47.times(aDTFraction63);
        int int65 = aDTFraction63.denominator();
        java.lang.String str66 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction5.times(aDTFraction63);
        float float68 = aDTFraction67.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction67.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/1" + "'", str66, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        int int33 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        boolean boolean39 = aDTFraction36.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction36.times(aDTFraction42);
        int int44 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction36);
        java.lang.String str46 = aDTFraction36.toString();
        java.lang.Class<?> wildcardClass47 = aDTFraction36.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100/100" + "'", str46, "100/100");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction17.numerator();
        boolean boolean20 = aDTFraction17.equals((java.lang.Object) 10.0f);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        boolean boolean30 = aDTFraction26.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction26.times((int) (byte) 100);
        java.lang.String str33 = aDTFraction26.toString();
        int int34 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction26.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction26.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        java.lang.Class<?> wildcardClass47 = aDTFraction46.getClass();
        boolean boolean48 = aDTFraction26.equals((java.lang.Object) aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction17.times(aDTFraction26);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction49.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction49);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction9.denominator();
        java.lang.String str11 = aDTFraction9.toString();
        boolean boolean13 = aDTFraction9.equals((java.lang.Object) (byte) 10);
        int int14 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        int int42 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction29.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        java.lang.Class<?> wildcardClass52 = aDTFraction49.getClass();
        boolean boolean53 = aDTFraction29.equals((java.lang.Object) aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        boolean boolean63 = aDTFraction59.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.times((int) (byte) 100);
        java.lang.String str66 = aDTFraction59.toString();
        int int67 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction49.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction17.times(aDTFraction68);
        java.lang.String str70 = aDTFraction17.toString();
        float float71 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction9.plus(aDTFraction17);
        int int73 = aDTFraction9.denominator();
        int int74 = aDTFraction9.denominator();
        java.lang.String str75 = aDTFraction9.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-1/1" + "'", str70, "-1/1");
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-1.0f) + "'", float71 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-1" + "'", str75, "0/-1");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        java.lang.String str9 = aDTFraction8.toString();
        java.lang.Object obj10 = null;
        boolean boolean11 = aDTFraction8.equals(obj10);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction17.times((int) 'a');
        int int22 = aDTFraction21.denominator();
        java.lang.String str23 = aDTFraction21.toString();
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        float float30 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction28.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction21.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction8.times(aDTFraction32);
        java.lang.String str34 = aDTFraction8.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-100/-100" + "'", str9, "-100/-100");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 1.0f + "'", float30 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-100/-100" + "'", str34, "-100/-100");
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.times(aDTFraction38);
        int int40 = aDTFraction38.denominator();
        int int41 = aDTFraction38.denominator();
        java.lang.Class<?> wildcardClass42 = aDTFraction38.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        float float18 = aDTFraction2.value();
        int int19 = aDTFraction2.numerator();
        float float20 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction2.reciprocal();
        java.lang.String str22 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-1.0f) + "'", float18 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-1.0f) + "'", float20 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1/1" + "'", str22, "-1/1");
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int16 = aDTFraction15.denominator();
        float float17 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction5.plus(aDTFraction15);
        int int19 = aDTFraction15.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 1.0f + "'", float17 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        int int41 = aDTFraction37.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        java.lang.Class<?> wildcardClass51 = aDTFraction48.getClass();
        boolean boolean52 = aDTFraction28.equals((java.lang.Object) aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        boolean boolean62 = aDTFraction58.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction58.times((int) (byte) 100);
        java.lang.String str65 = aDTFraction58.toString();
        int int66 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction48.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction67.times(52);
        boolean boolean70 = aDTFraction25.equals((java.lang.Object) aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction15.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction71.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction71.reciprocal();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0/-1" + "'", str65, "0/-1");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        int int45 = aDTFraction15.numerator();
        float float46 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction15.times(9700);
        int int49 = aDTFraction15.numerator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction15.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        int int18 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int42 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction29.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction26.times(aDTFraction43);
        float float45 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction5.plus(aDTFraction26);
        java.lang.Class<?> wildcardClass47 = aDTFraction46.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 0.0f + "'", float45 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction8.times(aDTFraction11);
        boolean boolean14 = aDTFraction12.equals((java.lang.Object) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 10);
        int int18 = aDTFraction17.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction17.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        boolean boolean30 = aDTFraction26.equals((java.lang.Object) ' ');
        boolean boolean32 = aDTFraction26.equals((java.lang.Object) "");
        java.lang.String str33 = aDTFraction26.toString();
        int int34 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction40.times((int) (byte) 10);
        boolean boolean53 = aDTFraction26.equals((java.lang.Object) aDTFraction52);
        int int54 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction52.times((int) (byte) 1);
        int int57 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction73);
        int int77 = aDTFraction73.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction64.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction73.times((int) (byte) 0);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction60.times(aDTFraction80);
        float float83 = aDTFraction82.value();
        java.lang.String str84 = aDTFraction82.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction52.plus(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction20.plus(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction12.times(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-1.0f) + "'", float61 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/-1" + "'", str84, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction25.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction25.times((-100));
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction40.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int39 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction26.times(aDTFraction38);
        int int41 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction26.reciprocal();
        boolean boolean43 = aDTFraction22.equals((java.lang.Object) aDTFraction42);
        float float44 = aDTFraction42.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-1.0f) + "'", float44 == (-1.0f));
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction16.times(0);
        java.lang.Object obj19 = null;
        boolean boolean20 = aDTFraction18.equals(obj19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction18.times((-1));
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        java.lang.String str40 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction46.times((int) 'a');
        int int51 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction50.times((int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction39.plus(aDTFraction53);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction54.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0/-1" + "'", str40, "0/-1");
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) 'a', (int) (byte) -1);
        java.lang.String str3 = aDTFraction2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "97/-1" + "'", str3, "97/-1");
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        int int6 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction9.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean24 = aDTFraction22.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        int int37 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        boolean boolean54 = aDTFraction46.equals((java.lang.Object) aDTFraction52);
        java.lang.String str55 = aDTFraction52.toString();
        java.lang.String str56 = aDTFraction52.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction52.times(aDTFraction59);
        boolean boolean62 = aDTFraction27.equals((java.lang.Object) aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction22.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction9.times(aDTFraction63);
        boolean boolean65 = aDTFraction5.equals((java.lang.Object) aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        boolean boolean75 = aDTFraction71.equals((java.lang.Object) ' ');
        boolean boolean77 = aDTFraction71.equals((java.lang.Object) "");
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float84 = aDTFraction83.value();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction80.plus(aDTFraction83);
        int int86 = aDTFraction80.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction80.times((int) '#');
        boolean boolean89 = aDTFraction71.equals((java.lang.Object) aDTFraction88);
        int int90 = aDTFraction88.denominator();
        boolean boolean91 = aDTFraction5.equals((java.lang.Object) int90);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction5.reciprocal();
        java.lang.Class<?> wildcardClass93 = aDTFraction5.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0/-1" + "'", str56, "0/-1");
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + (-0.0f) + "'", float84 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) '4');
        int int3 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        int int52 = aDTFraction42.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        boolean boolean69 = aDTFraction61.equals((java.lang.Object) aDTFraction67);
        java.lang.String str70 = aDTFraction67.toString();
        java.lang.String str71 = aDTFraction67.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction74);
        boolean boolean77 = aDTFraction42.equals((java.lang.Object) aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction42.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction31.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction31.times(9700);
        java.lang.Class<?> wildcardClass82 = aDTFraction31.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        int int31 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        java.lang.String str44 = aDTFraction37.toString();
        int int45 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction16.plus(aDTFraction47);
        int int49 = aDTFraction47.denominator();
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction5.times(aDTFraction47);
        int int53 = aDTFraction47.denominator();
        int int54 = aDTFraction47.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times((-52));
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times((-10));
        java.lang.String str7 = aDTFraction6.toString();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0/10" + "'", str7, "0/10");
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction14.plus(aDTFraction23);
        int int40 = aDTFraction39.denominator();
        int int41 = aDTFraction39.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "100/100" + "'", str17, "100/100");
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-100) + "'", int40 == (-100));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-100) + "'", int41 == (-100));
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int12 = aDTFraction11.denominator();
        float float13 = aDTFraction11.value();
        float float14 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        int int43 = aDTFraction39.numerator();
        int int44 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        boolean boolean54 = aDTFraction50.equals((java.lang.Object) ' ');
        boolean boolean56 = aDTFraction50.equals((java.lang.Object) "");
        float float57 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction39.times(aDTFraction50);
        boolean boolean59 = aDTFraction30.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        int int68 = aDTFraction62.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction62.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        int int81 = aDTFraction75.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction71.times(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction30.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction11.plus(aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction84.times((int) (byte) 0);
        boolean boolean87 = aDTFraction2.equals((java.lang.Object) aDTFraction84);
        java.lang.Class<?> wildcardClass88 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction19.equals((java.lang.Object) 10);
        boolean boolean27 = aDTFraction14.equals((java.lang.Object) aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        int int43 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        java.lang.Class<?> wildcardClass53 = aDTFraction50.getClass();
        boolean boolean54 = aDTFraction30.equals((java.lang.Object) aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction50.times(aDTFraction66);
        boolean boolean68 = aDTFraction19.equals((java.lang.Object) aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction66.times(10);
        int int71 = aDTFraction66.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction66.times(3200);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction73.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction73);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        int int19 = aDTFraction18.denominator();
        float float20 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction46.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction18.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        int int64 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction68.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction69.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean75 = aDTFraction71.equals((java.lang.Object) aDTFraction74);
        int int76 = aDTFraction74.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction59.plus(aDTFraction74);
        java.lang.String str78 = aDTFraction74.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "100/100" + "'", str78, "100/100");
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        int int42 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        boolean boolean52 = aDTFraction48.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction48.times((int) (byte) 100);
        java.lang.String str55 = aDTFraction48.toString();
        int int56 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction48.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction27.plus(aDTFraction58);
        boolean boolean60 = aDTFraction2.equals((java.lang.Object) aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction63.times(aDTFraction69);
        boolean boolean73 = aDTFraction2.equals((java.lang.Object) aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction63.reciprocal();
        int int75 = aDTFraction74.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction14.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        int int31 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        java.lang.String str44 = aDTFraction37.toString();
        int int45 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction16.plus(aDTFraction47);
        int int49 = aDTFraction47.denominator();
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction5.times(aDTFraction47);
        int int53 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction5.times((-52));
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction55.times((int) '#');
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        int int39 = aDTFraction35.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction26.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        java.lang.Class<?> wildcardClass49 = aDTFraction46.getClass();
        boolean boolean50 = aDTFraction26.equals((java.lang.Object) aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction56.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction46.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction22.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction71.times(35);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.times(9700);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction76);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        float float10 = aDTFraction5.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        float float35 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int59 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction46.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction43.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction43.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction33.times(aDTFraction43);
        int int65 = aDTFraction64.numerator();
        int int66 = aDTFraction64.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction64.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction28.times(aDTFraction64);
        java.lang.String str70 = aDTFraction64.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction6.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) aDTFraction11);
        int int13 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction2.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        java.lang.String str28 = aDTFraction11.toString();
        int int29 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        int int38 = aDTFraction32.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction32.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        int int49 = aDTFraction43.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction43.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        boolean boolean61 = aDTFraction57.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction57.times((int) (byte) 100);
        float float64 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction43.plus(aDTFraction57);
        boolean boolean66 = aDTFraction32.equals((java.lang.Object) aDTFraction57);
        java.lang.String str67 = aDTFraction32.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((-100), (int) (byte) 100);
        boolean boolean71 = aDTFraction32.equals((java.lang.Object) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction11.times(aDTFraction32);
        float float73 = aDTFraction32.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        int int25 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        boolean boolean42 = aDTFraction34.equals((java.lang.Object) aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        boolean boolean52 = aDTFraction45.equals((java.lang.Object) 10);
        boolean boolean53 = aDTFraction40.equals((java.lang.Object) aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        int int69 = aDTFraction65.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        java.lang.Class<?> wildcardClass79 = aDTFraction76.getClass();
        boolean boolean80 = aDTFraction56.equals((java.lang.Object) aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float87 = aDTFraction86.value();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction83.plus(aDTFraction86);
        boolean boolean90 = aDTFraction86.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction86.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction76.times(aDTFraction92);
        boolean boolean94 = aDTFraction45.equals((java.lang.Object) aDTFraction92);
        boolean boolean95 = aDTFraction22.equals((java.lang.Object) boolean94);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction22.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + (-0.0f) + "'", float87 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        java.lang.String str24 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction14.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times((int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction28.times((-10000));
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction28.times((-1));
        float float33 = aDTFraction28.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        int int9 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction12.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction27.reciprocal();
        boolean boolean29 = aDTFraction2.equals((java.lang.Object) aDTFraction28);
        boolean boolean31 = aDTFraction2.equals((java.lang.Object) "1/100");
        float float32 = aDTFraction2.value();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 1.0f + "'", float32 == 1.0f);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        int int42 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        boolean boolean52 = aDTFraction48.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction48.times((int) (byte) 100);
        java.lang.String str55 = aDTFraction48.toString();
        int int56 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction48.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction27.plus(aDTFraction58);
        boolean boolean60 = aDTFraction2.equals((java.lang.Object) aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction63.times(aDTFraction69);
        boolean boolean73 = aDTFraction2.equals((java.lang.Object) aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction63.reciprocal();
        java.lang.Class<?> wildcardClass75 = aDTFraction74.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction7.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        int int26 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction16.times(aDTFraction20);
        int int28 = aDTFraction27.denominator();
        boolean boolean29 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction35.times((int) (byte) 100);
        java.lang.String str42 = aDTFraction35.toString();
        int int43 = aDTFraction35.denominator();
        int int44 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        boolean boolean54 = aDTFraction50.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction50.times((int) (byte) 100);
        java.lang.String str57 = aDTFraction50.toString();
        int int58 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction50.times((int) ' ');
        int int61 = aDTFraction60.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction35.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction65.times(aDTFraction71);
        int int75 = aDTFraction71.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        java.lang.String str84 = aDTFraction78.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction71.plus(aDTFraction78);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction85.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction62.plus(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction62);
        float float91 = aDTFraction2.value();
        org.junit.Assert.assertNotNull(aDTFraction4);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/-1" + "'", str84, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + 0.0f + "'", float86 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + (-1.0f) + "'", float91 == (-1.0f));
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        int int38 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction44.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction23.plus(aDTFraction54);
        int int56 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        int int65 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction59.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        int int76 = aDTFraction70.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction70.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float85 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction81.plus(aDTFraction84);
        boolean boolean88 = aDTFraction84.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction84.times((int) (byte) 100);
        float float91 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction70.plus(aDTFraction84);
        boolean boolean93 = aDTFraction59.equals((java.lang.Object) aDTFraction84);
        boolean boolean94 = aDTFraction54.equals((java.lang.Object) aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction59.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction14.plus(aDTFraction59);
        java.lang.Class<?> wildcardClass98 = aDTFraction14.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + (-0.0f) + "'", float91 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        boolean boolean10 = aDTFraction2.equals((java.lang.Object) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.times((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction12.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(aDTFraction12);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction19.equals((java.lang.Object) 10);
        boolean boolean27 = aDTFraction14.equals((java.lang.Object) aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        int int43 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        java.lang.Class<?> wildcardClass53 = aDTFraction50.getClass();
        boolean boolean54 = aDTFraction30.equals((java.lang.Object) aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction50.times(aDTFraction66);
        boolean boolean68 = aDTFraction19.equals((java.lang.Object) aDTFraction66);
        int int69 = aDTFraction66.denominator();
        java.lang.String str70 = aDTFraction66.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        java.lang.String str8 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        boolean boolean18 = aDTFraction14.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (byte) 100);
        java.lang.String str21 = aDTFraction14.toString();
        int int22 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction14.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction2.plus(aDTFraction14);
        java.lang.String str26 = aDTFraction14.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction14.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/-1" + "'", str8, "0/-1");
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction20.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction21.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction26.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction49.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction17.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        boolean boolean71 = aDTFraction67.equals((java.lang.Object) ' ');
        boolean boolean73 = aDTFraction67.equals((java.lang.Object) "");
        java.lang.String str74 = aDTFraction67.toString();
        int int75 = aDTFraction67.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction61.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction61.times((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction61.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-1" + "'", str74, "0/-1");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction78);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) (-1));
        int int5 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        int int45 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        java.lang.String str54 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.plus(aDTFraction48);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction32.plus(aDTFraction55);
        java.lang.String str60 = aDTFraction59.toString();
        float float61 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction67.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction82.times((int) (byte) 10);
        java.lang.Object obj85 = new java.lang.Object();
        boolean boolean86 = aDTFraction84.equals(obj85);
        float float87 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = new com.thealgorithms.maths.ADTFraction((int) ' ', (int) ' ');
        int int91 = aDTFraction90.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction84.plus(aDTFraction90);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction59.plus(aDTFraction84);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction93.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/1" + "'", str60, "0/1");
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 0.0f + "'", float61 == 0.0f);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + 0.0f + "'", float87 == 0.0f);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 32 + "'", int91 == 32);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(32, 10000);
        float float3 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0032f + "'", float3 == 0.0032f);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass37 = aDTFraction34.getClass();
        boolean boolean38 = aDTFraction14.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int78 = aDTFraction77.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction65.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction62.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction54.plus(aDTFraction62);
        float float82 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction54.times((int) 'a');
        int int85 = aDTFraction84.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction84.times(0);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + 0.0f + "'", float82 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(aDTFraction87);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        int int29 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction35.times((int) (byte) 100);
        java.lang.String str42 = aDTFraction35.toString();
        int int43 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction35.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction14.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction49.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction50.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean56 = aDTFraction52.equals((java.lang.Object) aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction46.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction11.times(aDTFraction55);
        int int60 = aDTFraction11.denominator();
        int int61 = aDTFraction11.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        float float10 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction21.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int34 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction18.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction18.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction8.times(aDTFraction18);
        int int40 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction5.plus(aDTFraction39);
        int int42 = aDTFraction39.numerator();
        int int43 = aDTFraction39.denominator();
        java.lang.String str44 = aDTFraction39.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction44.times(52);
        float float48 = aDTFraction47.value();
        float float49 = aDTFraction47.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        boolean boolean15 = aDTFraction11.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction11.times((int) (byte) 100);
        java.lang.String str18 = aDTFraction11.toString();
        int int19 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        int int35 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        boolean boolean47 = aDTFraction41.equals((java.lang.Object) "");
        float float48 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction30.times(aDTFraction41);
        boolean boolean50 = aDTFraction21.equals((java.lang.Object) aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction62.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction21.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction2.plus(aDTFraction74);
        int int76 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction2.times((int) (byte) -1);
        float float79 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(9700, (int) '4');
        int int3 = aDTFraction2.denominator();
        java.lang.Class<?> wildcardClass4 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) (byte) 10);
        int int3 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times(aDTFraction28);
        java.lang.String str30 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        int int48 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction54.times((int) (byte) 100);
        java.lang.String str61 = aDTFraction54.toString();
        int int62 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction54.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction33.plus(aDTFraction64);
        int int66 = aDTFraction64.denominator();
        int int67 = aDTFraction64.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        int int76 = aDTFraction70.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction70.plus(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction64.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int85 = aDTFraction84.denominator();
        boolean boolean87 = aDTFraction84.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction80.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction28.times(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction28.times((int) (short) 100);
        float float92 = aDTFraction28.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/10" + "'", str30, "0/10");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + 0.0f + "'", float92 == 0.0f);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        int int16 = aDTFraction12.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.String str25 = aDTFraction19.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        int int42 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction29.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction12.times(aDTFraction29);
        java.lang.String str45 = aDTFraction12.toString();
        float float46 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction50.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        boolean boolean64 = aDTFraction56.equals((java.lang.Object) aDTFraction62);
        java.lang.String str65 = aDTFraction62.toString();
        java.lang.String str66 = aDTFraction62.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction62.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction74.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float87 = aDTFraction86.value();
        boolean boolean88 = aDTFraction80.equals((java.lang.Object) aDTFraction86);
        java.lang.String str89 = aDTFraction86.toString();
        java.lang.String str90 = aDTFraction86.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction86.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction62.plus(aDTFraction92);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction92.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction12.plus(aDTFraction95);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/10" + "'", str3, "-1/10");
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0/-1" + "'", str25, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0/-1" + "'", str65, "0/-1");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + (-0.0f) + "'", float87 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "0/-1" + "'", str89, "0/-1");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0/-1" + "'", str90, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction96);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        float float18 = aDTFraction2.value();
        int int19 = aDTFraction2.numerator();
        int int20 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-1.0f) + "'", float18 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) (short) -1);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction15);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        int int45 = aDTFraction15.numerator();
        java.lang.Class<?> wildcardClass46 = aDTFraction15.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        float float16 = aDTFraction5.value();
        float float17 = aDTFraction5.value();
        java.lang.Class<?> wildcardClass18 = aDTFraction5.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass37 = aDTFraction34.getClass();
        boolean boolean38 = aDTFraction14.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int78 = aDTFraction77.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction65.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction62.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction54.plus(aDTFraction62);
        java.lang.String str82 = aDTFraction62.toString();
        java.lang.String str83 = aDTFraction62.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0/1" + "'", str82, "0/1");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0/1" + "'", str83, "0/1");
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        int int25 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        boolean boolean42 = aDTFraction34.equals((java.lang.Object) aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        boolean boolean52 = aDTFraction45.equals((java.lang.Object) 10);
        boolean boolean53 = aDTFraction40.equals((java.lang.Object) aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        int int69 = aDTFraction65.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        java.lang.Class<?> wildcardClass79 = aDTFraction76.getClass();
        boolean boolean80 = aDTFraction56.equals((java.lang.Object) aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float87 = aDTFraction86.value();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction83.plus(aDTFraction86);
        boolean boolean90 = aDTFraction86.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction86.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction76.times(aDTFraction92);
        boolean boolean94 = aDTFraction45.equals((java.lang.Object) aDTFraction92);
        boolean boolean95 = aDTFraction22.equals((java.lang.Object) boolean94);
        java.lang.String str96 = aDTFraction22.toString();
        java.lang.Class<?> wildcardClass97 = aDTFraction22.getClass();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + (-0.0f) + "'", float87 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "0/-1" + "'", str96, "0/-1");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, (int) (byte) -1);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-100), (int) (short) 1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction6.reciprocal();
        int int8 = aDTFraction6.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction6.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.plus(aDTFraction6);
        java.lang.String str11 = aDTFraction6.toString();
        java.lang.Class<?> wildcardClass12 = aDTFraction6.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-100/1" + "'", str3, "-100/1");
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10/32" + "'", str11, "10/32");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(97, (int) (short) 100);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        int int11 = aDTFraction2.numerator();
        java.lang.String str12 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str16 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction42.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction42.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction15.times(aDTFraction42);
        boolean boolean59 = aDTFraction2.equals((java.lang.Object) aDTFraction42);
        java.lang.String str60 = aDTFraction2.toString();
        int int61 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(9700, 32);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '#', 1);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        java.lang.String str4 = aDTFraction2.toString();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "35/1" + "'", str4, "35/1");
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', 10);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction5.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        int int22 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction16.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        boolean boolean34 = aDTFraction30.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction30.times((int) (byte) 100);
        float float37 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction16.plus(aDTFraction30);
        boolean boolean39 = aDTFraction5.equals((java.lang.Object) aDTFraction30);
        java.lang.Object obj40 = null;
        boolean boolean41 = aDTFraction30.equals(obj40);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean46 = aDTFraction44.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction44.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction30.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction52.times(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int65 = aDTFraction64.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction52.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction52.reciprocal();
        java.lang.String str68 = aDTFraction52.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction52.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction52.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction52.times((-1));
        boolean boolean74 = aDTFraction2.equals((java.lang.Object) (-1));
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-1/1" + "'", str68, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str7 = aDTFraction6.toString();
        int int8 = aDTFraction6.denominator();
        float float9 = aDTFraction6.value();
        float float10 = aDTFraction6.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction6.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction3.plus(aDTFraction6);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction13.times((int) (short) 1);
        float float16 = aDTFraction15.value();
        java.lang.Class<?> wildcardClass17 = aDTFraction15.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1/1" + "'", str7, "-1/1");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-1.0f) + "'", float9 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-1.0f) + "'", float10 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 8.7f + "'", float16 == 8.7f);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        int int31 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        java.lang.String str44 = aDTFraction37.toString();
        int int45 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction16.plus(aDTFraction47);
        int int49 = aDTFraction47.denominator();
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction5.times(aDTFraction47);
        float float53 = aDTFraction52.value();
        float float54 = aDTFraction52.value();
        java.lang.String str55 = aDTFraction52.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 0.0f + "'", float54 == 0.0f);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/1" + "'", str55, "0/1");
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(35, 52);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        int int4 = aDTFraction2.numerator();
        float float5 = aDTFraction2.value();
        float float6 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.6730769f + "'", float5 == 0.6730769f);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 0.6730769f + "'", float6 == 0.6730769f);
        org.junit.Assert.assertNotNull(aDTFraction8);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction14.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        java.lang.String str27 = aDTFraction25.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        int int40 = aDTFraction34.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction34.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        boolean boolean52 = aDTFraction48.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction48.times((int) (byte) 100);
        float float55 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction34.plus(aDTFraction48);
        int int57 = aDTFraction34.numerator();
        java.lang.String str58 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction34.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction64.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction65.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean71 = aDTFraction67.equals((java.lang.Object) aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        int int80 = aDTFraction74.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction70.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction61.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str86 = aDTFraction85.toString();
        boolean boolean87 = aDTFraction61.equals((java.lang.Object) str86);
        int int88 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction22.plus(aDTFraction61);
        java.lang.String str90 = aDTFraction89.toString();
        int int91 = aDTFraction89.denominator();
        int int92 = aDTFraction89.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction89.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0/1" + "'", str90, "0/1");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) ' ');
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction2.reciprocal();
        int int22 = aDTFraction2.numerator();
        java.lang.String str23 = aDTFraction2.toString();
        int int24 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1/1" + "'", str23, "-1/1");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        float float19 = aDTFraction14.value();
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction14.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        java.lang.String str52 = aDTFraction50.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction50.plus(aDTFraction55);
        boolean boolean57 = aDTFraction14.equals((java.lang.Object) aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(100, (int) '4');
        boolean boolean61 = aDTFraction14.equals((java.lang.Object) aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction60.times(1024);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, 1);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction22.plus(aDTFraction28);
        java.lang.Class<?> wildcardClass31 = aDTFraction22.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(32, (int) ' ');
    }
}

